[
  {
    "id": 28457823,
    "name": "freeCodeCamp",
    "full_name": "freeCodeCamp/freeCodeCamp",
    "description": "freeCodeCamp.org's open-source codebase and curriculum. Learn math, programming, and computer science for free.",
    "url": "https://github.com/freeCodeCamp/freeCodeCamp",
    "clone_url": "https://github.com/freeCodeCamp/freeCodeCamp.git",
    "star_count": 423125,
    "fork_count": 40785,
    "language": "TypeScript",
    "topics": [
      "learn-to-code",
      "nonprofits",
      "programming",
      "nodejs",
      "react",
      "d3",
      "careers",
      "education",
      "teachers",
      "javascript",
      "certification",
      "curriculum",
      "math",
      "community",
      "freecodecamp",
      "hacktoberfest"
    ],
    "last_commit_date": "2025-07-15T22:09:46+00:00",
    "created_at": "2014-12-24T17:49:19+00:00",
    "updated_at": "2025-07-16T06:31:30+00:00",
    "size": 506760,
    "default_branch": "main",
    "license": "BSD 3-Clause \"New\" or \"Revised\" License",
    "readme": "[![freeCodeCamp Social Banner](https://cdn.freecodecamp.org/platform/universal/fcc_banner_new.png)](https://www.freecodecamp.org/)\n\n[![Pull Requests Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat)](https://makeapullrequest.com)\n[![first-timers-only Friendly](https://img.shields.io/badge/first--timers--only-friendly-blue.svg)](https://www.firsttimersonly.com/)\n[![Open Source Helpers](https://www.codetriage.com/freecodecamp/freecodecamp/badges/users.svg)](https://www.codetriage.com/freecodecamp/freecodecamp)\n[![Setup Automated](https://img.shields.io/badge/setup-automated-blue?logo=gitpod)](https://gitpod.io/from-referrer/)\n[![Discord](https://img.shields.io/discord/692816967895220344?logo=discord&label=Discord&color=5865F2)](https://discord.gg/PRyKn3Vbay)\n\n## freeCodeCamp.org's open-source codebase and curriculum\n\n[freeCodeCamp.org](https://www.freecodecamp.org) is a friendly community where you can learn to code for free. It is run by a [donor-supported 501(c)(3) charity](https://www.freecodecamp.org/donate) to help millions of busy adults transition into tech. Our community has already helped more than 40,000 people get their first developer job.\n\nOur full-stack web development and machine learning curriculum is completely free and self-paced. We have thousands of interactive coding challenges to help you expand your skills.\n\n## Table of Contents\n\n- [Certifications](#certifications)\n- [The Learning Platform](#the-learning-platform)\n- [Reporting Bugs and Issues](#reporting-bugs-and-issues)\n- [Reporting Security Issues and Responsible Disclosure](#reporting-security-issues-and-responsible-disclosure)\n- [Contributing](#contributing)\n- [Platform, Build and Deployment Status](#platform-build-and-deployment-status)\n- [License](#license)\n\n### Certifications\n\nfreeCodeCamp.org offers several free developer certifications. Each of these certifications involves building 5 required web app projects, along with hundreds of optional coding challenges to help you prepare for those projects. We estimate that each certification will take a beginner programmer around 300 hours to earn.\n\nEach of these 50 projects in the freeCodeCamp.org curriculum has its own agile user stories and automated tests. These help you build up your project incrementally and ensure you've fulfilled all the user stories before you submit it.\n\nYou can pull in these test suites through [freeCodeCamp's CDN](https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js). This means you can build these projects on websites like CodePen and Replit - or even on your local computer's development environment.\n\nOnce you've earned a certification, you will always have it. You will always be able to link to it from your LinkedIn or resume. And when your prospective employers or freelance clients click that link, they'll see a verified certification specific to you.\n\nThe one exception to this is if we discover violations of our [Academic Honesty Policy](https://www.freecodecamp.org/news/academic-honesty-policy/). When we catch people unambiguously plagiarizing (submitting other people's code or projects as their own without citation), we do what all rigorous institutions of learning should do - we revoke their certifications and ban those people.\n\nHere are our twelve core certifications:\n\n#### 1. [Responsive Web Design Certification](https://www.freecodecamp.org/learn/2022/responsive-web-design/)\n\n- [Learn HTML by Building a Cat Photo App](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-html-by-building-a-cat-photo-app)\n- [Learn Basic CSS by Building a Cafe Menu](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-basic-css-by-building-a-cafe-menu)\n- [Learn CSS Colors by Building a Set of Colored Markers](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-colors-by-building-a-set-of-colored-markers)\n- [Learn HTML Forms by Building a Registration Form](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-html-forms-by-building-a-registration-form)\n- [Learn the CSS Box Model by Building a Rothko Painting](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-the-css-box-model-by-building-a-rothko-painting)\n- [Learn CSS Flexbox by Building a Photo Gallery](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-flexbox-by-building-a-photo-gallery)\n- [Learn Typography by Building a Nutrition Label](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-typography-by-building-a-nutrition-label)\n- [Learn Accessibility by Building a Quiz](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-accessibility-by-building-a-quiz)\n- [Learn More About CSS Pseudo Selectors by Building A Balance Sheet](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-more-about-css-pseudo-selectors-by-building-a-balance-sheet)\n- [Learn Intermediate CSS by Building a Cat Painting](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-intermediate-css-by-building-a-cat-painting)\n- [Learn Responsive Web Design by Building a Piano](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-responsive-web-design-by-building-a-piano)\n- [Learn CSS Variables by Building a City Skyline](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-variables-by-building-a-city-skyline)\n- [Learn CSS Grid by Building a Magazine](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-grid-by-building-a-magazine)\n- [Learn CSS Transforms by Building a Penguin](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-transforms-by-building-a-penguin)\n- [Learn CSS Animations by Building a Ferris Wheel](https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-animation-by-building-a-ferris-wheel)\n  <br />\n  <br />\n  **Projects**: [Survey Form](https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-survey-form-project/build-a-survey-form), [Tribute Page](https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-tribute-page-project/build-a-tribute-page), [Technical Documentation Page](https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-technical-documentation-page-project/build-a-technical-documentation-page), [Product Landing Page](https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-product-landing-page-project/build-a-product-landing-page), [Personal Portfolio Webpage](https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-personal-portfolio-webpage-project/build-a-personal-portfolio-webpage)\n\n#### 2. [JavaScript Algorithms and Data Structures Certification](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/)\n\n- [Learn Introductory JavaScript by Building a Pyramid Generator](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator)\n- [Learn Basic JavaScript by Building a Role Playing Game](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-javascript-by-building-a-role-playing-game)\n- [Learn Form Validation by Building a Calorie Counter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-form-validation-by-building-a-calorie-counter)\n- [Learn Basic String and Array Methods by Building a Music Player](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-string-and-array-methods-by-building-a-music-player)\n- [Learn the Date Object by Building a Date Formatter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-the-date-object-by-building-a-date-formatter)\n- [Learn Modern JavaScript Methods By Building Football Team Cards](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-modern-javascript-methods-by-building-football-team-cards)\n- [Learn localStorage by Building a Todo App](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-localstorage-by-building-a-todo-app)\n- [Learn Recursion by Building a Decimal to Binary Converter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-recursion-by-building-a-decimal-to-binary-converter)\n- [Learn Basic Algorithmic Thinking by Building a Number Sorter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-algorithmic-thinking-by-building-a-number-sorter)\n- [Learn Advanced Array Methods by Building a Statistics Calculator](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-advanced-array-methods-by-building-a-statistics-calculator)\n- [Learn Functional Programming by Building a Spreadsheet](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-functional-programming-by-building-a-spreadsheet)\n- [Learn Regular Expressions by Building a Spam Filter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-regular-expressions-by-building-a-spam-filter)\n- [Learn Basic OOP by Building a Shopping Cart](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-basic-oop-by-building-a-shopping-cart)\n- [Learn Intermediate OOP by Building a Platformer Game](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-intermediate-oop-by-building-a-platformer-game)\n- [Learn Intermediate Algorithmic Thinking by Building a Dice Game](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#review-algorithmic-thinking-by-building-a-dice-game)\n- [Learn Fetch and Promises By Building an fCC Authors Page](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-fetch-and-promises-by-building-an-fcc-authors-page)\n- [Learn Asynchronous Programming by Building an fCC Forum Leaderboard](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/#learn-asynchronous-programming-by-building-an-fcc-forum-leaderboard)\n  <br />\n  <br />\n  **Projects**: [Palindrome Checker](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/build-a-palindrome-checker-project/build-a-palindrome-checker), [Roman Numeral Converter](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/build-a-roman-numeral-converter-project/build-a-roman-numeral-converter), [Telephone Number Validator](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/build-a-telephone-number-validator-project/build-a-telephone-number-validator), [Cash Register](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/build-a-cash-register-project/build-a-cash-register), [RPG Creature Search App](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/build-an-rpg-creature-search-app-project/build-an-rpg-creature-search-app)\n\n#### 3. [Front End Libraries Certification](https://www.freecodecamp.org/learn/front-end-development-libraries/)\n\n- [Bootstrap](https://www.freecodecamp.org/learn/front-end-development-libraries/#bootstrap)\n- [jQuery](https://www.freecodecamp.org/learn/front-end-development-libraries/#jquery)\n- [Sass](https://www.freecodecamp.org/learn/front-end-development-libraries/#sass)\n- [React](https://www.freecodecamp.org/learn/front-end-development-libraries/#react)\n- [Redux](https://www.freecodecamp.org/learn/front-end-development-libraries/#redux)\n- [React and Redux](https://www.freecodecamp.org/learn/front-end-development-libraries/#react-and-redux)\n  <br />\n  <br />\n  **Projects**: [Random Quote Machine](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine), [Markdown Previewer](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-markdown-previewer), [Drum Machine](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-drum-machine), [JavaScript Calculator](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-javascript-calculator), [25 + 5 Clock](https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-25--5-clock)\n\n#### 4. [Data Visualization Certification](https://www.freecodecamp.org/learn/data-visualization/)\n\n- [Data Visualization with D3](https://www.freecodecamp.org/learn/data-visualization/#data-visualization-with-d3)\n- [JSON APIs and Ajax](https://www.freecodecamp.org/learn/data-visualization/#json-apis-and-ajax)\n  <br />\n  <br />\n  **Projects**: [Bar Chart](https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-bar-chart), [Scatterplot Graph](https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-scatterplot-graph), [Heat Map](https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-heat-map), [Choropleth Map](https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-choropleth-map), [Treemap Diagram](https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-treemap-diagram)\n\n#### 5. [Relational Database](https://www.freecodecamp.org/learn/relational-database/)\n\n- [Learn Bash by Building a Boilerplate](https://www.freecodecamp.org/learn/relational-database/#learn-bash-by-building-a-boilerplate)\n- [Learn Relational Databases by Building a Database of Video Game Characters](https://www.freecodecamp.org/learn/relational-database/#learn-relational-databases-by-building-a-database-of-video-game-characters)\n- [Learn Bash Scripting by Building Five Programs](https://www.freecodecamp.org/learn/relational-database/#learn-bash-scripting-by-building-five-programs)\n- [Learn SQL by Building a Student Database: Part 1](https://www.freecodecamp.org/learn/relational-database/#learn-sql-by-building-a-student-database-part-1)\n- [Learn SQL by Building a Student Database: Part 2](https://www.freecodecamp.org/learn/relational-database/#learn-sql-by-building-a-student-database-part-2)\n- [Learn Advanced Bash by Building a Kitty Ipsum Translator](https://www.freecodecamp.org/learn/relational-database/#learn-advanced-bash-by-building-a-kitty-ipsum-translator)\n- [Learn Bash and SQL by Building a Bike Rental Shop](https://www.freecodecamp.org/learn/relational-database/#learn-bash-and-sql-by-building-a-bike-rental-shop)\n- [Learn Nano by Building a Castle](https://www.freecodecamp.org/learn/relational-database/#learn-nano-by-building-a-castle)\n- [Learn Git by Building an SQL Reference Object](https://www.freecodecamp.org/learn/relational-database/#learn-git-by-building-an-sql-reference-object)\n  <br />\n  <br />\n  **Projects**: [Salon Appointment Scheduler](https://www.freecodecamp.org/learn/relational-database/#build-a-salon-appointment-scheduler-project), [Celestial Bodies Database](https://www.freecodecamp.org/learn/relational-database/#build-a-celestial-bodies-database-project), [Periodic Table Database](https://www.freecodecamp.org/learn/relational-database/#build-a-periodic-table-database-project), [Number Guessing Game](https://www.freecodecamp.org/learn/relational-database/#build-a-number-guessing-game-project), [World Cup Database](https://www.freecodecamp.org/learn/relational-database/#build-a-world-cup-database-project)\n\n#### 6. [Back End Development and APIs Certification](https://www.freecodecamp.org/learn/back-end-development-and-apis/)\n\n- [Managing Packages with Npm](https://www.freecodecamp.org/learn/back-end-development-and-apis/#managing-packages-with-npm)\n- [Basic Node and Express](https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express)\n- [MongoDB and Mongoose](https://www.freecodecamp.org/learn/back-end-development-and-apis/#mongodb-and-mongoose)\n  <br />\n  <br />\n  **Projects**: [Timestamp Microservice](https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/timestamp-microservice), [Request Header Parser](https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/request-header-parser-microservice), [URL Shortener](https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice), [Exercise Tracker](https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker), [File Metadata Microservice](https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/file-metadata-microservice)\n\n#### 7. [Quality Assurance Certification](https://www.freecodecamp.org/learn/quality-assurance/)\n\n- [Quality Assurance and Testing with Chai](https://www.freecodecamp.org/learn/quality-assurance/#quality-assurance-and-testing-with-chai)\n- [Advanced Node and Express](https://www.freecodecamp.org/learn/quality-assurance/#advanced-node-and-express)\n  <br />\n  <br />\n  **Projects**: [Metric-Imperial Converter](https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/metric-imperial-converter), [Issue Tracker](https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/issue-tracker), [Personal Library](https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/personal-library), [Sudoku Solver](https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/sudoku-solver), [American British Translator](https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/american-british-translator)\n\n#### 8. [Scientific Computing with Python Certification](https://www.freecodecamp.org/learn/scientific-computing-with-python/)\n\n- [Learn String Manipulation by Building a Cipher](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher)\n- [Learn How to Work with Numbers and Strings by Implementing the Luhn Algorithm](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm)\n- [Learn Lambda Functions by Building an Expense Tracker](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-lambda-functions-by-building-an-expense-tracker)\n- [Learn List Comprehension by Building a Case Converter Program](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-list-comprehension-by-building-a-case-converter-program)\n- [Learn the Bisection Method by Finding the Square Root of a Number](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-the-bisection-method-by-finding-the-square-root-of-a-number)\n- [Learn Regular Expressions by Building a Password Generator](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator)\n- [Learn Algorithm Design by Building a Shortest Path Algorithm](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm)\n- [Learn Recursion by Solving the Tower of Hanoi Puzzle](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle)\n- [Learn Data Structures by Building the Merge Sort Algorithm](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-data-structures-by-building-the-merge-sort-algorithm)\n- [Learn Classes and Objects by Building a Sudoku Solver](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-classes-and-objects-by-building-a-sudoku-solver)\n- [Learn Tree Traversal by Building a Binary Search Tree](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-tree-traversal-by-building-a-binary-search-tree)\n- [Learn Special Methods by Building a Vector Space](https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-special-methods-by-building-a-vector-space)\n  <br />\n  <br />\n  **Projects**: [Arithmetic Formatter](https://www.freecodecamp.org/learn/scientific-computing-with-python/build-an-arithmetic-formatter-project/build-an-arithmetic-formatter-project), [Time Calculator](https://www.freecodecamp.org/learn/scientific-computing-with-python/build-a-time-calculator-project/build-a-time-calculator-project), [Budget App](https://www.freecodecamp.org/learn/scientific-computing-with-python/build-a-budget-app-project/build-a-budget-app-project), [Polygon Area Calculator](https://www.freecodecamp.org/learn/scientific-computing-with-python/build-a-polygon-area-calculator-project/build-a-polygon-area-calculator-project), [Probability Calculator](https://www.freecodecamp.org/learn/scientific-computing-with-python/build-a-probability-calculator-project/build-a-probability-calculator-project)\n\n#### 9. [Data Analysis with Python Certification](https://www.freecodecamp.org/learn/data-analysis-with-python/)\n\n- [Data Analysis with Python Course](https://www.freecodecamp.org/learn/data-analysis-with-python/#data-analysis-with-python-course)\n- [NumPy](https://www.freecodecamp.org/learn/data-analysis-with-python/#numpy)\n  <br />\n  <br />\n  **Projects**: [Mean-Variance-Standard Deviation Calculator](https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/mean-variance-standard-deviation-calculator), [Demographic Data Analyzer](https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/demographic-data-analyzer), [Medical Data Visualizer](https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/medical-data-visualizer), [Page View Time Series Visualizer](https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/page-view-time-series-visualizer), [Sea Level Predictor](https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/sea-level-predictor)\n\n#### 10. [Information Security Certification](https://www.freecodecamp.org/learn/information-security/)\n\n- [Information Security with HelmetJS](https://www.freecodecamp.org/learn/information-security/#information-security-with-helmetjs)\n- [Python for Penetration Testing](https://www.freecodecamp.org/learn/information-security/#python-for-penetration-testing)\n  <br />\n  <br />\n  **Projects**: [Stock Price Checker](https://www.freecodecamp.org/learn/information-security/information-security-projects/stock-price-checker), [Anonymous Message Board](https://www.freecodecamp.org/learn/information-security/information-security-projects/anonymous-message-board), [Port Scanner](https://www.freecodecamp.org/learn/information-security/information-security-projects/port-scanner), [SHA-1 Password Cracker](https://www.freecodecamp.org/learn/information-security/information-security-projects/sha-1-password-cracker), [Secure Real Time Multiplayer Game ](https://www.freecodecamp.org/learn/information-security/information-security-projects/secure-real-time-multiplayer-game)\n\n#### 11. [Machine Learning with Python Certification](https://www.freecodecamp.org/learn/machine-learning-with-python/)\n\n- [TensorFlow](https://www.freecodecamp.org/learn/machine-learning-with-python/#tensorflow)\n- [How Neural Networks Work](https://www.freecodecamp.org/learn/machine-learning-with-python/#how-neural-networks-work)\n  <br />\n  <br />\n  **Projects**: [Rock Paper Scissors](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors), [Cat and Dog Image Classifier](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/cat-and-dog-image-classifier), [Book Recommendation Engine using KNN](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/book-recommendation-engine-using-knn), [Linear Regression Health Costs Calculator](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/linear-regression-health-costs-calculator), [Neural Network SMS Text Classifier](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/neural-network-sms-text-classifier)\n\n#### 12. [College Algebra with Python](https://www.freecodecamp.org/learn/college-algebra-with-python/)\n\n- [Learn Ratios and Proportions](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-ratios-and-proportions)\n- [Learn How to Solve for X](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-how-to-solve-for-x)\n- [Learn Fractions and Decimals](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-fractions-and-decimals)\n- [Learn Functions and Graphing](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-functions-and-graphing)\n- [Learn Linear Functions](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-linear-functions)\n- [Learn Common Factors and Square Roots](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-common-factors-and-square-roots)\n- [Learn How to Graph Systems of Equations](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-how-to-graph-systems-of-equations)\n- [Learn How to Solve Systems of Equations](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-how-to-solve-systems-of-equations)\n- [Learn Applications of Linear Systems](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-applications-of-linear-systems)\n- [Learn Quadratic Equations](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-quadratic-equations)\n- [Learn Parent Graphs and Polynomials](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-parent-graphs-and-polynomials)\n- [Learn Business Applications of College Algebra](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-business-applications-of-college-algebra)\n- [Learn Simple and Compound Interest](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-simple-and-compound-interest)\n- [Learn Exponents and Logarithms](https://www.freecodecamp.org/learn/college-algebra-with-python/#learn-exponents-and-logarithms)\n- [College Algebra with Python: Conclusion](https://www.freecodecamp.org/learn/college-algebra-with-python/#college-algebra-with-python-conclusion)\n  <br />\n  <br />\n  **Projects**: [Multi-Function Calculator](https://www.freecodecamp.org/learn/college-algebra-with-python/#build-a-multi-function-calculator-project), [Graphing Calculator](https://www.freecodecamp.org/learn/college-algebra-with-python/#build-a-graphing-calculator-project), [Three Math Games](https://www.freecodecamp.org/learn/college-algebra-with-python/#build-three-math-games-project), [Financial Calculator](https://www.freecodecamp.org/learn/college-algebra-with-python/#build-a-financial-calculator-project), [Data Graph Explorer](https://www.freecodecamp.org/learn/college-algebra-with-python/#build-a-data-graph-explorer-project)\n\n#### Legacy Full Stack Development Certification\n\nOnce you have earned the Responsive Web Design, Algorithms and Data Structures, Front End Development Libraries, Data Visualization, Back End Development and APIs, and Legacy Information Security and Quality Assurance certifications, you'll be able to claim your freeCodeCamp.org Full Stack Development Certification. This distinction signifies that you've completed around 1,800 hours of coding with a wide range of web development tools.\n\n#### Legacy Certifications\n\nWe also have 4 legacy certifications dating back to our 2015 curriculum, which are still available. All of the required projects for these legacy certifications will remain available on freeCodeCamp.org.\n\n- Legacy Front End Development Certification\n- Legacy Data Visualization Certification\n- Legacy Back End Development Certification\n- Legacy Information Security and Quality Assurance Certification\n\n### Free professional certifications\n\n#### [(New) Foundational C# with Microsoft](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/)\n\n- [Write Your First Code Using C#](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#write-your-first-code-using-c-sharp)\n- [Create and Run Simple C# Console Applications](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#create-and-run-simple-c-sharp-console-applications)\n- [Add Logic to C# Console Applications](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#add-logic-to-c-sharp-console-applications)\n- [Work with Variable Data in C# Console Applications](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#work-with-variable-data-in-c-sharp-console-applications)\n- [Create Methods in C# Console Applications](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#create-methods-in-c-sharp-console-applications)\n- [Debug C# Console Applications](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/#debug-c-sharp-console-applications)\n  <br />\n  <br />\n  **Exam**: [Foundational C# with Microsoft Certification Exam](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/foundational-c-sharp-with-microsoft-certification-exam/foundational-c-sharp-with-microsoft-certification-exam)\n\n### The Learning Platform\n\nThis code is running live at [freeCodeCamp.org](https://www.freecodecamp.org).\n\nOur community also has:\n\n- A [forum](https://forum.freecodecamp.org) where you can usually get programming help or project feedback within hours.\n- A [YouTube channel](https://youtube.com/freecodecamp) with free courses on Python, SQL, Android, and a wide variety of other technologies.\n- A [technical publication](https://www.freecodecamp.org/news) with thousands of programming tutorials and articles about mathematics and computer science.\n- A [Discord server](https://discord.gg/Z7Fm39aNtZ) where you can hang out and talk with developers and people who are learning to code.\n\n> #### [Join the community here](https://www.freecodecamp.org/signin).\n\n### Reporting Bugs and Issues\n\nIf you think you've found a bug, first read the [how to report a bug](https://forum.freecodecamp.org/t/how-to-report-a-bug/19543) article and follow its instructions.\n\nIf you're confident it's a new bug and have confirmed that someone else is facing the same issue, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.\n\n### Reporting Security Issues and Responsible Disclosure\n\nWe appreciate responsible disclosure of vulnerabilities that might impact the integrity of our platforms and users.\n\n> #### [Read our security policy and follow these steps to report a vulnerability](https://contribute.freecodecamp.org/#/security).\n\n### Contributing\n\nThe freeCodeCamp.org community is possible thanks to thousands of kind volunteers like you. We welcome all contributions to the community and are excited to welcome you aboard.\n\n> #### [Please follow these steps to contribute](https://contribute.freecodecamp.org).\n\nRecent Contributions:\n\n![Alt](https://repobeats.axiom.co/api/embed/89be0a1a1c8f641c54f9234a7423e7755352c746.svg 'Repobeats analytics image')\n\n### License\n\nCopyright © 2025 freeCodeCamp.org\n\nThe content of this repository is bound by the following licenses:\n\n- The computer software is licensed under the [BSD-3-Clause](LICENSE.md) license.\n- The learning resources in the [`/curriculum`](/curriculum) directory including their subdirectories thereon are copyright © 2025 freeCodeCamp.org\n"
  },
  {
    "id": 21737465,
    "name": "awesome",
    "full_name": "sindresorhus/awesome",
    "description": "😎 Awesome lists about all kinds of interesting topics",
    "url": "https://github.com/sindresorhus/awesome",
    "clone_url": "https://github.com/sindresorhus/awesome.git",
    "star_count": 382424,
    "fork_count": 30559,
    "language": "No language available",
    "topics": [
      "awesome",
      "awesome-list",
      "unicorns",
      "lists",
      "resources"
    ],
    "last_commit_date": "2025-07-05T23:21:42+00:00",
    "created_at": "2014-07-11T13:42:37+00:00",
    "updated_at": "2025-07-16T06:26:52+00:00",
    "size": 1523,
    "default_branch": "main",
    "license": "Creative Commons Zero v1.0 Universal",
    "readme": "<div align=\"center\">\n\t<img width=\"500\" height=\"350\" src=\"media/logo.svg\" alt=\"Awesome\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<div>\n\t\t<sub>Check out my macOS app</sub>\n\t\t<br>\n\t\t<h2>\n\t\t\t<a href=\"https://sindresorhus.com/supercharge\">Supercharge</a>\n\t\t\t<br>\n\t\t\t<sup>Elevate your Mac experience</sup>\n\t\t</h2>\n\t</div>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<hr>\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\t<a href=\"https://github.com/sponsors/sindresorhus\">My open source work is supported by the community</a>\n\t\t\t</sup>\n\t\t</p>\n\t\t<sup>Special thanks to:</sup>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://nitric.io/?utm_campaign=github_repo&utm_medium=referral&utm_content=sindresorhus&utm_source=github\">\n\t\t\t<div>\n\t\t\t\t<img width=\"230\" src=\"https://sindresorhus.com/assets/thanks/nitric-logo.svg\" alt=\"nitric logo\">\n\t\t\t</div>\n\t\t\t<b>Effortless backends with infrastructure from code</b>\n\t\t\t<div>\n\t\t\t\t<sup>An open-source framework that supports any programming language, cloud provider, or deployment automation tool.</sup>\n\t\t\t</div>\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t</p>\n\t<hr>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n</div>\n<p align=\"center\">\n\t<a href=\"awesome.md\">What is an awesome list?</a>&nbsp;&nbsp;&nbsp;\n\t<a href=\"contributing.md\">Contribution guide</a>&nbsp;&nbsp;&nbsp;\n\t<a href=\"create-list.md\">Creating a list</a>&nbsp;&nbsp;&nbsp;\n\t<a href=\"https://twitter.com/awesome__re\">Twitter</a>&nbsp;&nbsp;&nbsp;\n</p>\n<br>\n<br>\n<p align=\"center\">\n\tJust type <a href=\"https://awesome.re\"><code>awesome.re</code></a> to go here. Check out my <a href=\"https://sindresorhus.com/apps\">apps</a> and follow me on <a href=\"https://twitter.com/sindresorhus\">Twitter</a>.\n</p>\n<br>\n<br>\n<br>\n\n## Contents\n\n- [Platforms](#platforms)\n- [Programming Languages](#programming-languages)\n- [Front-End Development](#front-end-development)\n- [Back-End Development](#back-end-development)\n- [Computer Science](#computer-science)\n- [Big Data](#big-data)\n- [Theory](#theory)\n- [Books](#books)\n- [Editors](#editors)\n- [Gaming](#gaming)\n- [Development Environment](#development-environment)\n- [Entertainment](#entertainment)\n- [Databases](#databases)\n- [Media](#media)\n- [Learn](#learn)\n- [Security](#security)\n- [Content Management Systems](#content-management-systems)\n- [Hardware](#hardware)\n- [Business](#business)\n- [Work](#work)\n- [Networking](#networking)\n- [Decentralized Systems](#decentralized-systems)\n- [Health and Social Science](#health-and-social-science)\n- [Events](#events)\n- [Testing](#testing)\n- [Miscellaneous](#miscellaneous)\n- [Related](#related)\n\n## Platforms\n\n- [Node.js](https://github.com/sindresorhus/awesome-nodejs#readme) - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine.\n\t- [Cross-Platform](https://github.com/bcoe/awesome-cross-platform-nodejs#readme) - Writing cross-platform code on Node.js.\n- [Frontend Development](https://github.com/dypsilon/frontend-dev-bookmarks#readme)\n- [iOS](https://github.com/vsouza/awesome-ios#readme) - Mobile operating system for Apple phones and tablets.\n- [Android](https://github.com/JStumpp/awesome-android#readme) - Mobile operating system developed by Google.\n- [IoT & Hybrid Apps](https://github.com/weblancaster/awesome-IoT-hybrid#readme)\n- [Electron](https://github.com/sindresorhus/awesome-electron#readme) - Cross-platform native desktop apps using JavaScript/HTML/CSS.\n- [Cordova](https://github.com/busterc/awesome-cordova#readme) - JavaScript API for hybrid apps.\n- [React Native](https://github.com/jondot/awesome-react-native#readme) - JavaScript framework for writing natively rendering mobile apps for iOS and Android.\n- [Xamarin](https://github.com/XamSome/awesome-xamarin#readme) - Mobile app development IDE, testing, and distribution.\n- [Linux](https://github.com/inputsh/awesome-linux#readme)\n\t- [Containers](https://github.com/Friz-zy/awesome-linux-containers#readme)\n\t- [eBPF](https://github.com/zoidbergwill/awesome-ebpf#readme) - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems.\n\t- [Arch-based Projects](https://github.com/PandaFoss/Awesome-Arch#readme) - Linux distributions and projects based on Arch Linux.\n\t- [AppImage](https://github.com/AppImage/awesome-appimage#readme) - Package apps in a single file that works on various mainstream Linux distributions.\n- macOS - Operating system for Apple's Mac computers.\n\t- [Screensavers](https://github.com/agarrharr/awesome-macos-screensavers#readme)\n\t- [Apps](https://github.com/jaywcjlove/awesome-mac#readme)\n\t- [Open Source Apps](https://github.com/serhii-londar/open-source-mac-os-apps#readme)\n- [watchOS](https://github.com/yenchenlin/awesome-watchos#readme) - Operating system for the Apple Watch.\n- [JVM](https://github.com/deephacks/awesome-jvm#readme)\n- [Salesforce](https://github.com/mailtoharshit/awesome-salesforce#readme)\n- [Amazon Web Services](https://github.com/donnemartin/awesome-aws#readme)\n- [Windows](https://github.com/0pandadev/awesome-windows#readme) - Consumer desktop operating system.\n\t- [PowerToys Run Plugins](https://github.com/hlaueriksson/awesome-powertoys-run-plugins#readme) - Community plugins for the Windows quick launcher.\n- [IPFS](https://github.com/ipfs/awesome-ipfs#readme) - P2P hypermedia protocol.\n- [Fuse](https://github.com/fuse-compound/awesome-fuse#readme) - Mobile development tools.\n- [Heroku](https://github.com/ianstormtaylor/awesome-heroku#readme) - Cloud platform as a service.\n- [Raspberry Pi](https://github.com/thibmaek/awesome-raspberry-pi#readme) - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more.\n- [Qt](https://github.com/JesseTG/awesome-qt#readme) - Cross-platform GUI app framework.\n- [WebExtensions](https://github.com/fregante/Awesome-WebExtensions#readme) - Cross-browser extension system.\n- [Smart TV](https://github.com/vitalets/awesome-smart-tv#readme) - Create apps for different TV platforms.\n- [GNOME](https://github.com/Kazhnuz/awesome-gnome#readme) - Simple and distraction-free desktop environment for Linux.\n- [KDE](https://github.com/francoism90/awesome-kde#readme) - A free software community dedicated to creating an open and user-friendly computing experience.\n- [.NET](https://github.com/quozd/awesome-dotnet#readme)\n\t- [Core](https://github.com/thangchung/awesome-dotnet-core#readme)\n\t- [Roslyn](https://github.com/ironcev/awesome-roslyn#readme) - Open-source compilers and code analysis APIs for C# and VB.NET languages.\n- [Amazon Alexa](https://github.com/miguelmota/awesome-amazon-alexa#readme) - Virtual home assistant.\n- [DigitalOcean](https://github.com/jonleibowitz/awesome-digitalocean#readme) - Cloud computing platform designed for developers.\n- [Flutter](https://github.com/Solido/awesome-flutter#readme) - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart.\n- [Home Assistant](https://github.com/frenck/awesome-home-assistant#readme) - Open source home automation that puts local control and privacy first.\n- [IBM Cloud](https://github.com/victorshinya/awesome-ibmcloud#readme) - Cloud platform for developers and companies.\n- [Firebase](https://github.com/jthegedus/awesome-firebase#readme) - App development platform built on Google Cloud.\n- [Robot Operating System 2.0](https://github.com/fkromer/awesome-ros2#readme) - Set of software libraries and tools that help you build robot apps.\n- [Adafruit IO](https://github.com/adafruit/awesome-adafruitio#readme) - Visualize and store data from any device.\n- [Cloudflare](https://github.com/irazasyed/awesome-cloudflare#readme) - CDN, DNS, DDoS protection, and security for your site.\n- [Actions on Google](https://github.com/ravirupareliya/awesome-actions-on-google#readme) - Developer platform for Google Assistant.\n- [ESP](https://github.com/agucova/awesome-esp#readme) - Low-cost microcontrollers with WiFi and broad IoT applications.\n- [Deno](https://github.com/denolib/awesome-deno#readme) - A secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.\n- [DOS](https://github.com/balintkissdev/awesome-dos#readme) - Operating system for x86-based personal computers that was popular during the 1980s and early 1990s.\n- [Nix](https://github.com/nix-community/awesome-nix#readme) - Package manager for Linux and other Unix systems that makes package management reliable and reproducible.\n- [Integration](https://github.com/stn1slv/awesome-integration#readme) - Linking together different IT systems (components) to functionally cooperate as a whole.\n- [Node-RED](https://github.com/naimo84/awesome-nodered#readme) - A programming tool for wiring together hardware devices, APIs, and online services.\n- [Low Code](https://github.com/zenitysec/awesome-low-code#readme) - Allowing business professionals to address their needs on their own with little to no coding skills.\n- [Capacitor](https://github.com/riderx/awesome-capacitor#readme) - Cross-platform open source runtime for building Web Native apps.\n- [ArcGIS Developer](https://github.com/Esri/awesome-arcgis-developer#readme) - Mapping and location analysis platform for developers.\n- [Bluetooth Low Energy](https://github.com/dotintent/awesome-ble#readme) - Low-power wireless communication protocol ideal for IoT, wearables, and other battery-powered applications.\n- [Uno Platform](https://github.com/MartinZikmund/awesome-uno-platform#readme) - Open-source .NET UI platform for building cross-platform apps.\n- [Google Cloud](https://github.com/GoogleCloudPlatform/awesome-google-cloud#readme) - Cloud computing services by Google.\n- [Firebase Genkit](https://github.com/xavidop/awesome-firebase-genkit#readme) - An open-source framework for building AI-powered apps and features.\n\n## Programming Languages\n\n- [JavaScript](https://github.com/sorrycc/awesome-javascript#readme)\n\t- [Promises](https://github.com/wbinnssmith/awesome-promises#readme)\n\t- [Standard Style](https://github.com/standard/awesome-standard#readme) - Style guide and linter.\n\t- [Must Watch Talks](https://github.com/bolshchikov/js-must-watch#readme)\n\t- [Tips](https://github.com/loverajoel/jstips#readme)\n\t- [Network Layer](https://github.com/Kikobeats/awesome-network-js#readme)\n\t- [Micro npm Packages](https://github.com/parro-it/awesome-micro-npm-packages#readme)\n\t- [Mad Science npm Packages](https://github.com/feross/awesome-mad-science#readme) - Impossible sounding projects that exist.\n\t- [Maintenance Modules](https://github.com/maxogden/maintenance-modules#readme) - For npm packages.\n\t- [npm](https://github.com/sindresorhus/awesome-npm#readme) - Package manager.\n\t- [AVA](https://github.com/avajs/awesome-ava#readme) - Test runner.\n\t- [ESLint](https://github.com/dustinspecker/awesome-eslint#readme) - Linter.\n\t- [Functional Programming](https://github.com/stoeffel/awesome-fp-js#readme)\n\t- [Observables](https://github.com/sindresorhus/awesome-observables#readme)\n\t- [npm scripts](https://github.com/RyanZim/awesome-npm-scripts#readme) - Task runner.\n\t- [30 Seconds of Code](https://github.com/30-seconds/30-seconds-of-code#readme) - Code snippets you can understand in 30 seconds.\n\t- [Ponyfills](https://github.com/Richienb/awesome-ponyfills#readme) - Like polyfills but without overriding native APIs.\n- [Swift](https://github.com/matteocrippa/awesome-swift#readme) - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast.\n\t- [Education](https://github.com/hsavit1/Awesome-Swift-Education#readme)\n\t- [Playgrounds](https://github.com/uraimo/Awesome-Swift-Playgrounds#readme)\n- [Python](https://github.com/vinta/awesome-python#readme) - General-purpose programming language designed for readability.\n\t- [Asyncio](https://github.com/timofurrer/awesome-asyncio#readme) - Asynchronous I/O in Python 3.\n\t- [Scientific Audio](https://github.com/faroit/awesome-python-scientific-audio#readme) - Scientific research in audio/music.\n\t- [CircuitPython](https://github.com/adafruit/awesome-circuitpython#readme) - A version of Python for microcontrollers.\n\t- [Data Science](https://github.com/krzjoa/awesome-python-data-science#readme) - Data analysis and machine learning.\n\t- [Typing](https://github.com/typeddjango/awesome-python-typing#readme) - Optional static typing for Python.\n\t- [MicroPython](https://github.com/mcauser/awesome-micropython#readme) - A lean and efficient implementation of Python 3 for microcontrollers.\n- [Rust](https://github.com/rust-unofficial/awesome-rust#readme)\n \t- [Pest](https://github.com/pest-parser/awesome-pest#readme) - Parser generator.\n- [Haskell](https://github.com/krispo/awesome-haskell#readme)\n- [PureScript](https://github.com/passy/awesome-purescript#readme)\n- [Go](https://github.com/avelino/awesome-go#readme)\n- [Scala](https://github.com/lauris/awesome-scala#readme)\n\t- [Scala Native](https://github.com/tindzk/awesome-scala-native#readme) - Optimizing ahead-of-time compiler for Scala based on LLVM.\n- [Ruby](https://github.com/markets/awesome-ruby#readme)\n- [Clojure](https://github.com/razum2um/awesome-clojure#readme)\n- [ClojureScript](https://github.com/hantuzun/awesome-clojurescript#readme)\n- [Elixir](https://github.com/h4cc/awesome-elixir#readme)\n- [Elm](https://github.com/sporto/awesome-elm#readme)\n- [Erlang](https://github.com/drobakowski/awesome-erlang#readme)\n- [Julia](https://github.com/svaksha/Julia.jl#readme) - High-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science.\n- [Lua](https://github.com/LewisJEllis/awesome-lua#readme)\n- [C](https://github.com/inputsh/awesome-c#readme)\n- [C/C++](https://github.com/fffaraz/awesome-cpp#readme) - General-purpose language with a bias toward system programming and embedded, resource-constrained software.\n- [R](https://github.com/qinwf/awesome-R#readme) - Functional programming language and environment for statistical computing and graphics.\n\t- [Learning](https://github.com/iamericfletcher/awesome-r-learning-resources#readme)\n- [D](https://github.com/dlang-community/awesome-d#readme)\n- [Common Lisp](https://github.com/CodyReichert/awesome-cl#readme) - Powerful dynamic multiparadigm language that facilitates iterative and interactive development.\n\t- [Learning](https://github.com/GustavBertram/awesome-common-lisp-learning#readme)\n- [Perl](https://github.com/hachiojipm/awesome-perl#readme)\n- [Groovy](https://github.com/kdabir/awesome-groovy#readme)\n- [Dart](https://github.com/yissachar/awesome-dart#readme)\n- [Java](https://github.com/akullpp/awesome-java#readme) - Popular secure object-oriented language designed for flexibility to \"write once, run anywhere\".\n\t- [RxJava](https://github.com/eleventigers/awesome-rxjava#readme)\n \t- [J2ME](https://github.com/hstsethi/awesome-j2me#readme) - Java specification designed for old keypad phones and PDAs.\n- [Kotlin](https://github.com/KotlinBy/awesome-kotlin#readme)\n- [OCaml](https://github.com/ocaml-community/awesome-ocaml#readme)\n- [ColdFusion](https://github.com/seancoyne/awesome-coldfusion#readme)\n- [Fortran](https://github.com/rabbiabram/awesome-fortran#readme)\n- [PHP](https://github.com/ziadoz/awesome-php#readme) - Server-side scripting language.\n\t- [Composer](https://github.com/jakoch/awesome-composer#readme) - Package manager.\n- [Pascal](https://github.com/Fr0sT-Brutal/awesome-pascal#readme)\n- [AutoHotkey](https://github.com/ahkscript/awesome-AutoHotkey#readme)\n- [AutoIt](https://github.com/J2TeaM/awesome-AutoIt#readme)\n- [Crystal](https://github.com/veelenga/awesome-crystal#readme)\n- [Frege](https://github.com/sfischer13/awesome-frege#readme) - Haskell for the JVM.\n- [CMake](https://github.com/onqtam/awesome-cmake#readme) - Build, test, and package software.\n- [ActionScript 3](https://github.com/robinrodricks/awesome-actionscript3#readme) - Object-oriented language targeting Adobe AIR.\n- [Eta](https://github.com/sfischer13/awesome-eta#readme) - Functional programming language for the JVM.\n- [Idris](https://github.com/joaomilho/awesome-idris#readme) - General purpose pure functional programming language with dependent types influenced by Haskell and ML.\n- [Ada/SPARK](https://github.com/ohenley/awesome-ada#readme) - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential.\n- [Q#](https://github.com/ebraminio/awesome-qsharp#readme) - Domain-specific programming language used for expressing quantum algorithms.\n- [Imba](https://github.com/koolamusic/awesome-imba#readme) - Programming language inspired by Ruby and Python and compiles to performant JavaScript.\n- [Vala](https://github.com/desiderantes/awesome-vala#readme) - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code.\n- [Coq](https://github.com/coq-community/awesome-coq#readme) - Formal language and environment for programming and specification which facilitates interactive development of machine-checked proofs.\n- [V](https://github.com/vlang/awesome-v#readme) - Simple, fast, safe, compiled language for developing maintainable software.\n- [Zig](https://github.com/catdevnull/awesome-zig#readme) - General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.\n- [Move](https://github.com/MystenLabs/awesome-move#readme) - Domain-specific programming language for writing safe smart contracts.\n- [Esolangs](https://github.com/angrykoala/awesome-esolangs#readme) - Programming languages designed for experimentation or as jokes rather than actual use.\n- [VBA](https://github.com/sancarn/awesome-vba#readme) - An event-driven version of Visual Basic 6.0 built into most Microsoft Office apps for automation and scripting.\n\n<br>\n<hr>\n<br>\n<br>\n<a href=\"https://vshymanskyy.github.io/StandWithUkraine\">\n\t<img src=\"https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg\">\n</a>\n<br>\n<br>\n<hr>\n<br>\n\n## Front-End Development\n\n- [ES6 Tools](https://github.com/addyosmani/es6-tools#readme)\n- [Web Performance Optimization](https://github.com/davidsonfellipe/awesome-wpo#readme)\n- [Web Tools](https://github.com/lvwzhen/tools#readme)\n- [CSS](https://github.com/awesome-css-group/awesome-css#readme) - Style sheet language that specifies how HTML elements are displayed on screen.\n\t- [Critical-Path Tools](https://github.com/addyosmani/critical-path-css-tools#readme)\n\t- [Scalability](https://github.com/davidtheclark/scalable-css-reading-list#readme)\n\t- [Must-Watch Talks](https://github.com/AllThingsSmitty/must-watch-css#readme)\n\t- [Protips](https://github.com/AllThingsSmitty/css-protips#readme)\n\t- [Frameworks](https://github.com/troxler/awesome-css-frameworks#readme)\n- [React](https://github.com/enaqx/awesome-react#readme) - JavaScript library for building user interfaces.\n\t- [Relay](https://github.com/expede/awesome-relay#readme) - Framework for building data-driven React apps.\n\t- [React Hooks](https://github.com/glauberfc/awesome-react-hooks#readme) - Lets you use state and other React features without writing a class.\n- [Web Components](https://github.com/web-padawan/awesome-web-components#readme)\n- [Polymer](https://github.com/Granze/awesome-polymer#readme) - JavaScript library to develop Web Components.\n- [Angular](https://github.com/PatrickJS/awesome-angular#readme) - App framework.\n- [Backbone](https://github.com/sadcitizen/awesome-backbone#readme) - App framework.\n- [HTML5](https://github.com/diegocard/awesome-html5#readme) - Markup language used for websites & web apps.\n- [SVG](https://github.com/willianjusten/awesome-svg#readme) - XML-based vector image format.\n- [Canvas](https://github.com/raphamorim/awesome-canvas#readme)\n- [KnockoutJS](https://github.com/dnbard/awesome-knockout#readme) - JavaScript library.\n- [Dojo Toolkit](https://github.com/petk/awesome-dojo#readme) - JavaScript toolkit.\n- [Inspiration](https://github.com/NoahBuscher/Inspire#readme)\n- [Ember](https://github.com/ember-community-russia/awesome-ember#readme) - App framework.\n- [Android UI](https://github.com/wasabeef/awesome-android-ui#readme)\n- [iOS UI](https://github.com/cjwirth/awesome-ios-ui#readme)\n- [Meteor](https://github.com/Urigo/awesome-meteor#readme)\n- [BEM](https://github.com/sturobson/BEM-resources#readme)\n- [Flexbox](https://github.com/afonsopacifer/awesome-flexbox#readme)\n- [Web Typography](https://github.com/deanhume/typography#readme)\n- [Web Accessibility](https://github.com/brunopulis/awesome-a11y#readme)\n- [Material Design](https://github.com/sachin1092/awesome-material#readme)\n- [D3](https://github.com/wbkd/awesome-d3#readme) - Library for producing dynamic, interactive data visualizations.\n- [Emails](https://github.com/jonathandion/awesome-emails#readme)\n- [jQuery](https://github.com/petk/awesome-jquery#readme) - Easy to use JavaScript library for DOM manipulation.\n\t- [Tips](https://github.com/AllThingsSmitty/jquery-tips-everyone-should-know#readme)\n- [Web Audio](https://github.com/notthetup/awesome-webaudio#readme)\n- [Offline-First](https://github.com/pazguille/offline-first#readme)\n- [Static Website Services](https://github.com/agarrharr/awesome-static-website-services#readme)\n- [Cycle.js](https://github.com/cyclejs-community/awesome-cyclejs#readme) - Functional and reactive JavaScript framework.\n- [Text Editing](https://github.com/dok/awesome-text-editing#readme)\n- [Motion UI Design](https://github.com/fliptheweb/motion-ui-design#readme)\n- [Vue.js](https://github.com/vuejs/awesome-vue#readme) - App framework.\n- [Marionette.js](https://github.com/sadcitizen/awesome-marionette#readme) - App framework.\n- [Aurelia](https://github.com/aurelia-contrib/awesome-aurelia#readme) - App framework.\n- [Charting](https://github.com/zingchart/awesome-charting#readme)\n- [Ionic Framework](https://github.com/candelibas/awesome-ionic#readme)\n- [Chrome DevTools](https://github.com/ChromeDevTools/awesome-chrome-devtools#readme)\n- [PostCSS](https://github.com/jdrgomes/awesome-postcss#readme) - CSS tool.\n- [Draft.js](https://github.com/nikgraf/awesome-draft-js#readme) - Rich text editor framework for React.\n- [Service Workers](https://github.com/TalAter/awesome-service-workers#readme)\n- [Progressive Web Apps](https://github.com/TalAter/awesome-progressive-web-apps#readme)\n- [choo](https://github.com/choojs/awesome-choo#readme) - App framework.\n- [Redux](https://github.com/brillout/awesome-redux#readme) - State container for JavaScript apps.\n- [Browserify](https://github.com/browserify/awesome-browserify#readme) - Module bundler.\n- [Sass](https://github.com/Famolus/awesome-sass#readme) - CSS preprocessor.\n- [Ant Design](https://github.com/websemantics/awesome-ant-design#readme) - Enterprise-class UI design language.\n- [Less](https://github.com/LucasBassetti/awesome-less#readme) - CSS preprocessor.\n- [WebGL](https://github.com/sjfricke/awesome-webgl#readme) - JavaScript API for rendering 3D graphics.\n- [Preact](https://github.com/preactjs/awesome-preact#readme) - App framework.\n- [Progressive Enhancement](https://github.com/jbmoelker/progressive-enhancement-resources#readme)\n- [Next.js](https://github.com/unicodeveloper/awesome-nextjs#readme) - Framework for server-rendered React apps.\n- [lit](https://github.com/web-padawan/awesome-lit#readme) - Library for building web components with a declarative template system.\n- [JAMstack](https://github.com/automata/awesome-jamstack#readme) - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup.\n- [WordPress-Gatsby](https://github.com/henrikwirth/awesome-wordpress-gatsby#readme) - Web development technology stack with WordPress as a back end and Gatsby as a front end.\n- [Mobile Web Development](https://github.com/myshov/awesome-mobile-web-development#readme) - Creating a great mobile web experience.\n- [Storybook](https://github.com/lauthieb/awesome-storybook#readme) - Development environment for UI components.\n- [Blazor](https://github.com/AdrienTorris/awesome-blazor#readme) - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly.\n- [PageSpeed Metrics](https://github.com/csabapalfi/awesome-pagespeed-metrics#readme) - Metrics to help understand page speed and user experience.\n- [Tailwind CSS](https://github.com/aniftyco/awesome-tailwindcss#readme) - Utility-first CSS framework for rapid UI development.\n- [Seed](https://github.com/seed-rs/awesome-seed-rs#readme) - Rust framework for creating web apps running in WebAssembly.\n- [Web Performance Budget](https://github.com/pajaydev/awesome-web-performance-budget#readme) - Techniques to ensure certain performance metrics for a website.\n- [Web Animation](https://github.com/sergey-pimenov/awesome-web-animation#readme) - Animations in the browser with JavaScript, CSS, SVG, etc.\n- [Yew](https://github.com/jetli/awesome-yew#readme) - Rust framework inspired by Elm and React for creating multi-threaded frontend web apps with WebAssembly.\n- [Material-UI](https://github.com/nadunindunil/awesome-material-ui#readme) - Material Design React components for faster and easier web development.\n- [Building Blocks for Web Apps](https://github.com/componently-com/awesome-building-blocks-for-web-apps#readme) - Standalone features to be integrated into web apps.\n- [Svelte](https://github.com/TheComputerM/awesome-svelte#readme) - App framework.\n- [Design systems](https://github.com/klaufel/awesome-design-systems#readme) - Collection of reusable components, guided by rules that ensure consistency and speed.\n- [Inertia.js](https://github.com/innocenzi/awesome-inertiajs#readme) - Make single-page apps without building an API.\n- [MDBootstrap](https://github.com/mdbootstrap/awesome-mdbootstrap#readme) - Templates, layouts, components, and widgets to rapidly build websites.\n- [Master CSS](https://github.com/master-co/awesome-master-css#readme) - A virtual CSS language with enhanced syntax.\n- [Hydrogen](https://github.com/shopify/awesome-hydrogen#readme) - Edge-first framework for building Shopify storefronts with React.\n- [Tiny JS](https://github.com/thoughtspile/awesome-tiny-js#readme) - Frontend libraries that fit into 2 kB with dependencies.\n- [Frontend GIS](https://github.com/joewdavies/awesome-frontend-gis#readme) - Geographic Information Systems (GIS) for web browsers.\n- [WebGPU](https://github.com/mikbry/awesome-webgpu#readme) - JavaScript API for rendering and compute on GPUs.\n- [WebAssembly](https://github.com/idematos/awesome-webassembly#readme) - A portable binary format for running code efficiently across platforms.\n\n## Back-End Development\n\n- [Flask](https://github.com/mjhea0/awesome-flask#readme) - Python framework.\n- [Docker](https://github.com/veggiemonk/awesome-docker#readme)\n- [Vagrant](https://github.com/iJackUA/awesome-vagrant#readme) - Automation virtual machine environment.\n- [Pyramid](https://github.com/uralbash/awesome-pyramid#readme) - Python framework.\n- [Play1 Framework](https://github.com/PerfectCarl/awesome-play1#readme)\n- [CakePHP](https://github.com/friendsofcake/awesome-cakephp#readme) - PHP framework.\n- [Symfony](https://github.com/sitepoint-editors/awesome-symfony#readme) - PHP framework.\n\t- [Education](https://github.com/pehapkari/awesome-symfony-education#readme)\n- [Laravel](https://github.com/chiraggude/awesome-laravel#readme) - PHP framework.\n\t- [Education](https://github.com/fukuball/Awesome-Laravel-Education#readme)\n\t- [TALL Stack](https://github.com/livewire/awesome-tall-stack#readme) - Full-stack development solution featuring libraries built by the Laravel community.\n- [Rails](https://github.com/gramantin/awesome-rails#readme) - Web app framework for Ruby.\n\t- [Gems](https://github.com/hothero/awesome-rails-gem#readme) - Packages.\n- [Phalcon](https://github.com/phalcon/awesome-phalcon#readme) - PHP framework.\n- [Useful `.htaccess` Snippets](https://github.com/phanan/htaccess#readme)\n- [nginx](https://github.com/fcambus/nginx-resources#readme) - Web server.\n- [Dropwizard](https://github.com/stve/awesome-dropwizard#readme) - Java framework.\n- [Kubernetes](https://github.com/ramitsurana/awesome-kubernetes#readme) - Open-source platform that automates Linux container operations.\n- [Lumen](https://github.com/unicodeveloper/awesome-lumen#readme) - PHP micro-framework.\n- [Serverless Framework](https://github.com/pmuens/awesome-serverless#readme) - Serverless computing and serverless architectures.\n- [Apache Wicket](https://github.com/PhantomYdn/awesome-wicket#readme) - Java web app framework.\n- [Vert.x](https://github.com/vert-x3/vertx-awesome#readme) - Toolkit for building reactive apps on the JVM.\n- [Terraform](https://github.com/shuaibiyy/awesome-terraform#readme) - Tool for building, changing, and versioning infrastructure.\n- [Vapor](https://github.com/vapor-community/awesome-vapor#readme) - Server-side development in Swift.\n- [Dash](https://github.com/ucg8j/awesome-dash#readme) - Python web app framework.\n- [FastAPI](https://github.com/mjhea0/awesome-fastapi#readme) - Python web app framework.\n- [CDK](https://github.com/kolomied/awesome-cdk#readme) - Open-source software development framework for defining cloud infrastructure in code.\n- [IAM](https://github.com/kdeldycke/awesome-iam#readme) - User accounts, authentication and authorization.\n- [Slim](https://github.com/nekofar/awesome-slim#readme) - PHP framework.\n- [Fiber](https://github.com/gofiber/awesome-fiber#readme) - Web framework built on top of Fasthttp, the fastest HTTP engine for Go.\n- [Kustomize](https://github.com/DevOpsHiveHQ/awesome-kustomize#readme) - Kubernetes native declarative configuration management tool.\n- [OpenTofu](https://github.com/virtualroot/awesome-opentofu#readme) - Open-source infrastructure as code tool.\n- [Reflex](https://github.com/reflex-dev/awesome-reflex#readme) - Python web framework for building both your frontend and backend with no JavaScript.\n\n## Computer Science\n\n- [University Courses](https://github.com/prakhar1989/awesome-courses#readme)\n- [Data Science](https://github.com/academic/awesome-datascience#readme)\n\t- [Tutorials](https://github.com/siboehm/awesome-learn-datascience#readme)\n- [Machine Learning](https://github.com/josephmisiti/awesome-machine-learning#readme)\n\t- [Tutorials](https://github.com/ujjwalkarn/Machine-Learning-Tutorials#readme)\n\t- [ML with Ruby](https://github.com/arbox/machine-learning-with-ruby#readme) - Learning, implementing, and applying Machine Learning using Ruby.\n\t- [Core ML Models](https://github.com/likedan/Awesome-CoreML-Models#readme) - Models for Apple's machine learning framework.\n\t- [H2O](https://github.com/h2oai/awesome-h2o#readme) - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala.\n\t- [Software Engineering for Machine Learning](https://github.com/SE-ML/awesome-seml#readme) - From experiment to production-level machine learning.\n\t- [AI in Finance](https://github.com/georgezouq/awesome-ai-in-finance#readme) - Solving problems in finance with machine learning.\n\t- [JAX](https://github.com/n2cholas/awesome-jax#readme) - Automatic differentiation and XLA compilation brought together for high-performance machine learning research.\n\t- [XAI](https://github.com/altamiracorp/awesome-xai#readme) - Providing insight, explanations, and interpretability to machine learning methods.\n- [Speech and Natural Language Processing](https://github.com/edobashira/speech-language-processing#readme)\n\t- [Spanish](https://github.com/dav009/awesome-spanish-nlp#readme)\n\t- [NLP with Ruby](https://github.com/arbox/nlp-with-ruby#readme)\n\t- [Question Answering](https://github.com/seriousran/awesome-qa#readme) - The science of asking and answering in natural language with a machine.\n\t- [Natural Language Generation](https://github.com/accelerated-text/awesome-nlg#readme) - Generation of text used in data-to-text, conversational agents, and narrative generation applications.\n- [Linguistics](https://github.com/theimpossibleastronaut/awesome-linguistics#readme)\n- [Cryptography](https://github.com/sobolevn/awesome-cryptography#readme)\n\t- [Papers](https://github.com/pFarb/awesome-crypto-papers#readme) - Theory basics for using cryptography by non-cryptographers.\n- [Computer Vision](https://github.com/jbhuang0604/awesome-computer-vision#readme)\n- [Deep Learning](https://github.com/ChristosChristofidis/awesome-deep-learning#readme) - Neural networks.\n\t- [TensorFlow](https://github.com/jtoy/awesome-tensorflow#readme) - Library for machine intelligence.\n\t- [TensorFlow.js](https://github.com/aaronhma/awesome-tensorflow-js#readme) - WebGL-accelerated machine learning JavaScript library for training and deploying models.\n\t- [TensorFlow Lite](https://github.com/margaretmz/awesome-tensorflow-lite#readme) - Framework that optimizes TensorFlow models for on-device machine learning.\n\t- [Papers](https://github.com/terryum/awesome-deep-learning-papers#readme) - The most cited deep learning papers.\n\t- [Education](https://github.com/guillaume-chevalier/awesome-deep-learning-resources#readme)\n- [Deep Vision](https://github.com/kjw0612/awesome-deep-vision#readme)\n- [Open Source Society University](https://github.com/ossu/computer-science#readme)\n- [Functional Programming](https://github.com/lucasviola/awesome-functional-programming#readme)\n- [Empirical Software Engineering](https://github.com/dspinellis/awesome-msr#readme) - Evidence-based research on software systems.\n- [Static Analysis & Code Quality](https://github.com/analysis-tools-dev/static-analysis#readme)\n- [Information Retrieval](https://github.com/harpribot/awesome-information-retrieval#readme) - Learn to develop your own search engine.\n- [Quantum Computing](https://github.com/desireevl/awesome-quantum-computing#readme) - Computing that utilizes quantum mechanics and qubits on quantum computers.\n- [Theoretical Computer Science](https://github.com/mostafatouny/awesome-theoretical-computer-science#readme) - The interplay of computer science and pure mathematics, distinguished by its emphasis on mathematical rigour and technique.\n- [Conversational AI](https://github.com/jyguyomarch/awesome-conversational-ai#readme) - Build awesome chatbots and digital assistants.\n- [Generative AI](https://github.com/steven2358/awesome-generative-ai#readme) - Automatically generates a wide range of unique content in text, image, and audio format.\n\n## Big Data\n\n- [Big Data](https://github.com/0xnr/awesome-bigdata#readme)\n- [Public Datasets](https://github.com/awesomedata/awesome-public-datasets#readme)\n- [Hadoop](https://github.com/youngwookim/awesome-hadoop#readme) - Framework for distributed storage and processing of very large data sets.\n- [Data Engineering](https://github.com/igorbarinov/awesome-data-engineering#readme)\n- [Streaming](https://github.com/manuzhang/awesome-streaming#readme)\n- [Apache Spark](https://github.com/awesome-spark/awesome-spark#readme) - Unified engine for large-scale data processing.\n- [Qlik](https://github.com/ambster-public/awesome-qlik#readme) - Business intelligence platform for data visualization, analytics, and reporting apps.\n- [Splunk](https://github.com/sduff/awesome-splunk#readme) - Platform for searching, monitoring, and analyzing structured and unstructured machine-generated big data in real time.\n- [Network Analysis](https://github.com/briatte/awesome-network-analysis#readme)\n\n## Theory\n\n- [Papers We Love](https://github.com/papers-we-love/papers-we-love#readme)\n- [Talks](https://github.com/JanVanRyswyck/awesome-talks#readme)\n- [Algorithms](https://github.com/tayllan/awesome-algorithms#readme)\n\t- [Education](https://github.com/gaerae/awesome-algorithms-education#readme) - Learning and practicing.\n- [Algorithm Visualizations](https://github.com/enjalot/algovis#readme)\n- [Artificial Intelligence](https://github.com/owainlewis/awesome-artificial-intelligence#readme)\n- [Search Engine Optimization](https://github.com/marcobiedermann/search-engine-optimization#readme)\n- [Competitive Programming](https://github.com/lnishan/awesome-competitive-programming#readme)\n- [Math](https://github.com/rossant/awesome-math#readme)\n- [Recursion Schemes](https://github.com/passy/awesome-recursion-schemes#readme) - Traversing nested data structures.\n- [Audit Algorithms](https://github.com/erwanlemerrer/awesome-audit-algorithms#readme) - Algorithmic audits of algorithms.\n- [AGI & CoCoSci](https://github.com/YuzheSHI/awesome-agi-cocosci#readme) - The reciprocation of Artificial General Intelligence (AGI) and Computational Cognitive Sciences (CoCoSci).\n- [Complex Systems](https://github.com/sellisd/awesome-complexity#readme) - The scientific field studying systems with multiple interacting parts and emergent properties.\n- [VLM Architectures](https://github.com/gokayfem/awesome-vlm-architectures#readme) - Vision Language Model architectures.\n\n## Books\n\n- [Free Programming Books](https://github.com/EbookFoundation/free-programming-books#readme)\n- [Go Books](https://github.com/dariubs/GoBooks#readme)\n- [R Books](https://github.com/RomanTsegelskyi/rbooks#readme)\n- [Mind Expanding Books](https://github.com/hackerkid/Mind-Expanding-Books#readme)\n- [Book Authoring](https://github.com/TalAter/awesome-book-authoring#readme)\n- [Elixir Books](https://github.com/sger/ElixirBooks#readme)\n\n## Editors\n\n- [Sublime Text](https://github.com/dreikanter/sublime-bookmarks#readme)\n- [Vim](https://github.com/mhinz/vim-galore#readme)\n- [Neovim](https://github.com/rockerBOO/awesome-neovim#readme) - Vim-fork focused on extensibility and usability.\n- [Emacs](https://github.com/emacs-tw/awesome-emacs#readme)\n- [Atom](https://github.com/mehcode/awesome-atom#readme) - Open-source and hackable text editor.\n- [Visual Studio Code](https://github.com/viatsko/awesome-vscode#readme) - Cross-platform open-source text editor.\n\n## Gaming\n\n- [Game Development](https://github.com/ellisonleao/magictools#readme)\n- [Game Talks](https://github.com/hzoo/awesome-gametalks#readme)\n- [Godot](https://github.com/godotengine/awesome-godot#readme) - Game engine.\n- [Open Source Games](https://github.com/michelpereira/awesome-open-source-games#readme)\n- [Unity](https://github.com/RyanNielson/awesome-unity#readme) - Game engine.\n- [Chess](https://github.com/hkirat/awesome-chess#readme)\n- [LÖVE](https://github.com/love2d-community/awesome-love2d#readme) - Game engine.\n- [PICO-8](https://github.com/pico-8/awesome-PICO-8#readme) - Fantasy console.\n- [Game Boy Development](https://github.com/gbdev/awesome-gbdev#readme)\n- [Construct 2](https://github.com/ConstructCommunity/awesome-construct#readme) - Game engine.\n- [Gideros](https://github.com/stetso/awesome-gideros#readme) - Game engine.\n- [Minecraft](https://github.com/bs-community/awesome-minecraft#readme) - Sandbox video game.\n- [ComputerCraft](https://github.com/tomodachi94/awesome-computercraft#readme) - Minecraft mod that adds programmable computers.\n- [Game Datasets](https://github.com/leomaurodesenv/game-datasets#readme) - Materials and datasets for Artificial Intelligence in games.\n- [Haxe Game Development](https://github.com/Dvergar/awesome-haxe-gamedev#readme) - A high-level strongly typed programming language used to produce cross-platform native code.\n- [libGDX](https://github.com/rafaskb/awesome-libgdx#readme) - Java game framework.\n- [PlayCanvas](https://github.com/playcanvas/awesome-playcanvas#readme) - Game engine.\n- [Game Remakes](https://github.com/radek-sprta/awesome-game-remakes#readme) - Actively maintained open-source game remakes.\n- [Flame](https://github.com/flame-engine/awesome-flame#readme) - Game engine for Flutter.\n- [Discord Communities](https://github.com/mhxion/awesome-discord-communities#readme) - Chat with friends and communities.\n- [CHIP-8](https://github.com/tobiasvl/awesome-chip-8#readme) - Virtual computer game machine from the 70s.\n- [Games of Coding](https://github.com/michelpereira/awesome-games-of-coding#readme) - Learn a programming language by making games.\n- [Esports](https://github.com/strift/awesome-esports#readme) - Video games played as a sport.\n- [Learn Gamedev](https://github.com/notpresident35/awesome-learn-gamedev#readme) - The craft of video game creation.\n- [Game Engine Development](https://github.com/stevinz/awesome-game-engine-dev#readme) - Building software to speed up game creation.\n- [GameMaker](https://github.com/bytecauldron/awesome-gamemaker#readme) - Game engine.\n- [Game Production](https://github.com/vhladiienko/awesome-game-production#readme) - Leading the process of designing, developing, testing and distributing a video game from concept to release.\n- [Babylon.js](https://github.com/Symbitic/awesome-babylonjs#readme) - Game engine for cross-platform web and native game development.\n\n## Development Environment\n\n- [Quick Look Plugins](https://github.com/sindresorhus/quick-look-plugins#readme) - For macOS.\n- [Dev Env](https://github.com/jondot/awesome-devenv#readme)\n- [Dotfiles](https://github.com/webpro/awesome-dotfiles#readme)\n- [Shell](https://github.com/alebcay/awesome-shell#readme)\n- [Fish](https://github.com/jorgebucaran/awsm.fish#readme) - User-friendly shell.\n- [Command-Line Apps](https://github.com/agarrharr/awesome-cli-apps#readme)\n- [ZSH Plugins](https://github.com/unixorn/awesome-zsh-plugins#readme)\n- [GitHub](https://github.com/phillipadsmith/awesome-github#readme) - Hosting service for Git repositories.\n\t- [Browser Extensions](https://github.com/stefanbuck/awesome-browser-extensions-for-github#readme)\n\t- [Cheat Sheet](https://github.com/tiimgreen/github-cheat-sheet#readme)\n\t- [Pinned Gists](https://github.com/matchai/awesome-pinned-gists#readme) - Dynamic pinned gists for your GitHub profile.\n- [Git Cheat Sheet & Git Flow](https://github.com/arslanbilal/git-cheat-sheet#readme)\n- [Git Tips](https://github.com/git-tips/tips#readme)\n- [Git Add-ons](https://github.com/stevemao/awesome-git-addons#readme) - Enhance the `git` CLI.\n- [Git Hooks](https://github.com/compscilauren/awesome-git-hooks#readme) - Scripts for automating tasks during `git` workflows.\n- [SSH](https://github.com/moul/awesome-ssh#readme)\n- [FOSS for Developers](https://github.com/tvvocold/FOSS-for-Dev#readme)\n- [Hyper](https://github.com/bnb/awesome-hyper#readme) - Cross-platform terminal app built on web technologies.\n- [PowerShell](https://github.com/janikvonrotz/awesome-powershell#readme) - Cross-platform object-oriented shell.\n- [Alfred Workflows](https://github.com/alfred-workflows/awesome-alfred-workflows#readme) - Productivity app for macOS.\n- [Terminals Are Sexy](https://github.com/k4m4/terminals-are-sexy#readme)\n- [GitHub Actions](https://github.com/sdras/awesome-actions#readme) - Create tasks to automate your workflow and share them with others on GitHub.\n- [WezTerm](https://github.com/michaelbrusegard/awesome-wezterm#readme) - Powerful cross-platform terminal emulator.\n\n## Entertainment\n\n- [Science Fiction](https://github.com/sindresorhus/awesome-scifi#readme) - Scifi.\n- [Fantasy](https://github.com/RichardLitt/awesome-fantasy#readme)\n- [Podcasts](https://github.com/ayr-ton/awesome-geek-podcasts#readme)\n- [Email Newsletters](https://github.com/zudochkin/awesome-newsletters#readme)\n- [IT Quotes](https://github.com/victorlaerte/awesome-it-quotes#readme)\n\n## Databases\n\n- [Database](https://github.com/numetriclabz/awesome-db#readme)\n- [MySQL](https://github.com/shlomi-noach/awesome-mysql#readme)\n- [SQLAlchemy](https://github.com/dahlia/awesome-sqlalchemy#readme)\n- [InfluxDB](https://github.com/mark-rushakoff/awesome-influxdb#readme)\n- [Neo4j](https://github.com/neueda/awesome-neo4j#readme)\n- [MongoDB](https://github.com/ramnes/awesome-mongodb#readme) - NoSQL database.\n- [RethinkDB](https://github.com/d3viant0ne/awesome-rethinkdb#readme)\n- [TinkerPop](https://github.com/mohataher/awesome-tinkerpop#readme) - Graph computing framework.\n- [PostgreSQL](https://github.com/dhamaniasad/awesome-postgres#readme) - Object-relational database.\n- [CouchDB](https://github.com/quangv/awesome-couchdb#readme) - Document-oriented NoSQL database.\n- [HBase](https://github.com/rayokota/awesome-hbase#readme) - Distributed, scalable, big data store.\n- [NoSQL Guides](https://github.com/erictleung/awesome-nosql-guides#readme) - Help on using non-relational, distributed, open-source, and horizontally scalable databases.\n- [Database Tools](https://github.com/mgramin/awesome-db-tools#readme) - Everything that makes working with databases easier.\n- [TypeDB](https://github.com/vaticle/typedb-awesome#readme) - Logical database to organize large and complex networks of data as one body of knowledge.\n- [Cassandra](https://github.com/Anant/awesome-cassandra#readme) - Open-source, distributed, wide column store, NoSQL database management system.\n- [TDengine](https://github.com/taosdata/awesome-tdengine#readme) - An open-source time-series database with high-performance, scalability, and SQL support.\n- [Supabase](https://github.com/lyqht/awesome-supabase#readme) - An open-source alternative to Firebase.\n- [PocketBase](https://github.com/benallfree/awesome-pocketbase#readme) - An open-source, Go-based backend in one file.\n- [Neon](https://github.com/tyaga001/awesome-neon#readme) - An open-source alternative to AWS Aurora.\n\n## Media\n\n- [Fonts](https://github.com/brabadu/awesome-fonts#readme)\n- [Codeface](https://github.com/chrissimpkins/codeface#readme) - Text editor fonts.\n- [Stock Resources](https://github.com/neutraltone/awesome-stock-resources#readme)\n- [GIF](https://github.com/davisonio/awesome-gif#readme) - Image format known for animated images.\n- [Music](https://github.com/ciconia/awesome-music#readme)\n- [Open Source Documents](https://github.com/44bits/awesome-opensource-documents#readme)\n- [Audio Visualization](https://github.com/willianjusten/awesome-audio-visualization#readme)\n- [Broadcasting](https://github.com/ebu/awesome-broadcasting#readme)\n- [Pixel Art](https://github.com/Siilwyn/awesome-pixel-art#readme) - Pixel-level digital art.\n- [FFmpeg](https://github.com/transitive-bullshit/awesome-ffmpeg#readme) - Cross-platform solution to record, convert and stream audio and video.\n- [Icons](https://github.com/notlmn/awesome-icons#readme) - Downloadable SVG/PNG/font icon projects.\n- [Audiovisual](https://github.com/stingalleman/awesome-audiovisual#readme) - Lighting, audio and video in professional environments.\n- [VLC](https://github.com/mfkl/awesome-vlc#readme) - Cross-platform media player software and streaming server.\n\n## Learn\n\n- [CLI Workshoppers](https://github.com/therebelrobot/awesome-workshopper#readme) - Interactive tutorials.\n- [Learn to Program](https://github.com/karlhorky/learn-to-program#readme)\n- [Speaking](https://github.com/matteofigus/awesome-speaking#readme)\n- [Tech Videos](https://github.com/lucasviola/awesome-tech-videos#readme)\n- [Dive into Machine Learning](https://github.com/hangtwenty/dive-into-machine-learning#readme)\n- [Computer History](https://github.com/watson/awesome-computer-history#readme)\n- [Programming for Kids](https://github.com/HollyAdele/awesome-programming-for-kids#readme)\n- [STEAM](https://github.com/RahulBirCodes/awesome-steam#readme) - Supplements for specific science, technology, engineering, arts, and math (STEAM) courses across all grade levels.\n- [Educational Games](https://github.com/yrgo/awesome-educational-games#readme) - Learn while playing.\n- [JavaScript Learning](https://github.com/micromata/awesome-javascript-learning#readme)\n- [CSS Learning](https://github.com/micromata/awesome-css-learning#readme) - Mainly about CSS – the language and the modules.\n- [Product Management](https://github.com/dend/awesome-product-management#readme) - Learn how to be a better product manager.\n- [Roadmaps](https://github.com/liuchong/awesome-roadmaps#readme) - Gives you a clear route to improve your knowledge and skills.\n- [YouTubers](https://github.com/JoseDeFreitas/awesome-youtubers#readme) - Watch video tutorials from YouTubers that teach you about technology.\n- [Hackathon](https://github.com/dribdat/awesome-hackathon#readme) - Running fun and productive hackathons.\n- [Certificates](https://github.com/PanXProject/awesome-certificates#readme) - Free computer science certifications to showcase your knowledge.\n\n## Security\n\n- [Application Security](https://github.com/paragonie/awesome-appsec#readme)\n- [Security](https://github.com/sbilly/awesome-security#readme)\n- [CTF](https://github.com/apsdehal/awesome-ctf#readme) - Capture The Flag.\n- [Cyber Security University](https://github.com/brootware/awesome-cyber-security-university#readme) - Free educational resources that focus on learning by doing.\n- [Malware Analysis](https://github.com/rshipp/awesome-malware-analysis#readme)\n- [Android Security](https://github.com/ashishb/android-security-awesome#readme)\n- [Hacking](https://github.com/carpedm20/awesome-hacking#readme)\n- [Hacking Spots](https://github.com/daviddias/awesome-hacking-locations#readme)\n- [Honeypots](https://github.com/paralax/awesome-honeypots#readme) - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization.\n- [Incident Response](https://github.com/meirwah/awesome-incident-response#readme)\n- [Vehicle Security and Car Hacking](https://github.com/jaredthecoder/awesome-vehicle-security#readme)\n- [Web Security](https://github.com/qazbnm456/awesome-web-security#readme) - Security of web apps & services.\n- [Lockpicking](https://github.com/fabacab/awesome-lockpicking#readme) - The art of unlocking a lock by manipulating its components without the key.\n- [Cybersecurity Blue Team](https://github.com/fabacab/awesome-cybersecurity-blueteam#readme) - Groups of individuals who identify security flaws in information technology systems.\n- [Fuzzing](https://github.com/cpuu/awesome-fuzzing#readme) - Automated software testing technique that involves feeding pseudo-randomly generated input data.\n- [Embedded and IoT Security](https://github.com/fkie-cad/awesome-embedded-and-iot-security#readme)\n- [GDPR](https://github.com/bakke92/awesome-gdpr#readme) - Regulation on data protection and privacy for all individuals within EU.\n- [DevSecOps](https://github.com/TaptuIT/awesome-devsecops#readme) - Integration of security practices into [DevOps](https://en.wikipedia.org/wiki/DevOps).\n- [Executable Packing](https://github.com/dhondta/awesome-executable-packing#readme) - Packing and unpacking executable formats.\n- [Malware Persistence](https://github.com/Karneades/awesome-malware-persistence#readme) - Techniques that adversaries use to keep access to systems across restarts.\n- [EVM Security](https://github.com/kareniel/awesome-evm-security#readme) - Understanding the Ethereum Virtual Machine security ecosystem.\n- [Password Cracking](https://github.com/n0kovo/awesome-password-cracking#readme) - The process of recovering passwords from data that has been stored in or transmitted by a system in scrambled form.\n- [Security Card Games](https://github.com/Karneades/awesome-security-card-games#readme) - Train your skills and discuss various security topics.\n- [Suricata](https://github.com/satta/awesome-suricata#readme) - Intrusion detection/prevention system and network security monitoring engine.\n- [Prompt Injection](https://github.com/FonduAI/awesome-prompt-injection#readme) - A type of vulnerability that specifically targets machine learning models.\n- [Detection Engineering](https://github.com/infosecB/awesome-detection-engineering#readme) - Design, build, and operate detective cybersecurity controls.\n- [Annual Security Reports](https://github.com/jacobdjwilson/awesome-annual-security-reports#readme) - Exploring cybersecurity trends, insights, and challenges.\n- [CI/CD Attacks](https://github.com/TupleType/awesome-cicd-attacks#readme) - Offensive research of systems and processes related to developing and deploying code.\n\n## Content Management Systems\n\n- [Umbraco](https://github.com/umbraco-community/awesome-umbraco#readme)\n- [Refinery CMS](https://github.com/refinerycms-contrib/awesome-refinerycms#readme) - Ruby on Rails CMS.\n- [Wagtail](https://github.com/springload/awesome-wagtail#readme) - Django CMS focused on flexibility and user experience.\n- [Textpattern](https://github.com/drmonkeyninja/awesome-textpattern#readme) - Lightweight PHP-based CMS.\n- [Drupal](https://github.com/nirgn975/awesome-drupal#readme) - Extensible PHP-based CMS.\n- [Craft CMS](https://github.com/craftcms/awesome#readme) - Content-first CMS.\n- [Sitecore](https://github.com/MartinMiles/Awesome-Sitecore#readme) - .NET digital marketing platform that combines CMS with tools for managing multiple websites.\n- [Silverstripe CMS](https://github.com/wernerkrauss/awesome-silverstripe-cms#readme) - PHP MVC framework that serves as a classic or headless CMS.\n- [Directus](https://github.com/directus-community/awesome-directus#readme) - A real-time API and app dashboard for managing SQL database content.\n- [Plone](https://github.com/collective/awesome-plone#readme) - Open source Python CMS.\n- [Payload](https://github.com/DanailMinchev/awesome-payload#readme) - Next.js native and open source headless CMS.\n\n## Hardware\n\n- [Robotics](https://github.com/Kiloreux/awesome-robotics#readme)\n- [Internet of Things](https://github.com/HQarroum/awesome-iot#readme)\n- [Electronics](https://github.com/kitspace/awesome-electronics#readme) - For electronic engineers and hobbyists.\n- [Bluetooth Beacons](https://github.com/rabschi/awesome-beacon#readme)\n- [Electric Guitar Specifications](https://github.com/gitfrage/guitarspecs#readme) - Checklist for building your own electric guitar.\n- [Plotters](https://github.com/beardicus/awesome-plotters#readme) - Computer-controlled drawing machines and other visual art robots.\n- [Robotic Tooling](https://github.com/protontypes/awesome-robotic-tooling#readme) - Free and open tools for professional robotic development.\n- [LIDAR](https://github.com/szenergy/awesome-lidar#readme) - Sensor for measuring distances by illuminating the target with laser light.\n- [Open Hardware](https://github.com/delftopenhardware/awesome-open-hardware#readme) - Open-source hardware projects.\n- [ADS-B](https://github.com/rickstaa/awesome-adsb#readme) - Technology broadcasting aircraft's identity, position, and data periodically.\n- [Flying FPV](https://github.com/Matthias84/awesome-flying-fpv#readme) - Open hardware and software related to drones / UAVs.\n\n## Business\n\n- [Open Companies](https://github.com/opencompany/awesome-open-company#readme)\n- [Places to Post Your Startup](https://github.com/mmccaff/PlacesToPostYourStartup#readme)\n- [OKR Methodology](https://github.com/domenicosolazzo/awesome-okr#readme) - Goal setting & communication best practices.\n- [Indie](https://github.com/mezod/awesome-indie#readme) - Independent developer businesses.\n- [Tools of the Trade](https://github.com/cjbarber/ToolsOfTheTrade#readme) - Tools used by companies on Hacker News.\n- [Clean Tech](https://github.com/nglgzz/awesome-clean-tech#readme) - Fighting climate change with technology.\n- [Wardley Maps](https://github.com/wardley-maps-community/awesome-wardley-maps#readme) - Provides high situational awareness to help improve strategic planning and decision making.\n- [Social Enterprise](https://github.com/RayBB/awesome-social-enterprise#readme) - Building an organization primarily focused on social impact that is at least partially self-funded.\n- [Engineering Team Management](https://github.com/kdeldycke/awesome-engineering-team-management#readme) - How to transition from software development to engineering management.\n- [Developer-First Products](https://github.com/agamm/awesome-developer-first#readme) - Products that target developers as the user.\n- [Billing](https://github.com/kdeldycke/awesome-billing#readme) - Payments, invoicing, pricing, accounting, marketplace, fraud, and business intelligence.\n- [Engineering Strategy](https://github.com/aleixmorgadas/awesome-engineering-strategy#readme) - How to design and execute engineering strategies for tech leadership.\n\n## Work\n\n- [Slack](https://github.com/matiassingers/awesome-slack#readme) - Team collaboration.\n\t- [Communities](https://github.com/filipelinhares/awesome-slack#readme)\n- [Remote Jobs](https://github.com/lukasz-madon/awesome-remote-job#readme)\n- [Productivity](https://github.com/jyguyomarch/awesome-productivity#readme)\n- [Niche Job Boards](https://github.com/tramcar/awesome-job-boards#readme)\n- [Programming Interviews](https://github.com/DopplerHQ/awesome-interview-questions#readme)\n- [Code Review](https://github.com/joho/awesome-code-review#readme) - Reviewing code.\n- [Creative Technology](https://github.com/j0hnm4r5/awesome-creative-technology#readme) - Businesses & groups that specialize in combining computing, design, art, and user experience.\n- [Internships](https://github.com/lodthe/awesome-internships#readme) - CV writing guides and companies that hire interns.\n\n## Networking\n\n- [Software-Defined Networking](https://github.com/sdnds-tw/awesome-sdn#readme)\n- [PCAPTools](https://github.com/caesar0301/awesome-pcaptools#readme)\n- [Real-Time Communications](https://github.com/rtckit/awesome-rtc#readme) - Network protocols for near simultaneous exchange of media and data.\n- [SNMP](https://github.com/eozer/awesome-snmp#readme) - A protocol for collecting, modifying, and organizing information about managed devices on IP networks.\n- [Scapy](https://github.com/secdev/awesome-scapy#readme) - Python-based interactive packet manipulation.\n- [Cilium](https://github.com/seifrajhi/awesome-cilium#readme) - Provides networking and security capabilities for containerized apps, microservices, and virtual machines.\n\n## Decentralized Systems\n\n- [Bitcoin](https://github.com/igorbarinov/awesome-bitcoin#readme) - Bitcoin services and tools for software developers.\n- [Ripple](https://github.com/vhpoet/awesome-ripple#readme) - Open source distributed settlement network.\n- [Non-Financial Blockchain](https://github.com/machinomy/awesome-non-financial-blockchain#readme) - Non-financial blockchain applications.\n- [Mastodon](https://github.com/hyperupcall/awesome-mastodon#readme) - Open source decentralized microblogging network.\n- [Ethereum](https://github.com/ttumiel/Awesome-Ethereum#readme) - Distributed computing platform for smart contract development.\n- [Blockchain AI](https://github.com/steven2358/awesome-blockchain-ai#readme) - Blockchain projects for artificial intelligence and machine learning.\n- [EOSIO](https://github.com/DanailMinchev/awesome-eosio#readme) - A decentralized operating system supporting industrial-scale apps.\n- [Corda](https://github.com/chainstack/awesome-corda#readme) - Open source blockchain platform designed for business.\n- [Waves](https://github.com/msmolyakov/awesome-waves#readme) - Open source blockchain platform and development toolset for Web 3.0 apps and decentralized solutions.\n- [Substrate](https://github.com/substrate-developer-hub/awesome-substrate#readme) - Framework for writing scalable, upgradeable blockchains in Rust.\n- [Golem](https://github.com/golemfactory/awesome-golem#readme) - Open source peer-to-peer marketplace for computing resources.\n- [Stacks](https://github.com/friedger/awesome-stacks-chain#readme) - A smart contract platform secured by Bitcoin.\n- [Algorand](https://github.com/aorumbayev/awesome-algorand#readme) - An open-source, proof of stake blockchain and smart contract computing platform.\n- [ZeroNet](https://github.com/zolagonano/awesome-zeronet#readme) - A decentralized web-like network of peer-to-peer users.\n- [Cosmos SDK](https://github.com/cosmos/awesome-cosmos#readme) - Modular framework for building app-specific blockchains in Go.\n- [Tor](https://github.com/polycarbohydrate/awesome-tor#readme) - A free overlay network for enabling anonymous communication.\n- [ATProto](https://github.com/atblueprints/awesome-atproto#readme) - Open, decentralized network for building social apps.\n\n## Health and Social Science\n\n- [Biomedical Information Extraction](https://github.com/caufieldjh/awesome-bioie#readme) - How to extract information from unstructured biomedical data and text.\n- [Computational Neuroscience](https://github.com/eselkin/awesome-computational-neuroscience#readme) - A multidisciplinary science which uses computational approaches to study the nervous system.\n- [Diversity](https://github.com/folkswhocode/awesome-diversity#readme) - Creating a more inclusive and diverse tech community.\n- [Digital History](https://github.com/maehr/awesome-digital-history#readme) - Computer-aided scientific investigation of history.\n- [Empathy in Engineering](https://github.com/KimberlyMunoz/empathy-in-engineering#readme) - Building and promoting more compassionate engineering cultures.\n- [Healthcare](https://github.com/kakoni/awesome-healthcare#readme) - Open source healthcare software for facilities, providers, developers, policy experts, and researchers.\n- [Humane Technology](https://github.com/humanetech-community/awesome-humane-tech#readme) - Open source projects that help improve society.\n- [Mental Health](https://github.com/dreamingechoes/awesome-mental-health#readme) - Mental health awareness and self-care in the software industry.\n- [Neuroscience](https://github.com/analyticalmonk/awesome-neuroscience#readme) - Study of the nervous system and brain.\n- [Digital Humanities](https://github.com/dh-tech/awesome-digital-humanities#readme) - Software for humanities scholars using quantitative or computational methods.\n- [Lucid Dreams](https://github.com/IAmCoder/awesome-lucid-dreams#readme) - A dream where one becomes aware they are dreaming.\n- [Neuroimaging](https://github.com/NPACore/awesome-neuroimaging#readme) - Software for analyzing brain data from living subjects.\n\n## Events\n\n- [Creative Tech Events](https://github.com/danvoyce/awesome-creative-tech-events#readme) - Events around the globe for creative coding, tech, design, music, arts and cool stuff.\n- [Events in Italy](https://github.com/ildoc/awesome-italy-events#readme) - Tech-related events in Italy.\n- [Events in the Netherlands](https://github.com/awkward/awesome-netherlands-events#readme) - Tech-related events in the Netherlands.\n\n## Testing\n\n- [Testing](https://github.com/TheJambo/awesome-testing#readme) - Software testing.\n- [Visual Regression Testing](https://github.com/mojoaxel/awesome-regression-testing#readme) - Ensures changes did not break the functionality or style.\n- [Selenium](https://github.com/christian-bromann/awesome-selenium#readme) - Open-source browser automation framework and ecosystem.\n- [Appium](https://github.com/SrinivasanTarget/awesome-appium#readme) - Test automation tool for apps.\n- [TAP](https://github.com/sindresorhus/awesome-tap#readme) - Test Anything Protocol.\n- [JMeter](https://github.com/aliesbelik/awesome-jmeter#readme) - Load testing and performance measurement tool.\n- [k6](https://github.com/grafana/awesome-k6#readme) - Open-source, developer-centric performance monitoring and load testing solution.\n- [Playwright](https://github.com/mxschmitt/awesome-playwright#readme) - Node.js library to automate Chromium, Firefox and WebKit with a single API.\n- [Quality Assurance Roadmap](https://github.com/fityanos/awesome-quality-assurance-roadmap#readme) - How to start & build a career in software testing.\n- [Gatling](https://github.com/aliesbelik/awesome-gatling#readme) - Open-source load and performance testing framework based on Scala, Akka, and Netty.\n- [CodeRabbit](https://github.com/coderabbitai/awesome-coderabbit#readme) - AI-powered code review platform.\n\n## Miscellaneous\n\n- [Scientific Writing](https://github.com/writing-resources/awesome-scientific-writing#readme) - Distraction-free scientific writing with Markdown, reStructuredText and Jupyter notebooks.\n- [JSON](https://github.com/burningtree/awesome-json#readme) - Text based data interchange format.\n\t- [GeoJSON](https://github.com/tmcw/awesome-geojson#readme)\n\t- [Datasets](https://github.com/jdorfman/awesome-json-datasets#readme)\n- [CSV](https://github.com/secretGeek/awesomeCSV#readme) - A text file format that stores tabular data and uses a comma to separate values.\n- [Discounts for Student Developers](https://github.com/AchoArnold/discount-for-student-dev#readme)\n- [Radio](https://github.com/kyleterry/awesome-radio#readme)\n- [Awesome](https://github.com/sindresorhus/awesome#readme) - Recursion illustrated.\n- [Analytics](https://github.com/0xnr/awesome-analytics#readme)\n- [REST](https://github.com/marmelab/awesome-rest#readme)\n- [Continuous Integration and Continuous Delivery](https://github.com/cicdops/awesome-ciandcd#readme)\n- [Services Engineering](https://github.com/mmcgrana/services-engineering#readme)\n- [Free for Developers](https://github.com/ripienaar/free-for-dev#readme)\n- [Answers](https://github.com/cyberglot/awesome-answers#readme) - Stack Overflow, Quora, etc.\n- [Sketch](https://github.com/diessica/awesome-sketch#readme) - Design app for macOS.\n- [Boilerplate Projects](https://github.com/melvin0008/awesome-projects-boilerplates#readme)\n- [Readme](https://github.com/matiassingers/awesome-readme#readme)\n- [GitHub Wiki](https://github.com/MyHoneyBadger/awesome-github-wiki#readme) - Comprehensive documentation on GitHub beyond README.\n- [Design and Development Guides](https://github.com/NARKOZ/guides#readme)\n- [Software Engineering Blogs](https://github.com/kilimchoi/engineering-blogs#readme)\n- [Self Hosted](https://github.com/awesome-selfhosted/awesome-selfhosted#readme)\n- [FOSS Production Apps](https://github.com/DataDaoDe/awesome-foss-apps#readme)\n- [Gulp](https://github.com/alferov/awesome-gulp#readme) - Task runner.\n- [AMA](https://github.com/sindresorhus/amas#readme) - Ask Me Anything.\n\t- [Answers](https://github.com/stoeffel/awesome-ama-answers#readme)\n- [Open Source Photography](https://github.com/ibaaj/awesome-OpenSourcePhotography#readme)\n- [OpenGL](https://github.com/eug/awesome-opengl#readme) - Cross-platform API for rendering 2D and 3D graphics.\n- [GraphQL](https://github.com/chentsulin/awesome-graphql#readme)\n- [Urban & Regional Planning](https://github.com/APA-Technology-Division/urban-and-regional-planning-resources#readme) - Concerning the built environment and communities.\n- [Transit](https://github.com/CUTR-at-USF/awesome-transit#readme)\n- [Research Tools](https://github.com/emptymalei/awesome-research#readme)\n- [Data Visualization](https://github.com/javierluraschi/awesome-dataviz#readme)\n- [Microservices](https://github.com/mfornos/awesome-microservices#readme)\n- [Unicode](https://github.com/jagracey/Awesome-Unicode#readme) - Unicode standards, quirks, packages and resources.\n\t- [Code Points](https://github.com/Codepoints/awesome-codepoints#readme)\n- [Beginner-Friendly Projects](https://github.com/MunGell/awesome-for-beginners#readme)\n- [Katas](https://github.com/gamontal/awesome-katas#readme)\n- [Tools for Activism](https://github.com/drewrwilson/toolsforactivism#readme)\n- [Citizen Science](https://github.com/dylanrees/citizen-science#readme) - For community-based and non-institutional scientists.\n- [MQTT](https://github.com/hobbyquaker/awesome-mqtt#readme) - \"Internet of Things\" connectivity protocol.\n- [For Girls](https://github.com/cristianoliveira/awesome4girls#readme)\n- [Vorpal](https://github.com/vorpaljs/awesome-vorpal#readme) - Node.js CLI framework.\n- [Vulkan](https://github.com/vinjn/awesome-vulkan#readme) - Low-overhead, cross-platform 3D graphics and compute API.\n- [LaTeX](https://github.com/egeerardyn/awesome-LaTeX#readme) - Typesetting language.\n- [Economics](https://github.com/antontarasenko/awesome-economics#readme) - An economist's starter kit.\n- [Funny Markov Chains](https://github.com/sublimino/awesome-funny-markov#readme)\n- [Bioinformatics](https://github.com/danielecook/Awesome-Bioinformatics#readme)\n- [Cheminformatics](https://github.com/hsiaoyi0504/awesome-cheminformatics#readme) - Informatics techniques applied to problems in chemistry.\n- [Colorful](https://github.com/Siddharth11/Colorful#readme) - Choose your next color scheme.\n- [Steam](https://github.com/scholtzm/awesome-steam#readme) - Digital distribution platform.\n- [Bots](https://github.com/hackerkid/bots#readme) - Building bots.\n- [Site Reliability Engineering](https://github.com/dastergon/awesome-sre#readme)\n- [DTrace](https://github.com/xen0l/awesome-dtrace#readme) - Dynamic tracing framework.\n- [Userscripts](https://github.com/bvolpato/awesome-userscripts#readme) - Enhance your browsing experience.\n- [Pokémon](https://github.com/tobiasbueschel/awesome-pokemon#readme) - Pokémon and Pokémon GO.\n- [ChatOps](https://github.com/exAspArk/awesome-chatops#readme) - Managing technical and business operations through a chat.\n- [Falsehood](https://github.com/kdeldycke/awesome-falsehood#readme) - Falsehoods programmers believe in.\n- [Domain-Driven Design](https://github.com/heynickc/awesome-ddd#readme) - Software development approach for complex needs by connecting the implementation to an evolving model.\n- [Quantified Self](https://github.com/woop/awesome-quantified-self#readme) - Self-tracking through technology.\n- [SaltStack](https://github.com/hbokh/awesome-saltstack#readme) - Python-based config management system.\n- [Web Design](https://github.com/nicolesaidy/awesome-web-design#readme) - For digital designers.\n- [Creative Coding](https://github.com/terkelg/awesome-creative-coding#readme) - Programming something expressive instead of something functional.\n- [No-Login Web Apps](https://github.com/aviaryan/awesome-no-login-web-apps#readme) - Web apps that work without login.\n- [Free Software](https://github.com/johnjago/awesome-free-software#readme) - Free as in freedom.\n- [Framer](https://github.com/podo/awesome-framer#readme) - Prototyping interactive UI designs.\n- [Markdown](https://github.com/BubuAnabelas/awesome-markdown#readme) - Markup language.\n- [Dev Fun](https://github.com/mislavcimpersak/awesome-dev-fun#readme) - Funny developer projects.\n- [Magento 2](https://github.com/DavidLambauer/awesome-magento2#readme) - Open Source eCommerce built with PHP.\n- [TikZ](https://github.com/xiaohanyu/awesome-tikz#readme) - Graph drawing packages for TeX/LaTeX/ConTeXt.\n- [Ad-Free](https://github.com/johnjago/awesome-ad-free#readme) - Ad-free alternatives.\n- [Prometheus](https://github.com/roaldnefs/awesome-prometheus#readme) - Open-source monitoring system.\n- [Homematic](https://github.com/homematic-community/awesome-homematic#readme) - Smart home devices.\n- [Ledger](https://github.com/sfischer13/awesome-ledger#readme) - Double-entry accounting on the command-line.\n- [Web Monetization](https://github.com/thomasbnt/awesome-web-monetization#readme) - A free open web standard service that allows you to send money directly in your browser.\n- [Uncopyright](https://github.com/johnjago/awesome-uncopyright#readme) - Public domain works.\n- [Crypto Currency Tools & Algorithms](https://github.com/Zheaoli/awesome-coins#readme) - Digital currency where encryption is used to regulate the generation of units and verify transfers.\n- [Open Source Supporters](https://github.com/zachflower/awesome-open-source-supporters#readme) - Companies that offer their tools and services for free to open source projects.\n- [Design Principles](https://github.com/robinstickel/awesome-design-principles#readme) - Create better and more consistent designs and experiences.\n- [Theravada](https://github.com/johnjago/awesome-theravada#readme) - Teachings from the Theravada Buddhist tradition.\n- [inspectIT](https://github.com/inspectit-labs/awesome-inspectit#readme) - Open source Java app performance management tool.\n- [Open Source Maintainers](https://github.com/nayafia/awesome-maintainers#readme) - The experience of being an open source maintainer.\n- [Calculators](https://github.com/xxczaki/awesome-calculators#readme) - Calculators for every platform.\n- [Captcha](https://github.com/ZYSzys/awesome-captcha#readme) - A type of challenge–response test used in computing to determine whether or not the user is human.\n- [Jupyter](https://github.com/markusschanta/awesome-jupyter#readme) - Create and share documents that contain code, equations, visualizations and narrative text.\n- [FIRST Robotics Competition](https://github.com/andrewda/awesome-frc#readme) - International high school robotics championship.\n- [Speakers](https://github.com/karlhorky/awesome-speakers#readme) - Conference and meetup speakers in the programming and design community.\n- [Board Games](https://github.com/edm00se/awesome-board-games#readme) - Table-top gaming fun for all.\n- [Software Patreons](https://github.com/uraimo/awesome-software-patreons#readme) - Fund individual programmers or the development of open source projects.\n- [Parasite](https://github.com/ecohealthalliance/awesome-parasite#readme) - Parasites and host-pathogen interactions.\n- [Food](https://github.com/jzarca01/awesome-food#readme) - Food-related projects on GitHub.\n- [Bitcoin Payment Processors](https://github.com/alexk111/awesome-bitcoin-payment-processors#readme) - Start accepting Bitcoin.\n- [Scientific Computing](https://github.com/nschloe/awesome-scientific-computing#readme) - Solving complex scientific problems using computers.\n- [Amazon Sellers](https://github.com/ScaleLeap/awesome-amazon-seller#readme)\n- [Agriculture](https://github.com/brycejohnston/awesome-agriculture#readme) - Open source technology for farming and gardening.\n- [Product Design](https://github.com/ttt30ga/awesome-product-design#readme) - Design a product from the initial concept to production.\n- [Prisma](https://github.com/catalinmiron/awesome-prisma#readme) - Turn your database into a GraphQL API.\n- [Software Architecture](https://github.com/simskij/awesome-software-architecture#readme) - The discipline of designing and building software.\n- [Connectivity Data and Reports](https://github.com/stevesong/awesome-connectivity-info#readme) - Better understand who has access to telecommunication and internet infrastructure and on what terms.\n- [Stacks](https://github.com/stackshareio/awesome-stacks#readme) - Tech stacks for building different apps and features.\n- [Cytodata](https://github.com/cytodata/awesome-cytodata#readme) - Image-based profiling of biological phenotypes for computational biologists.\n- [IRC](https://github.com/davisonio/awesome-irc#readme) - Open source messaging protocol.\n- [Advertising](https://github.com/cenoura/awesome-ads#readme) - Advertising and programmatic media for websites.\n- [Earth](https://github.com/philsturgeon/awesome-earth#readme) - Find ways to resolve the climate crisis.\n- [Naming](https://github.com/gruhn/awesome-naming#readme) - Naming things in computer science done right.\n- [Web Archiving](https://github.com/iipc/awesome-web-archiving#readme) - An effort to preserve the Web for future generations.\n- [WP-CLI](https://github.com/schlessera/awesome-wp-cli#readme) - Command-line interface for WordPress.\n- [Credit Modeling](https://github.com/mourarthur/awesome-credit-modeling#readme) - Methods for classifying credit applicants into risk classes.\n- [Ansible](https://github.com/ansible-community/awesome-ansible#readme) - A Python-based, open-source IT configuration management and automation platform.\n- [Biological Visualizations](https://github.com/keller-mark/awesome-biological-visualizations#readme) - Interactive visualization of biological data on the web.\n- [QR Code](https://github.com/make-github-pseudonymous-again/awesome-qr-code#readme) - A type of matrix barcode that can be used to store and share a small amount of information.\n- [Veganism](https://github.com/sdassow/awesome-veganism#readme) - Making the plant-based lifestyle easy and accessible.\n- [Translations](https://github.com/mbiesiad/awesome-translations#readme) - The transfer of the meaning of a text from one language to another.\n- [Scriptable](https://github.com/dersvenhesse/awesome-scriptable#readme) - An iOS app for automation in JavaScript.\n- [WebXR](https://github.com/msub2/awesome-webxr#readme) - Enables immersive virtual reality and augmented reality content on the web.\n- [Computational Geometry](https://github.com/atkirtland/awesome-computational-geometry#readme) - Computational approaches for problems in geometry.\n- [OpenStreetMap](https://github.com/osmlab/awesome-openstreetmap#readme) - An open data mapping project utilized by many apps and devices.\n- [Computational Biology](https://github.com/inoue0426/awesome-computational-biology#readme) - Computational approaches applied to problems in biology.\n- [Read the Docs](https://github.com/readthedocs-examples/awesome-read-the-docs#readme) - Example documentation projects to inspire and help bootstrap new documentation projects.\n- [Quarto](https://github.com/mcanouil/awesome-quarto#readme) - Scientific and technical open-source publishing system built on Pandoc.\n- [Biological Image Analysis](https://github.com/hallvaaw/awesome-biological-image-analysis#readme) - Interpreting biological phenomena using images.\n- [ChatGPT](https://github.com/sindresorhus/awesome-chatgpt#readme) - Artificial intelligence chatbot developed by OpenAI.\n- [Whisper](https://github.com/sindresorhus/awesome-whisper#readme) - Open-source AI-powered speech recognition system developed by OpenAI.\n- [Stock Trading](https://github.com/shi-rudo/awesome-stock-trading#readme) - Purchase and sale of equities of publicly traded companies to generate profits.\n- [Steam Deck](https://github.com/airscripts/awesome-steam-deck#readme) - A handheld gaming computer developed by Valve.\n- [Astrophotography](https://github.com/lunohodov/awesome-astrophotography#readme) - Photography of astronomical objects, celestial events, or areas of the night sky.\n- [HPC](https://github.com/dstdev/awesome-hpc#readme) - High Performance Computing.\n- [Geocaching](https://github.com/FoxFil/awesome-geocaching#readme) - Outdoor treasure-hunting activity that uses GPS-enabled devices.\n- [Regex](https://github.com/slevithan/awesome-regex#readme) - Specialized language for matching patterns in text.\n- [Event-Driven Architecture](https://github.com/lutzh/awesome-event-driven-architecture#readme) - A software architecture approach where services collaborate by publishing and subscribing to events.\n- [Permacomputing](https://github.com/idematos/awesome-permacomputing#readme) - Resilient and regenerative computing practices inspired by permaculture.\n- [Standards](https://github.com/donBarbos/awesome-standards#readme) - Standards and proposals that define and enhance software, languages, and related technologies.\n- [Claude Code](https://github.com/hesreallyhim/awesome-claude-code#readme) - Terminal-based AI coding assistant by Anthropic.\n\n## Related\n\n- [All Awesome Lists](https://github.com/topics/awesome) - All the Awesome lists on GitHub.\n- [Awesome Search](https://awesomelists.top) - Quick search for Awesome lists.\n- [StumbleUponAwesome](https://github.com/basharovV/StumbleUponAwesome) - Discover random pages from the Awesome dataset using a browser extension.\n- [Awesome CLI](https://github.com/umutphp/awesome-cli) - A simple command-line tool to dive into Awesome lists.\n- [Awesome Viewer](https://awesome.digitalbunker.dev) - A visualizer for all of the above Awesome lists.\n- [Track Awesome List](https://www.trackawesomelist.com) - View the latest updates of Awesome lists.\n"
  },
  {
    "id": 13491895,
    "name": "free-programming-books",
    "full_name": "EbookFoundation/free-programming-books",
    "description": ":books: Freely available programming books",
    "url": "https://github.com/EbookFoundation/free-programming-books",
    "clone_url": "https://github.com/EbookFoundation/free-programming-books.git",
    "star_count": 362983,
    "fork_count": 63755,
    "language": "Python",
    "topics": [
      "education",
      "books",
      "list",
      "resource",
      "hacktoberfest"
    ],
    "last_commit_date": "2025-06-28T02:59:36+00:00",
    "created_at": "2013-10-11T06:50:37+00:00",
    "updated_at": "2025-07-16T06:22:51+00:00",
    "size": 19604,
    "default_branch": "main",
    "license": "Creative Commons Attribution 4.0 International",
    "readme": "# List of Free Learning Resources In Many Languages\n\n<div align=\"center\" markdown=\"1\">\n\n[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)&#160;\n[![License: CC BY 4.0](https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)&#160;\n[![Hacktoberfest 2023 stats](https://img.shields.io/github/hacktoberfest/2023/EbookFoundation/free-programming-books?label=Hacktoberfest+2023)](https://github.com/EbookFoundation/free-programming-books/pulls?q=is%3Apr+is%3Amerged+created%3A2023-10-01..2023-10-31)\n\n</div>\n\nSearch the list at [https://ebookfoundation.github.io/free-programming-books-search/](https://ebookfoundation.github.io/free-programming-books-search/) [![https://ebookfoundation.github.io/free-programming-books-search/](https://img.shields.io/website?style=flat&logo=www&logoColor=whitesmoke&label=Dynamic%20search%20site&down_color=red&down_message=down&up_color=green&up_message=up&url=https%3A%2F%2Febookfoundation.github.io%2Ffree-programming-books-search%2F)](https://ebookfoundation.github.io/free-programming-books-search/).\n\nThis page is available as an easy-to-read website. Access it by clicking on [![https://ebookfoundation.github.io/free-programming-books/](https://img.shields.io/website?style=flat&logo=www&logoColor=whitesmoke&label=Static%20site&down_color=red&down_message=down&up_color=green&up_message=up&url=https%3A%2F%2Febookfoundation.github.io%2Ffree-programming-books%2F)](https://ebookfoundation.github.io/free-programming-books/).\n\n<div align=\"center\">\n  <form action=\"https://ebookfoundation.github.io/free-programming-books-search\">\n    <input type=\"text\" id=\"fpbSearch\" name=\"search\" required placeholder=\"Search Book or Author\"/>\n    <label for=\"submit\"> </label>\n    <input type=\"submit\" id=\"submit\" name=\"submit\" value=\"Search\" />\n  </form>\n</div>\n\n## Intro\n\nThis list was originally a clone of [StackOverflow - List of Freely Available Programming Books](https://web.archive.org/web/20140606191453/http://stackoverflow.com/questions/194812/list-of-freely-available-programming-books/392926) with contributions from Karan Bhangui and George Stocker.\n\nThe list was moved to GitHub by Victor Felder for collaborative updating and maintenance. It has grown to become one of [GitHub's most popular repositories](https://octoverse.github.com/).\n\n<div align=\"center\" markdown=\"1\">\n\n[![GitHub repo forks](https://img.shields.io/github/forks/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=whitesmoke&label=Forks)](https://github.com/EbookFoundation/free-programming-books/network)&#160;\n[![GitHub repo stars](https://img.shields.io/github/stars/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=whitesmoke&label=Stars)](https://github.com/EbookFoundation/free-programming-books/stargazers)&#160;\n[![GitHub repo contributors](https://img.shields.io/github/contributors-anon/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=whitesmoke&label=Contributors)](https://github.com/EbookFoundation/free-programming-books/graphs/contributors)    \n[![GitHub org sponsors](https://img.shields.io/github/sponsors/EbookFoundation?style=flat&logo=github&logoColor=whitesmoke&label=Sponsors)](https://github.com/sponsors/EbookFoundation)&#160;\n[![GitHub repo watchers](https://img.shields.io/github/watchers/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=whitesmoke&label=Watchers)](https://github.com/EbookFoundation/free-programming-books/watchers)&#160;\n[![GitHub repo size](https://img.shields.io/github/repo-size/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=whitesmoke&label=Repo%20Size)](https://github.com/EbookFoundation/free-programming-books/archive/refs/heads/main.zip)\n\n</div>\n\nThe [Free Ebook Foundation](https://ebookfoundation.org) now administers the repo, a not-for-profit organization devoted to promoting the creation, distribution, archiving, and sustainability of free ebooks. [Donations](https://ebookfoundation.org/contributions.html) to the Free Ebook Foundation are tax-deductible in the US.\n\n\n## How To Contribute\n\nPlease read [CONTRIBUTING](docs/CONTRIBUTING.md). If you're new to GitHub, [welcome](docs/HOWTO.md)! Remember to abide by our adapted from ![Contributor Covenant 1.3](https://img.shields.io/badge/Contributor%20Covenant-1.3-4baaaa.svg) [Code of Conduct](docs/CODE_OF_CONDUCT.md) too ([translations](#translations) also available).\n\nClick on these badges to see how you might be able to help:\n\n<div align=\"center\" markdown=\"1\">\n\n[![GitHub repo Issues](https://img.shields.io/github/issues/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=red&label=Issues)](https://github.com/EbookFoundation/free-programming-books/issues)&#160;\n[![GitHub repo Good Issues for newbies](https://img.shields.io/github/issues/EbookFoundation/free-programming-books/good%20first%20issue?style=flat&logo=github&logoColor=green&label=Good%20First%20issues)](https://github.com/EbookFoundation/free-programming-books/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)&#160;\n[![GitHub Help Wanted issues](https://img.shields.io/github/issues/EbookFoundation/free-programming-books/help%20wanted?style=flat&logo=github&logoColor=b545d1&label=%22Help%20Wanted%22%20issues)](https://github.com/EbookFoundation/free-programming-books/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)    \n[![GitHub repo PRs](https://img.shields.io/github/issues-pr/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=orange&label=PRs)](https://github.com/EbookFoundation/free-programming-books/pulls)&#160;\n[![GitHub repo Merged PRs](https://img.shields.io/github/issues-search/EbookFoundation/free-programming-books?style=flat&logo=github&logoColor=green&label=Merged%20PRs&query=is%3Amerged)](https://github.com/EbookFoundation/free-programming-books/pulls?q=is%3Apr+is%3Amerged)&#160;\n[![GitHub Help Wanted PRs](https://img.shields.io/github/issues-pr/EbookFoundation/free-programming-books/help%20wanted?style=flat&logo=github&logoColor=b545d1&label=%22Help%20Wanted%22%20PRs)](https://github.com/EbookFoundation/free-programming-books/pulls?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)\n\n</div>\n\n## How To Share\n\n<div align=\"left\" markdown=\"1\">\n<a href=\"https://www.facebook.com/share.php?u=https%3A%2F%2Fgithub.com%2FEbookFoundation%2Ffree-programming-books&p[images][0]=&p[title]=Free%20Programming%20Books&p[summary]=\">Share on Facebook</a><br>\n<a href=\"http://www.linkedin.com/shareArticle?mini=true&url=https://github.com/EbookFoundation/free-programming-books&title=Free%20Programming%20Books&summary=&source=\">Share on LinkedIn</a><br>\n<a href=\"https://toot.kytta.dev/?mini=true&url=https://github.com/EbookFoundation/free-programming-books&title=Free%20Programming%20Books&summary=&source=\">Share on Mastodon/Fediverse</a><br>    \n<a href=\"https://t.me/share/url?url=https://github.com/EbookFoundation/free-programming-books\">Share on Telegram</a><br>\n<a href=\"https://twitter.com/intent/tweet?text=https://github.com/EbookFoundation/free-programming-books%0AFree%20Programming%20Books\">Share on 𝕏 (Twitter)</a><br>\n</div>\n\n## Resources\n\nThis project lists books and other resources grouped by genres:\n\n### Books\n\n[English, By Programming Language](books/free-programming-books-langs.md)\n\n[English, By Subject](books/free-programming-books-subjects.md)\n\n#### Other Languages\n\n+ [Arabic / al arabiya / العربية](books/free-programming-books-ar.md)\n+ [Armenian / Հայերեն](books/free-programming-books-hy.md)\n+ [Azerbaijani / Азәрбајҹан дили / آذربايجانجا ديلي](books/free-programming-books-az.md)\n+ [Bengali / বাংলা](books/free-programming-books-bn.md)\n+ [Bulgarian / български](books/free-programming-books-bg.md)\n+ [Burmese / မြန်မာဘာသာ](books/free-programming-books-my.md)\n+ [Chinese / 中文](books/free-programming-books-zh.md)\n+ [Czech / čeština / český jazyk](books/free-programming-books-cs.md)\n+ [Catalan / catalan/ català](books/free-programming-books-ca.md)\n+ [Danish / dansk](books/free-programming-books-da.md)\n+ [Dutch / Nederlands](books/free-programming-books-nl.md)\n+ [Estonian / eesti keel](books/free-programming-books-et.md)\n+ [Finnish / suomi / suomen kieli](books/free-programming-books-fi.md)\n+ [French / français](books/free-programming-books-fr.md)\n+ [German / Deutsch](books/free-programming-books-de.md)\n+ [Greek / ελληνικά](books/free-programming-books-el.md)\n+ [Hebrew / עברית](books/free-programming-books-he.md)\n+ [Hindi / हिन्दी](books/free-programming-books-hi.md)\n+ [Hungarian / magyar / magyar nyelv](books/free-programming-books-hu.md)\n+ [Indonesian / Bahasa Indonesia](books/free-programming-books-id.md)\n+ [Italian / italiano](books/free-programming-books-it.md)\n+ [Japanese / 日本語](books/free-programming-books-ja.md)\n+ [Korean / 한국어](books/free-programming-books-ko.md)\n+ [Latvian / Latviešu](books/free-programming-books-lv.md)\n+ [Malayalam / മലയാളം](books/free-programming-books-ml.md)\n+ [Norwegian / Norsk](books/free-programming-books-no.md)\n+ [Persian / Farsi (Iran) / فارسى](books/free-programming-books-fa_IR.md)\n+ [Polish / polski / język polski / polszczyzna](books/free-programming-books-pl.md)\n+ [Portuguese (Brazil)](books/free-programming-books-pt_BR.md)\n+ [Portuguese (Portugal)](books/free-programming-books-pt_PT.md)\n+ [Romanian (Romania) / limba română / român](books/free-programming-books-ro.md)\n+ [Russian / Русский язык](books/free-programming-books-ru.md)\n+ [Serbian / српски језик / srpski jezik](books/free-programming-books-sr.md)\n+ [Slovak / slovenčina](books/free-programming-books-sk.md)\n+ [Spanish / español / castellano](books/free-programming-books-es.md)\n+ [Swedish / Svenska](books/free-programming-books-sv.md)\n+ [Tamil / தமிழ்](books/free-programming-books-ta.md)\n+ [Telugu / తెలుగు](books/free-programming-books-te.md)\n+ [Thai / ไทย](books/free-programming-books-th.md)\n+ [Turkish / Türkçe](books/free-programming-books-tr.md)\n+ [Ukrainian / Українська](books/free-programming-books-uk.md)\n+ [Vietnamese / Tiếng Việt](books/free-programming-books-vi.md)\n\n### Cheat Sheets\n\n+ [All Languages](more/free-programming-cheatsheets.md)\n\n### Free Online Courses\n\n+ [Arabic / al arabiya / العربية](courses/free-courses-ar.md)\n+ [Bengali / বাংলা](courses/free-courses-bn.md)\n+ [Bulgarian / български](courses/free-courses-bg.md)\n+ [Burmese / မြန်မာဘာသာ](courses/free-courses-my.md)\n+ [Chinese / 中文](courses/free-courses-zh.md)\n+ [English](courses/free-courses-en.md)\n+ [Finnish / suomi / suomen kieli](courses/free-courses-fi.md)\n+ [French / français](courses/free-courses-fr.md)\n+ [German / Deutsch](courses/free-courses-de.md)\n+ [Greek / ελληνικά](courses/free-courses-el.md)\n+ [Hebrew / עברית](courses/free-courses-he.md)\n+ [Hindi / हिंदी](courses/free-courses-hi.md)\n+ [Indonesian / Bahasa Indonesia](courses/free-courses-id.md)\n+ [Italian / italiano](courses/free-courses-it.md)\n+ [Japanese / 日本語](courses/free-courses-ja.md)\n+ [Kannada/ಕನ್ನಡ](courses/free-courses-kn.md)\n+ [Kazakh / қазақша](courses/free-courses-kk.md)\n+ [Khmer / ភាសាខ្មែរ](courses/free-courses-km.md)\n+ [Korean / 한국어](courses/free-courses-ko.md)\n+ [Malayalam / മലയാളം](courses/free-courses-ml.md)\n+ [Marathi / मराठी](courses/free-courses-mr.md)\n+ [Nepali / नेपाली](courses/free-courses-ne.md)\n+ [Norwegian / Norsk](courses/free-courses-no.md)\n+ [Persian / Farsi (Iran) / فارسى](courses/free-courses-fa_IR.md)\n+ [Polish / polski / język polski / polszczyzna](courses/free-courses-pl.md)\n+ [Portuguese (Brazil)](courses/free-courses-pt_BR.md)\n+ [Portuguese (Portugal)](courses/free-courses-pt_PT.md)\n+ [Russian / Русский язык](courses/free-courses-ru.md)\n+ [Sinhala / සිංහල](courses/free-courses-si.md)\n+ [Spanish / español / castellano](courses/free-courses-es.md)\n+ [Swedish / svenska](courses/free-courses-sv.md)\n+ [Tamil / தமிழ்](courses/free-courses-ta.md)\n+ [Telugu / తెలుగు](courses/free-courses-te.md)\n+ [Thai / ภาษาไทย](courses/free-courses-th.md)\n+ [Turkish / Türkçe](courses/free-courses-tr.md)\n+ [Ukrainian / Українська](courses/free-courses-uk.md)\n+ [Urdu / اردو](courses/free-courses-ur.md)\n+ [Vietnamese / Tiếng Việt](courses/free-courses-vi.md)\n\n\n### Interactive Programming Resources\n\n+ [Chinese / 中文](more/free-programming-interactive-tutorials-zh.md)\n+ [English](more/free-programming-interactive-tutorials-en.md)\n+ [German / Deutsch](more/free-programming-interactive-tutorials-de.md)\n+ [Japanese / 日本語](more/free-programming-interactive-tutorials-ja.md)\n+ [Russian / Русский язык](more/free-programming-interactive-tutorials-ru.md)\n\n\n### Problem Sets and Competitive Programming\n\n+ [Problem Sets](more/problem-sets-competitive-programming.md)\n\n\n### Podcast - Screencast\n\nFree Podcasts and Screencasts:\n\n+ [Arabic / al Arabiya / العربية](casts/free-podcasts-screencasts-ar.md)\n+ [Burmese / မြန်မာဘာသာ](casts/free-podcasts-screencasts-my.md)\n+ [Chinese / 中文](casts/free-podcasts-screencasts-zh.md)\n+ [Czech / čeština / český jazyk](casts/free-podcasts-screencasts-cs.md)\n+ [Dutch / Nederlands](casts/free-podcasts-screencasts-nl.md)\n+ [English](casts/free-podcasts-screencasts-en.md)\n+ [Finnish / Suomi](casts/free-podcasts-screencasts-fi.md)\n+ [French / français](casts/free-podcasts-screencasts-fr.md)\n+ [German / Deutsch](casts/free-podcasts-screencasts-de.md)\n+ [Hebrew / עברית](casts/free-podcasts-screencasts-he.md)\n+ [Indonesian / Bahasa Indonesia](casts/free-podcasts-screencasts-id.md)\n+ [Persian / Farsi (Iran) / فارسى](casts/free-podcasts-screencasts-fa_IR.md)\n+ [Polish / polski / język polski / polszczyzna](casts/free-podcasts-screencasts-pl.md)\n+ [Portuguese (Brazil)](casts/free-podcasts-screencasts-pt_BR.md)\n+ [Portuguese (Portugal)](casts/free-podcasts-screencasts-pt_PT.md)\n+ [Russian / Русский язык](casts/free-podcasts-screencasts-ru.md)\n+ [Sinhala / සිංහල](casts/free-podcasts-screencasts-si.md)\n+ [Spanish / español / castellano](casts/free-podcasts-screencasts-es.md)\n+ [Swedish / Svenska](casts/free-podcasts-screencasts-sv.md)\n+ [Turkish / Türkçe](casts/free-podcasts-screencasts-tr.md)\n+ [Ukrainian / Українська](casts/free-podcasts-screencasts-uk.md)\n\n\n### Programming Playgrounds\n\nWrite, compile, and run your code within a browser. Try it out!\n\n+ [Chinese / 中文](more/free-programming-playgrounds-zh.md)\n+ [English](more/free-programming-playgrounds.md)\n+ [German / Deutsch](more/free-programming-playgrounds-de.md)\n\n## Translations\n\nVolunteers have translated many of our Contributing, How-to, and Code of Conduct documents into languages covered by our lists.\n\n+ English\n  + [Code of Conduct](docs/CODE_OF_CONDUCT.md)\n  + [Contributing](docs/CONTRIBUTING.md)\n  + [How-to](docs/HOWTO.md)\n+ ... *[More languages](docs/README.md#translations)* ...\n\nYou might notice that there are [some missing translations here](docs/README.md#translations) - perhaps you would like to help out by [contributing a translation](docs/CONTRIBUTING.md#help-out-by-contributing-a-translation)?\n\n\n## License\n\nEach file included in this repository is licensed under the [CC BY License](LICENSE).\n"
  },
  {
    "id": 85077558,
    "name": "developer-roadmap",
    "full_name": "kamranahmedse/developer-roadmap",
    "description": "Interactive roadmaps, guides and other educational content to help developers grow in their careers.",
    "url": "https://github.com/kamranahmedse/developer-roadmap",
    "clone_url": "https://github.com/kamranahmedse/developer-roadmap.git",
    "star_count": 331442,
    "fork_count": 42369,
    "language": "TypeScript",
    "topics": [
      "computer-science",
      "roadmap",
      "developer-roadmap",
      "frontend-roadmap",
      "devops-roadmap",
      "backend-roadmap",
      "react-roadmap",
      "angular-roadmap",
      "python-roadmap",
      "go-roadmap",
      "java-roadmap",
      "dba-roadmap",
      "vue-roadmap",
      "blockchain-roadmap",
      "javascript-roadmap",
      "nodejs-roadmap",
      "qa-roadmap",
      "software-architect-roadmap"
    ],
    "last_commit_date": "2025-07-16T00:14:17+00:00",
    "created_at": "2017-03-15T13:45:52+00:00",
    "updated_at": "2025-07-16T06:06:24+00:00",
    "size": 266248,
    "default_branch": "master",
    "license": "Other",
    "readme": "<p align=\"center\">\n  <a href=\"https://roadmap.sh/\"><img src=\"public/images/brand.png\" height=\"128\"></a>\n  <h2 align=\"center\"><a href=\"https://roadmap.sh\">roadmap.sh</a></h2>\n  <p align=\"center\">Community driven roadmaps, articles and resources for developers<p>\n  <p align=\"center\">\n    <a href=\"https://roadmap.sh/roadmaps\">\n    \t<img src=\"https://img.shields.io/badge/%E2%9C%A8-Roadmaps%20-0a0a0a.svg?style=flat&colorA=0a0a0a\" alt=\"roadmaps\" />\n    </a>\n    <a href=\"https://roadmap.sh/best-practices\">\n    \t<img src=\"https://img.shields.io/badge/%E2%9C%A8-Best%20Practices-0a0a0a.svg?style=flat&colorA=0a0a0a\" alt=\"best practices\" />\n    </a>\n    <a href=\"https://roadmap.sh/questions\">\n    \t<img src=\"https://img.shields.io/badge/%E2%9C%A8-Questions-0a0a0a.svg?style=flat&colorA=0a0a0a\" alt=\"videos\" />\n    </a>\n    <a href=\"https://www.youtube.com/channel/UCA0H2KIWgWTwpTFjSxp0now?sub_confirmation=1\">\n    \t<img src=\"https://img.shields.io/badge/%E2%9C%A8-YouTube%20Channel-0a0a0a.svg?style=flat&colorA=0a0a0a\" alt=\"roadmaps\" />\n    </a>\n  </p>\n</p>\n\n<br>\n\n![](https://i.imgur.com/waxVImv.png)\n\nRoadmaps are now interactive, you can click the nodes to read more about the topics.\n\n### [View all Roadmaps](https://roadmap.sh) &nbsp;&middot;&nbsp; [Best Practices](https://roadmap.sh/best-practices) &nbsp;&middot;&nbsp; [Questions](https://roadmap.sh/questions)\n\n![](https://i.imgur.com/waxVImv.png)\n\nHere is the list of available roadmaps with more being actively worked upon.\n\n> Have a look at the [get started](https://roadmap.sh/get-started) page that might help you pick up a path.\n\n- [Frontend Roadmap](https://roadmap.sh/frontend) / [Frontend Beginner Roadmap](https://roadmap.sh/frontend?r=frontend-beginner)\n- [Backend Roadmap](https://roadmap.sh/backend) / [Backend Beginner Roadmap](https://roadmap.sh/backend?r=backend-beginner)\n- [DevOps Roadmap](https://roadmap.sh/devops) / [DevOps Beginner Roadmap](https://roadmap.sh/devops?r=devops-beginner)\n- [Full Stack Roadmap](https://roadmap.sh/full-stack)\n- [Git and GitHub](https://roadmap.sh/git-github)\n- [API Design Roadmap](https://roadmap.sh/api-design)\n- [Computer Science Roadmap](https://roadmap.sh/computer-science)\n- [Data Structures and Algorithms Roadmap](https://roadmap.sh/datastructures-and-algorithms)\n- [AI and Data Scientist Roadmap](https://roadmap.sh/ai-data-scientist)\n- [AI Engineer Roadmap](https://roadmap.sh/ai-engineer)\n- [AWS Roadmap](https://roadmap.sh/aws)\n- [Cloudflare Roadmap](https://roadmap.sh/cloudflare)\n- [Linux Roadmap](https://roadmap.sh/linux)\n- [Terraform Roadmap](https://roadmap.sh/terraform)\n- [Data Analyst Roadmap](https://roadmap.sh/data-analyst)\n- [MLOps Roadmap](https://roadmap.sh/mlops)\n- [Product Manager Roadmap](https://roadmap.sh/product-manager)\n- [Engineering Manager Roadmap](https://roadmap.sh/engineering-manager)\n- [QA Roadmap](https://roadmap.sh/qa)\n- [Python Roadmap](https://roadmap.sh/python)\n- [Software Architect Roadmap](https://roadmap.sh/software-architect)\n- [Game Developer Roadmap](https://roadmap.sh/game-developer) / [Server Side Game Developer](https://roadmap.sh/server-side-game-developer)\n- [Software Design and Architecture Roadmap](https://roadmap.sh/software-design-architecture)\n- [JavaScript Roadmap](https://roadmap.sh/javascript)\n- [TypeScript Roadmap](https://roadmap.sh/typescript)\n- [C++ Roadmap](https://roadmap.sh/cpp)\n- [React Roadmap](https://roadmap.sh/react)\n- [React Native Roadmap](https://roadmap.sh/react-native)\n- [Vue Roadmap](https://roadmap.sh/vue)\n- [Angular Roadmap](https://roadmap.sh/angular)\n- [Node.js Roadmap](https://roadmap.sh/nodejs)\n- [PHP Roadmap](https://roadmap.sh/php)\n- [GraphQL Roadmap](https://roadmap.sh/graphql)\n- [Android Roadmap](https://roadmap.sh/android)\n- [iOS Roadmap](https://roadmap.sh/ios)\n- [Flutter Roadmap](https://roadmap.sh/flutter)\n- [Go Roadmap](https://roadmap.sh/golang)\n- [Rust Roadmap](https://roadmap.sh/rust)\n- [Java Roadmap](https://roadmap.sh/java)\n- [Spring Boot Roadmap](https://roadmap.sh/spring-boot)\n- [Design System Roadmap](https://roadmap.sh/design-system)\n- [PostgreSQL Roadmap](https://roadmap.sh/postgresql-dba)\n- [SQL Roadmap](https://roadmap.sh/sql)\n- [Redis Roadmap](https://roadmap.sh/redis)\n- [Blockchain Roadmap](https://roadmap.sh/blockchain)\n- [ASP.NET Core Roadmap](https://roadmap.sh/aspnet-core)\n- [System Design Roadmap](https://roadmap.sh/system-design)\n- [Kubernetes Roadmap](https://roadmap.sh/kubernetes)\n- [Cyber Security Roadmap](https://roadmap.sh/cyber-security)\n- [MongoDB Roadmap](https://roadmap.sh/mongodb)\n- [UX Design Roadmap](https://roadmap.sh/ux-design)\n- [Docker Roadmap](https://roadmap.sh/docker)\n- [Prompt Engineering Roadmap](https://roadmap.sh/prompt-engineering)\n- [Technical Writer Roadmap](https://roadmap.sh/technical-writer)\n- [DevRel Engineer Roadmap](https://roadmap.sh/devrel)\n- [AI Red Teaming Roadmap](https://roadmap.sh/ai-red-teaming)\n- [AI Agents Roadmap](https://roadmap.sh/ai-agents)\n\nThere are also interactive best practices:\n\n- [Backend Performance Best Practices](https://roadmap.sh/best-practices/backend-performance)\n- [Frontend Performance Best Practices](https://roadmap.sh/best-practices/frontend-performance)\n- [Code Review Best Practices](https://roadmap.sh/best-practices/code-review)\n- [API Security Best Practices](https://roadmap.sh/best-practices/api-security)\n- [AWS Best Practices](https://roadmap.sh/best-practices/aws)\n\n..and questions to help you test, rate and improve your knowledge\n\n- [JavaScript Questions](https://roadmap.sh/questions/javascript)\n- [Node.js Questions](https://roadmap.sh/questions/nodejs)\n- [React Questions](https://roadmap.sh/questions/react)\n- [Backend Questions](https://roadmap.sh/questions/backend)\n- [Frontend Questions](https://roadmap.sh/questions/frontend)\n\n![](https://i.imgur.com/waxVImv.png)\n\n## Share with the community\n\nPlease consider sharing a post about [roadmap.sh](https://roadmap.sh) and the value it provides. It really does help!\n\n[![GitHub Repo stars](https://img.shields.io/badge/share%20on-reddit-red?logo=reddit)](https://reddit.com/submit?url=https://roadmap.sh&title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers)\n[![GitHub Repo stars](https://img.shields.io/badge/share%20on-hacker%20news-orange?logo=ycombinator)](https://news.ycombinator.com/submitlink?u=https://roadmap.sh)\n[![GitHub Repo stars](https://img.shields.io/badge/share%20on-twitter-03A9F4?logo=twitter)](https://twitter.com/share?url=https://roadmap.sh&text=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers)\n[![GitHub Repo stars](https://img.shields.io/badge/share%20on-facebook-1976D2?logo=facebook)](https://www.facebook.com/sharer/sharer.php?u=https://roadmap.sh)\n[![GitHub Repo stars](https://img.shields.io/badge/share%20on-linkedin-3949AB?logo=linkedin)](https://www.linkedin.com/shareArticle?url=https://roadmap.sh&title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers)\n\n## Development\n\nClone the repository, install the dependencies and start the application\n\n```bash\ngit clone git@github.com:kamranahmedse/developer-roadmap.git\ncd developer-roadmap\nnpm install\nnpm run dev\n```\n\nNote: use the `depth` parameter to reduce the clone size and speed up the clone.\n\n```sh\ngit clone --depth=1 https://github.com/kamranahmedse/developer-roadmap.git\n```\n\n## Contribution\n\n> Have a look at [contribution docs](./contributing.md) for how to update any of the roadmaps\n\n- Add content to roadmaps\n- Add new roadmaps\n- Suggest changes to existing roadmaps\n- Discuss ideas in issues\n- Spread the word\n\n## Thanks to all contributors ❤\n\n <a href = \"https://github.com/kamranahmedse/developer-roadmap/graphs/contributors\">\n   <img src = \"https://contrib.rocks/image?repo=kamranahmedse/developer-roadmap\"/>\n </a>\n\n## License\n\nHave a look at the [license file](./license) for details\n"
  },
  {
    "id": 60493101,
    "name": "coding-interview-university",
    "full_name": "jwasham/coding-interview-university",
    "description": "A complete computer science study plan to become a software engineer.",
    "url": "https://github.com/jwasham/coding-interview-university",
    "clone_url": "https://github.com/jwasham/coding-interview-university.git",
    "star_count": 322783,
    "fork_count": 79610,
    "language": "No language available",
    "topics": [
      "computer-science",
      "interview",
      "programming-interviews",
      "study-plan",
      "data-structures",
      "algorithms",
      "software-engineering",
      "algorithm",
      "coding-interviews",
      "interview-prep",
      "coding-interview",
      "interview-preparation"
    ],
    "last_commit_date": "2024-12-05T23:47:30+00:00",
    "created_at": "2016-06-06T02:34:12+00:00",
    "updated_at": "2025-07-16T06:23:49+00:00",
    "size": 22600,
    "default_branch": "main",
    "license": "Creative Commons Attribution Share Alike 4.0 International",
    "readme": "# Coding Interview University\n\n> I originally created this as a short to-do list of study topics for becoming a software engineer,\n> but it grew to the large list you see today. After going through this study plan, [I got hired\n> as a Software Development Engineer at Amazon](https://startupnextdoor.com/ive-been-acquired-by-amazon/?src=ciu)!\n> You probably won't have to study as much as I did. Anyway, everything you need is here.\n>\n> I studied about 8-12 hours a day, for several months. This is my story: [Why I studied full-time for 8 months for a Google interview](https://medium.freecodecamp.org/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13)\n>\n> **Please Note:** You won't need to study as much as I did. I wasted a lot of time on things I didn't need to know. More info about that is below. I'll help you get there without wasting your precious time.\n>\n> The items listed here will prepare you well for a technical interview at just about any software company,\n> including the giants: Amazon, Facebook, Google, and Microsoft.\n>\n> *Best of luck to you!*\n\n<details>\n<summary>Translations:</summary>\n\n- [Bahasa Indonesia](translations/README-id.md)\n- [Bulgarian](translations/README-bg.md)\n- [Español](translations/README-es.md)\n- [German](translations/README-de.md)\n- [Japanese (日本語)](translations/README-ja.md)\n- [Marathi](translations/README-mr.md)\n- [Polish](translations/README-pl.md)\n- [Português Brasileiro](translations/README-ptbr.md)\n- [Russian](translations/README-ru.md)\n- [Tiếng Việt - Vietnamese](translations/README-vi.md)\n- [Urdu - اردو](translations/README-ur.md)\n- [Uzbek](translations/README-uz.md)\n- [বাংলা - Bangla](translations/README-bn.md)\n- [ខ្មែរ - Khmer](translations/README-kh.md)\n- [简体中文](translations/README-cn.md)\n- [繁體中文](translations/README-tw.md)\n</details>\n\n<details>\n<summary>Translations in progress:</summary>\n\n- [Afrikaans](https://github.com/jwasham/coding-interview-university/issues/1164)\n- [Arabic](https://github.com/jwasham/coding-interview-university/issues/98)\n- [French](https://github.com/jwasham/coding-interview-university/issues/89)\n- [Greek](https://github.com/jwasham/coding-interview-university/issues/166)\n- [Italian](https://github.com/jwasham/coding-interview-university/issues/1030)\n- [Korean(한국어)](https://github.com/jwasham/coding-interview-university/issues/118)\n- [Malayalam](https://github.com/jwasham/coding-interview-university/issues/239)\n- [Persian - Farsi](https://github.com/jwasham/coding-interview-university/issues/186)\n- [Telugu](https://github.com/jwasham/coding-interview-university/issues/117)\n- [Thai](https://github.com/jwasham/coding-interview-university/issues/156)\n- [Turkish](https://github.com/jwasham/coding-interview-university/issues/90)\n- [Українська](https://github.com/jwasham/coding-interview-university/issues/106)\n- [עברית](https://github.com/jwasham/coding-interview-university/issues/82)\n- [हिन्दी](https://github.com/jwasham/coding-interview-university/issues/81)\n</details>\n\n\n## What is it?\n\n![Coding at the whiteboard - from HBO's Silicon Valley](https://d3j2pkmjtin6ou.cloudfront.net/coding-at-the-whiteboard-silicon-valley.png)\n\nThis is my multi-month study plan for becoming a software engineer for a large company.\n\n**Required:**\n* A little experience with coding (variables, loops, methods/functions, etc)\n* Patience\n* Time\n\nNote this is a study plan for **software engineering**, not frontend engineering or full-stack development. There are really\nsuper roadmaps and coursework for those career paths elsewhere (see https://roadmap.sh/ for more info).\n\nThere is a lot to learn in a university Computer Science program, but only knowing about 75% is good enough for an interview, so that's what I cover here.\nFor a complete CS self-taught program, the resources for my study plan have been included in Kamran Ahmed's Computer Science Roadmap: https://roadmap.sh/computer-science\n\n---\n\n## Table of Contents\n\n### The Study Plan\n\n- [What is it?](#what-is-it)\n- [Why use it?](#why-use-it)\n- [How to use it](#how-to-use-it)\n- [Don't feel you aren't smart enough](#dont-feel-you-arent-smart-enough)\n- [A Note About Video Resources](#a-note-about-video-resources)\n- [Choose a Programming Language](#choose-a-programming-language)\n- [Books for Data Structures and Algorithms](#books-for-data-structures-and-algorithms)\n- [Interview Prep Books](#interview-prep-books)\n- [Don't Make My Mistakes](#dont-make-my-mistakes)\n- [What you Won't See Covered](#what-you-wont-see-covered)\n- [The Daily Plan](#the-daily-plan)\n- [Coding Question Practice](#coding-question-practice)\n- [Coding Problems](#coding-problems)\n\n### Topics of Study\n\n- [Algorithmic complexity / Big-O / Asymptotic analysis](#algorithmic-complexity--big-o--asymptotic-analysis)\n- [Data Structures](#data-structures)\n    - [Arrays](#arrays)\n    - [Linked Lists](#linked-lists)\n    - [Stack](#stack)\n    - [Queue](#queue)\n    - [Hash table](#hash-table)\n- [More Knowledge](#more-knowledge)\n    - [Binary search](#binary-search)\n    - [Bitwise operations](#bitwise-operations)\n- [Trees](#trees)\n    - [Trees - Intro](#trees---intro)\n    - [Binary search trees: BSTs](#binary-search-trees-bsts)\n    - [Heap / Priority Queue / Binary Heap](#heap--priority-queue--binary-heap)\n    - balanced search trees (general concept, not details)\n    - traversals: preorder, inorder, postorder, BFS, DFS\n- [Sorting](#sorting)\n    - selection\n    - insertion\n    - heapsort\n    - quicksort\n    - mergesort\n- [Graphs](#graphs)\n    - directed\n    - undirected\n    - adjacency matrix\n    - adjacency list\n    - traversals: BFS, DFS\n- [Even More Knowledge](#even-more-knowledge)\n    - [Recursion](#recursion)\n    - [Dynamic Programming](#dynamic-programming)\n    - [Design Patterns](#design-patterns)\n    - [Combinatorics (n choose k) & Probability](#combinatorics-n-choose-k--probability)\n    - [NP, NP-Complete and Approximation Algorithms](#np-np-complete-and-approximation-algorithms)\n    - [How computers process a program](#how-computers-process-a-program)\n    - [Caches](#caches)\n    - [Processes and Threads](#processes-and-threads)\n    - [Testing](#testing)\n    - [String searching & manipulations](#string-searching--manipulations)\n    - [Tries](#tries)\n    - [Floating Point Numbers](#floating-point-numbers)\n    - [Unicode](#unicode)\n    - [Endianness](#endianness)\n    - [Networking](#networking)\n- [Final Review](#final-review)\n\n### Getting the Job\n\n- [Update Your Resume](#update-your-resume)\n- [Find a Job](#find-a-job)\n- [Interview Process & General Interview Prep](#interview-process--general-interview-prep)\n- [Be thinking of for when the interview comes](#be-thinking-of-for-when-the-interview-comes)\n- [Have questions for the interviewer](#have-questions-for-the-interviewer)\n- [Once You've Got The Job](#once-youve-got-the-job)\n\n**---------------- Everything below this point is optional ----------------**\n\n### Optional Extra Topics & Resources\n\n- [Additional Books](#additional-books)\n- [System Design, Scalability, Data Handling](#system-design-scalability-data-handling) (if you have 4+ years experience)\n- [Additional Learning](#additional-learning)\n    - [Compilers](#compilers)\n    - [Emacs and vi(m)](#emacs-and-vim)\n    - [Unix command line tools](#unix-command-line-tools)\n    - [Information theory](#information-theory-videos)\n    - [Parity & Hamming Code](#parity--hamming-code-videos)\n    - [Entropy](#entropy)\n    - [Cryptography](#cryptography)\n    - [Compression](#compression)\n    - [Computer Security](#computer-security)\n    - [Garbage collection](#garbage-collection)\n    - [Parallel Programming](#parallel-programming)\n    - [Messaging, Serialization, and Queueing Systems](#messaging-serialization-and-queueing-systems)\n    - [A*](#a)\n    - [Fast Fourier Transform](#fast-fourier-transform)\n    - [Bloom Filter](#bloom-filter)\n    - [HyperLogLog](#hyperloglog)\n    - [Locality-Sensitive Hashing](#locality-sensitive-hashing)\n    - [van Emde Boas Trees](#van-emde-boas-trees)\n    - [Augmented Data Structures](#augmented-data-structures)\n    - [Balanced search trees](#balanced-search-trees)\n        - AVL trees\n        - Splay trees\n        - Red/black trees\n        - 2-3 search trees\n        - 2-3-4 Trees (aka 2-4 trees)\n        - N-ary (K-ary, M-ary) trees\n        - B-Trees\n    - [k-D Trees](#k-d-trees)\n    - [Skip lists](#skip-lists)\n    - [Network Flows](#network-flows)\n    - [Disjoint Sets & Union Find](#disjoint-sets--union-find)\n    - [Math for Fast Processing](#math-for-fast-processing)\n    - [Treap](#treap)\n    - [Linear Programming](#linear-programming-videos)\n    - [Geometry, Convex hull](#geometry-convex-hull-videos)\n    - [Discrete math](#discrete-math)\n- [Additional Detail on Some Subjects](#additional-detail-on-some-subjects)\n- [Video Series](#video-series)\n- [Computer Science Courses](#computer-science-courses)\n- [Papers](#papers)\n\n---\n\n## Why use it?\n\nIf you want to work as a software engineer for a large company, these are the things you have to know.\n\nIf you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.\n\nWhen I started this project, I didn't know a stack from a heap, didn't know Big-O anything, or anything about trees, or how to\ntraverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.\nEvery data structure I had ever used was built into the language, and I didn't know how they worked\nunder the hood at all. I never had to manage memory unless a process I was running would give an \"out of\nmemory\" error, and then I'd have to find a workaround. I used a few multidimensional arrays in my life and\nthousands of associative arrays, but I never created data structures from scratch.\n\nIt's a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.\n\n**[⬆ back to top](#table-of-contents)**\n\n## How to use it\n\nEverything below is an outline, and you should tackle the items in order from top to bottom.\n\nI'm using GitHub's special markdown flavor, including tasks lists to track progress.\n  - [More about GitHub-flavored markdown](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)\n\n### If you don't want to use git\n\nOn this page, click the Code button near the top, then click \"Download ZIP\". Unzip the file and you can work with the text files.\n\nIf you're open in a code editor that understands markdown, you'll see everything formatted nicely.\n\n![How to download the repo as a zip file](https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png)\n\n### If you're comfortable with git\n\nCreate a new branch so you can check items like this, just put an x in the brackets: [x]\n\n1. ***Fork the GitHub repo:*** `https://github.com/jwasham/coding-interview-university` by clicking on the Fork button.\n\n    ![Fork the GitHub repo](https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png)\n\n1. Clone to your local repo:\n\n    ```bash\n    git clone https://github.com/<YOUR_GITHUB_USERNAME>/coding-interview-university.git\n    cd coding-interview-university\n    git remote add upstream https://github.com/jwasham/coding-interview-university.git\n    git remote set-url --push upstream DISABLE  # so that you don't push your personal progress back to the original repo\n    ```\n\n1. Mark all boxes with X after you completed your changes:\n\n    ```bash\n    git commit -am \"Marked personal progress\"\n    git pull upstream main  # keep your fork up-to-date with changes from the original repo\n\n    git push # just pushes to your fork\n    ```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Don't feel you aren't smart enough\n\n- Successful software engineers are smart, but many have an insecurity that they aren't smart enough.\n- The following videos may help you overcome this insecurity:\n    - [The myth of the Genius Programmer](https://www.youtube.com/watch?v=0SARbwvhupQ)\n    - [It's Dangerous to Go Alone: Battling the Invisible Monsters in Tech](https://www.youtube.com/watch?v=1i8ylq4j_EY)\n\n**[⬆ back to top](#table-of-contents)**\n\n## A Note About Video Resources\n\nSome videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.\nSometimes the classes are not in session so you have to wait a couple of months, so you have no access.\n\nIt would be great to replace the online course resources with free and always-available public sources,\nsuch as YouTube videos (preferably university lectures), so that you people can study these anytime,\nnot just when a specific online course is in session.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Choose a Programming Language\n\nYou'll need to choose a programming language for the coding interviews you do,\nbut you'll also need to find a language that you can use to study computer science concepts.\n\nPreferably the language would be the same, so that you only need to be proficient in one.\n\n### For this Study Plan\n\nWhen I did the study plan, I used 2 languages for most of it: C and Python\n\n* C: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures\n    and algorithms in your bones. In higher-level languages like Python or Java, these are hidden from you. In day-to-day work, that's terrific,\n    but when you're learning how these low-level data structures are built, it's great to feel close to the metal.\n    - C is everywhere. You'll see examples in books, lectures, videos, *everywhere* while you're studying.\n    - [The C Programming Language, 2nd Edition](https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628)\n        - This is a short book, but it will give you a great handle on the C language and if you practice it a little\n            you'll quickly get proficient. Understanding C helps you understand how programs and memory work.\n        - You don't need to go super deep in the book (or even finish it). Just get to where you're comfortable reading and writing in C.\n* Python: Modern and very expressive, I learned it because it's just super useful and also allows me to write less code in an interview.\n\nThis is my preference. You do what you like, of course.\n\nYou may not need it, but here are some sites for learning a new language:\n- [Exercism](https://exercism.org/tracks)\n- [Codewars](http://www.codewars.com)\n- [HackerEarth](https://www.hackerearth.com/for-developers/)\n- [Scaler Topics (Java, C++)](https://www.scaler.com/topics/)\n- [Programiz PRO Community Challenges)](https://programiz.pro/)\n\n### For your Coding Interview\n\nYou can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:\n\n- C++\n- Java\n- Python\n\nYou could also use these, but read around first. There may be caveats:\n\n- JavaScript\n- Ruby\n\nHere is an article I wrote about choosing a language for the interview:\n[Pick One Language for the Coding Interview](https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/).\nThis is the original article my post was based on: [Choosing a Programming Language for Interviews](https://web.archive.org/web/20210516054124/http://blog.codingforinterviews.com/best-programming-language-jobs/)\n\nYou need to be very comfortable in the language and be knowledgeable.\n\nRead more about choices:\n- [Choose the Right Language for Your Coding Interview](http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/)\n\n[See language-specific resources here](programming-language-resources.md)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Books for Data Structures and Algorithms\n\nThis book will form your foundation for computer science.\n\nJust choose one, in a language that you will be comfortable with. You'll be doing a lot of reading and coding.\n\n### Python\n\n- [Coding Interview Patterns: Nail Your Next Coding Interview](https://geni.us/q7svoz) (**Main Recommendation**)\n    - An insider’s perspective on what interviewers are truly looking for and why.\n    - 101 real coding interview problems with detailed solutions.\n    - Intuitive explanations that guide you through each problem as if you were solving it in a live interview.\n    - 1000+ diagrams to illustrate key concepts and patterns.\t\n\n### C\n\n- [Algorithms in C, Parts 1-5 (Bundle), 3rd Edition](https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080)\n    - Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms\n\n### Java\n\nYour choice:\n\n- Goodrich, Tamassia, Goldwasser\n    - [Data Structures and Algorithms in Java](https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/)\n- Sedgewick and Wayne:\n    - [Algorithms](https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/)\n    - Free Coursera course that covers the book (taught by the authors!):\n        - [Algorithms I](https://www.coursera.org/learn/algorithms-part1)\n        - [Algorithms II](https://www.coursera.org/learn/algorithms-part2)\n\n### C++\n\nYour choice:\n\n- Goodrich, Tamassia, and Mount\n    - [Data Structures and Algorithms in C++, 2nd Edition](https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275)\n- Sedgewick and Wayne\n    - [Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching](https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/)\n    - [Algorithms in C++ Part 5: Graph Algorithms](https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Interview Prep Books\n\nHere are some recommended books to supplement your learning.\n\n- [Coding Interview Patterns: Nail Your Next Coding Interview](https://geni.us/q7svoz)\n\n- [Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition](https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/)\n    - Answers in C++ and Java\n    - This is a good warm-up for Cracking the Coding Interview\n    - Not too difficult. Most problems may be easier than what you'll see in an interview (from what I've read)\n\n- [Cracking the Coding Interview, 6th Edition](http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/)\n    - answers in Java\n\n### If you have tons of extra time:\n\nChoose one:\n\n- [Elements of Programming Interviews (C++ version)](https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836)\n- [Elements of Programming Interviews in Python](https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/)\n- [Elements of Programming Interviews (Java version)](https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/)\n        - [Companion Project - Method Stub and Test Cases for Every Problem in the Book](https://github.com/gardncl/elements-of-programming-interviews)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Don't Make My Mistakes\n\nThis list grew over many months, and yes, it got out of hand.\n\nHere are some mistakes I made so you'll have a better experience. And you'll save months of time.\n\n### 1. You Won't Remember it All\n\nI watched hours of videos and took copious notes, and months later there was much I didn't remember. I spent 3 days going\nthrough my notes and making flashcards, so I could review. I didn't need all of that knowledge.\n\nPlease, read so you won't make my mistakes:\n\n[Retaining Computer Science Knowledge](https://startupnextdoor.com/retaining-computer-science-knowledge/).\n\n### 2. Use Flashcards\n\nTo solve the problem, I made a little flashcard site where I could add flashcards of 2 types: general and code.\nEach card has a different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.\n\nMake your own for free:\n\n- [Flashcards site repo](https://github.com/jwasham/computer-science-flash-cards)\n\n**I DON'T RECOMMEND using my flashcards.** There are too many and most of them are trivia that you don't need.\n\nBut if you don't want to listen to me, here you go:\n- [My flash cards database (1200 cards)](https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db):\n- [My flash cards database (extreme - 1800 cards)](https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db):\n\nKeep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.\nIt's way too much for what's required.\n\n**Note on flashcards:** The first time you recognize you know the answer, don't mark it as known. You have to see the\nsame card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in\nyour brain.\n\nAn alternative to using my flashcard site is [Anki](http://ankisrs.net/), which has been recommended to me numerous times.\nIt uses a repetition system to help you remember. It's user-friendly, available on all platforms, and has a cloud sync system.\nIt costs $25 on iOS but is free on other platforms.\n\nMy flashcard database in Anki format: https://ankiweb.net/shared/info/25173560 (thanks [@xiewenya](https://github.com/xiewenya)).\n\nSome students have mentioned formatting issues with white space that can be fixed by doing the following: open the deck, edit the card, click cards, select the \"styling\" radio button, and add the member \"white-space: pre;\" to the card class.\n\n### 3. Do Coding Interview Questions While You're Learning\n\nTHIS IS VERY IMPORTANT.\n\nStart doing coding interview questions while you're learning data structures and algorithms.\n\nYou need to apply what you're learning to solve problems, or you'll forget. I made this mistake.\n\nOnce you've learned a topic, and feel somewhat comfortable with it, for example, **linked lists**:\n1. Open one of the [coding interview books](#interview-prep-books) (or coding problem websites, listed below)\n1. Do 2 or 3 questions regarding linked lists.\n1. Move on to the next learning topic.\n1. Later, go back and do another 2 or 3 linked list problems.\n1. Do this with each new topic you learn.\n\n**Keep doing problems while you're learning all this stuff, not after.**\n\nYou're not being hired for knowledge, but how you apply the knowledge.\n\nThere are many resources for this, listed below. Keep going.\n\n### 4. Focus\n\nThere are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music\nwithout lyrics and you'll be able to focus pretty well.\n\n**[⬆ back to top](#table-of-contents)**\n\n## What you won't see covered\n\nThese are prevalent technologies but not part of this study plan:\n\n- Javascript\n- HTML, CSS, and other front-end technologies\n- SQL\n\n**[⬆ back to top](#table-of-contents)**\n\n## The Daily Plan\n\nThis course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.\n\nEach day, take the next subject in the list, watch some videos about that subject, and then write an implementation\nof that data structure or algorithm in the language you chose for this course.\n\nYou can see my code here:\n - [C](https://github.com/jwasham/practice-c)\n - [C++](https://github.com/jwasham/practice-cpp)\n - [Python](https://github.com/jwasham/practice-python)\n\nYou don't need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Coding Question Practice\n\n    Why is this here? I'm not ready to interview.\n\n[Then go back and read this.](#3-do-coding-interview-questions-while-youre-learning)\n\nWhy you need to practice doing programming problems:\n- Problem recognition, and where the right data structures and algorithms fit in\n- Gathering requirements for the problem\n- Talking your way through the problem like you will in the interview\n- Coding on a whiteboard or paper, not a computer\n- Coming up with time and space complexity for your solutions (see Big-O below)\n- Testing your solutions\n\nThere is a great intro for methodical, communicative problem-solving in an interview. You'll get this from the programming\ninterview books, too, but I found this outstanding:\n[Algorithm design canvas](http://www.hiredintech.com/algorithm-design/)\n\nWrite code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.\n\nIf you don't have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.\nThis is my \"sofa whiteboard\". I added the pen in the photo just for scale. If you use a pen, you'll wish you could erase.\nGets messy quickly. **I use a pencil and eraser.**\n\n![my sofa whiteboard](https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg)\n\n**Coding question practice is not about memorizing answers to programming problems.**\n\n**[⬆ back to top](#table-of-contents)**\n\n## Coding Problems\n\nDon't forget your key coding interview books [here](#interview-prep-books).\n\nSolving Problems:\n- [How to Find a Solution](https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution)\n- [How to Dissect a Topcoder Problem Statement](https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content)\n\nCoding Interview Question Videos:\n- [IDeserve (88 videos)](https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI)\n- [Tushar Roy (5 playlists)](https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&view=50&sort=dd)\n    - Super for walkthroughs of problem solutions\n- [Nick White - LeetCode Solutions (187 Videos)](https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-)\n    - Good explanations of the solution and the code\n    - You can watch several in a short time\n- [FisherCoder - LeetCode Solutions](https://youtube.com/FisherCoder)\n\nChallenge/Practice sites:\n- [LeetCode](https://leetcode.com/)\n    - My favorite coding problem site. It's worth the subscription money for the 1-2 months you'll likely be preparing.\n    - See Nick White and FisherCoder Videos above for code walk-throughs.\n- [HackerRank](https://www.hackerrank.com/)\n- [TopCoder](https://www.topcoder.com/)\n- [Codeforces](https://codeforces.com/)\n- [Codility](https://codility.com/programmers/)\n- [Geeks for Geeks](https://practice.geeksforgeeks.org/explore/?page=1)\n- [AlgoExpert](https://www.algoexpert.io/product)\n    - Created by Google engineers, this is also an excellent resource to hone your skills.\n- [Project Euler](https://projecteuler.net/)\n    - very math-focused, and not really suited for coding interviews\n\n**[⬆ back to top](#table-of-contents)**\n\n## Let's Get Started\n\nAlright, enough talk, let's learn!\n\nBut don't forget to do coding problems from above while you learn!\n\n## Algorithmic complexity / Big-O / Asymptotic analysis\n\n- Nothing to implement here, you're just watching videos and taking notes! Yay!\n- There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.\n- Don't worry if you don't understand all the math behind it.\n- You just need to understand how to express the complexity of an algorithm in terms of Big-O.\n- [ ] [Harvard CS50 - Asymptotic Notation (video)](https://www.youtube.com/watch?v=iOq5kSKqeR4)\n- [ ] [Big O Notations (general quick tutorial) (video)](https://www.youtube.com/watch?v=V6mKVRU1evU)\n- [ ] [Big O Notation (and Omega and Theta) - best mathematical explanation (video)](https://www.youtube.com/watch?v=ei-A_wy5Yxw&index=2&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN)\n- [ ] [Skiena (video)](https://www.youtube.com/watch?v=z1mkCe3kVUA)\n- [ ] [UC Berkeley Big O (video)](https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98)\n- [ ] [Amortized Analysis (video)](https://www.youtube.com/watch?v=B3SpQZaAZP4&index=10&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN)\n- [ ] TopCoder (includes recurrence relations and master theorem):\n    - [Computational Complexity: Section 1](https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one)\n    - [Computational Complexity: Section 2](https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two)\n- [ ] [Cheat sheet](http://bigocheatsheet.com/)\n- [ ] [[Review] Analyzing Algorithms (playlist) in 18 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZMxejjIyFHWa-4nKg6sdoIv)\n\nWell, that's about enough of that.\n\nWhen you go through \"Cracking the Coding Interview\", there is a chapter on this, and at the end there is a quiz to see\nif you can identify the runtime complexity of different algorithms. It's a super review and test.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Data Structures\n\n- ### Arrays\n    - [ ] About Arrays:\n    \t- [Arrays CS50 Harvard University](https://www.youtube.com/watch?v=tI_tIZFyKBw&t=3009s)\n        - [Arrays (video)](https://www.coursera.org/lecture/data-structures/arrays-OsBSF)\n        - [UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)](https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE) (Start watching from 15m 32s)\n        - [Dynamic Arrays (video)](https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV)\n        - [Jagged Arrays (video)](https://www.youtube.com/watch?v=1jtrQqYpt7g)\n    - [ ] Implement a vector (mutable array with automatic resizing):\n        - [ ] Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.\n        - [ ] New raw data array with allocated memory\n            - can allocate int array under the hood, just not use its features\n            - start with 16, or if the starting number is greater, use power of 2 - 16, 32, 64, 128\n        - [ ] size() - number of items\n        - [ ] capacity() - number of items it can hold\n        - [ ] is_empty()\n        - [ ] at(index) - returns the item at a given index, blows up if index out of bounds\n        - [ ] push(item)\n        - [ ] insert(index, item) - inserts item at index, shifts that index's value and trailing elements to the right\n        - [ ] prepend(item) - can use insert above at index 0\n        - [ ] pop() - remove from end, return value\n        - [ ] delete(index) - delete item at index, shifting all trailing elements left\n        - [ ] remove(item) - looks for value and removes index holding it (even if in multiple places)\n        - [ ] find(item) - looks for value and returns first index with that value, -1 if not found\n        - [ ] resize(new_capacity) // private function\n            - when you reach capacity, resize to double the size\n            - when popping an item, if the size is 1/4 of capacity, resize to half\n    - [ ] Time\n        - O(1) to add/remove at end (amortized for allocations for more space), index, or update\n        - O(n) to insert/remove elsewhere\n    - [ ] Space\n        - contiguous in memory, so proximity helps performance\n        - space needed = (array capacity, which is >= n) * size of item, but even if 2n, still O(n)\n\n- ### Linked Lists\n    - [ ] Description:\n    \t- [ ] [Linked Lists CS50 Harvard University](https://www.youtube.com/watch?v=2T-A_GFuoTo&t=650s) - this builds the intuition.\n        - [ ] [Singly Linked Lists (video)](https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK)\n        - [ ] [CS 61B - Linked Lists 1 (video)](https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0)\n        - [ ] [CS 61B - Linked Lists 2 (video)](https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w)\n        - [ ] [[Review] Linked lists in 4 minutes (video)](https://youtu.be/F8AbOfQwl1c)\n    - [ ] [C Code (video)](https://www.youtube.com/watch?v=QN6FPiD0Gzo)\n            - not the whole video, just portions about Node struct and memory allocation\n    - [ ] Linked List vs Arrays:\n        - [Core Linked Lists Vs Arrays (video)](https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9)\n        - [In The Real World Linked Lists Vs Arrays (video)](https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd)\n    - [ ] [Why you should avoid linked lists (video)](https://www.youtube.com/watch?v=YQs6IC-vgmo)\n    - [ ] Gotcha: you need pointer to pointer knowledge:\n        (for when you pass a pointer to a function that may change the address where that pointer points)\n        This page is just to get a grasp on ptr to ptr. I don't recommend this list traversal style. Readability and maintainability suffer due to cleverness.\n        - [Pointers to Pointers](https://www.eskimo.com/~scs/cclass/int/sx8.html)\n    - [ ] Implement (I did with tail pointer & without):\n        - [ ] size() - returns the number of data elements in the list\n        - [ ] empty() - bool returns true if empty\n        - [ ] value_at(index) - returns the value of the nth item (starting at 0 for first)\n        - [ ] push_front(value) - adds an item to the front of the list\n        - [ ] pop_front() - remove the front item and return its value\n        - [ ] push_back(value) - adds an item at the end\n        - [ ] pop_back() - removes end item and returns its value\n        - [ ] front() - get the value of the front item\n        - [ ] back() - get the value of the end item\n        - [ ] insert(index, value) - insert value at index, so the current item at that index is pointed to by the new item at the index\n        - [ ] erase(index) - removes node at given index\n        - [ ] value_n_from_end(n) - returns the value of the node at the nth position from the end of the list\n        - [ ] reverse() - reverses the list\n        - [ ] remove_value(value) - removes the first item in the list with this value\n    - [ ] Doubly-linked List\n        - [Description (video)](https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD)\n        - No need to implement\n\n- ### Stack\n    - [ ] [Stacks (video)](https://www.coursera.org/lecture/data-structures/stacks-UdKzQ)\n    - [ ] [[Review] Stacks in 3 minutes (video)](https://youtu.be/KcT3aVgrrpU)\n    - [ ] Will not implement. Implementing with the array is trivial\n\n- ### Queue\n    - [ ] [Queue (video)](https://www.coursera.org/lecture/data-structures/queues-EShpq)\n    - [ ] [Circular buffer/FIFO](https://en.wikipedia.org/wiki/Circular_buffer)\n    - [ ] [[Review] Queues in 3 minutes (video)](https://youtu.be/D6gu-_tmEpQ)\n    - [ ] Implement using linked-list, with tail pointer:\n        - enqueue(value) - adds value at a position at the tail\n        - dequeue() - returns value and removes least recently added element (front)\n        - empty()\n    - [ ] Implement using a fixed-sized array:\n        - enqueue(value) - adds item at end of available storage\n        - dequeue() - returns value and removes least recently added element\n        - empty()\n        - full()\n    - [ ] Cost:\n        - a bad implementation using a linked list where you enqueue at the head and dequeue at the tail would be O(n)\n            because you'd need the next to last element, causing a full traversal of each dequeue\n        - enqueue: O(1) (amortized, linked list and array [probing])\n        - dequeue: O(1) (linked list and array)\n        - empty: O(1) (linked list and array)\n\n- ### Hash table\n    - [ ] Videos:\n        - [ ] [Hashing with Chaining (video)](https://www.youtube.com/watch?v=0M_kIqhwbFo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=8)\n        - [ ] [Table Doubling, Karp-Rabin (video)](https://www.youtube.com/watch?v=BRO7mVIFt08&index=9&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n        - [ ] [Open Addressing, Cryptographic Hashing (video)](https://www.youtube.com/watch?v=rvdJDijO2Ro&index=10&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n        - [ ] [PyCon 2010: The Mighty Dictionary (video)](https://www.youtube.com/watch?v=C4Kc8xzcA68)\n        - [ ] [PyCon 2017: The Dictionary Even Mightier (video)](https://www.youtube.com/watch?v=66P5FMkWoVU)\n        - [ ] [(Advanced) Randomization: Universal & Perfect Hashing (video)](https://www.youtube.com/watch?v=z0lJ2k0sl1g&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=11)\n        - [ ] [(Advanced) Perfect hashing (video)](https://www.youtube.com/watch?v=N0COwN14gt0&list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&index=4)\n        - [ ] [[Review] Hash tables in 4 minutes (video)](https://youtu.be/knV86FlSXJ8)\n\n    - [ ] Online Courses:\n        - [ ] [Core Hash Tables (video)](https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP)\n        - [ ] [Data Structures (video)](https://www.coursera.org/learn/data-structures/home/week/4)\n        - [ ] [Phone Book Problem (video)](https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP)\n        - [ ] distributed hash tables:\n            - [Instant Uploads And Storage Optimization In Dropbox (video)](https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb)\n            - [Distributed Hash Tables (video)](https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H)\n\n    - [ ] Implement with array using linear probing\n        - hash(k, m) - m is the size of the hash table\n        - add(key, value) - if the key already exists, update value\n        - exists(key)\n        - get(key)\n        - remove(key)\n\n**[⬆ back to top](#table-of-contents)**\n\n## More Knowledge\n\n- ### Binary search\n    - [ ] [Binary Search (video)](https://www.youtube.com/watch?v=D5SrAga1pno)\n    - [ ] [Binary Search (video)](https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search)\n    - [ ] [detail](https://www.topcoder.com/thrive/articles/Binary%20Search)\n    - [ ] [blueprint](https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems)\n    - [ ] [[Review] Binary search in 4 minutes (video)](https://youtu.be/fDKIpRe8GW4)\n    - [ ] Implement:\n        - binary search (on a sorted array of integers)\n        - binary search using recursion\n\n- ### Bitwise operations\n    - [ ] [Bits cheat sheet](https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf)\n        - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)\n    - [ ] Get a really good understanding of manipulating bits with: &, |, ^, ~, >>, <<\n        - [ ] [words](https://en.wikipedia.org/wiki/Word_(computer_architecture))\n        - [ ] Good intro:\n            [Bit Manipulation (video)](https://www.youtube.com/watch?v=7jkIUgLC29I)\n        - [ ] [C Programming Tutorial 2-10: Bitwise Operators (video)](https://www.youtube.com/watch?v=d0AwjSpNXR0)\n        - [ ] [Bit Manipulation](https://en.wikipedia.org/wiki/Bit_manipulation)\n        - [ ] [Bitwise Operation](https://en.wikipedia.org/wiki/Bitwise_operation)\n        - [ ] [Bithacks](https://graphics.stanford.edu/~seander/bithacks.html)\n        - [ ] [The Bit Twiddler](https://bits.stephan-brumme.com/)\n        - [ ] [The Bit Twiddler Interactive](https://bits.stephan-brumme.com/interactive.html)\n        - [ ] [Bit Hacks (video)](https://www.youtube.com/watch?v=ZusiKXcz_ac)\n\t\t- [ ] [Practice Operations](https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/)\n    - [ ] 2s and 1s complement\n        - [Binary: Plusses & Minuses (Why We Use Two's Complement) (video)](https://www.youtube.com/watch?v=lKTsv6iVxV4)\n        - [1s Complement](https://en.wikipedia.org/wiki/Ones%27_complement)\n        - [2s Complement](https://en.wikipedia.org/wiki/Two%27s_complement)\n    - [ ] Count set bits\n        - [4 ways to count bits in a byte (video)](https://youtu.be/Hzuzo9NJrlc)\n        - [Count Bits](https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan)\n        - [How To Count The Number Of Set Bits In a 32 Bit Integer](http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer)\n    - [ ] Swap values:\n        - [Swap](https://bits.stephan-brumme.com/swap.html)\n    - [ ] Absolute value:\n        - [Absolute Integer](https://bits.stephan-brumme.com/absInteger.html)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Trees\n\n- ### Trees - Intro\n    - [ ] [Intro to Trees (video)](https://www.coursera.org/lecture/data-structures/trees-95qda)\n    - [ ] [Tree Traversal (video)](https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b)\n    - [ ] [BFS(breadth-first search) and DFS(depth-first search) (video)](https://www.youtube.com/watch?v=uWL6FJhq5fM)\n        - BFS notes:\n           - level order (BFS, using queue)\n           - time complexity: O(n)\n           - space complexity: best: O(1), worst: O(n/2)=O(n)\n        - DFS notes:\n            - time complexity: O(n)\n            - space complexity:\n                best: O(log n) - avg. height of tree\n                worst: O(n)\n            - inorder (DFS: left, self, right)\n            - postorder (DFS: left, right, self)\n            - preorder (DFS: self, left, right)\n    - [ ] [[Review] Breadth-first search in 4 minutes (video)](https://youtu.be/HZ5YTanv5QE)\n    - [ ] [[Review] Depth-first search in 4 minutes (video)](https://youtu.be/Urx87-NMm6c)\n    - [ ] [[Review] Tree Traversal (playlist) in 11 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b)\n\n- ### Binary search trees: BSTs\n    - [ ] [Binary Search Tree Review (video)](https://www.youtube.com/watch?v=x6At0nzX92o&index=1&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n    - [ ] [Introduction (video)](https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction)\n    - [ ] [MIT (video)](https://www.youtube.com/watch?v=76dhtgZt38A&ab_channel=MITOpenCourseWare)\n    - C/C++:\n        - [ ] [Binary search tree - Implementation in C/C++ (video)](https://www.youtube.com/watch?v=COZK7NATh4k&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=28)\n        - [ ] [BST implementation - memory allocation in stack and heap (video)](https://www.youtube.com/watch?v=hWokyBoo0aI&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=29)\n        - [ ] [Find min and max element in a binary search tree (video)](https://www.youtube.com/watch?v=Ut90klNN264&index=30&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P)\n        - [ ] [Find the height of a binary tree (video)](https://www.youtube.com/watch?v=_pnqMz5nrRs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=31)\n        - [ ] [Binary tree traversal - breadth-first and depth-first strategies (video)](https://www.youtube.com/watch?v=9RHO6jU--GU&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=32)\n        - [ ] [Binary tree: Level Order Traversal (video)](https://www.youtube.com/watch?v=86g8jAQug04&index=33&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P)\n        - [ ] [Binary tree traversal: Preorder, Inorder, Postorder (video)](https://www.youtube.com/watch?v=gm8DUJJhmY4&index=34&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P)\n        - [ ] [Check if a binary tree is a binary search tree or not (video)](https://www.youtube.com/watch?v=yEwSGhSsT0U&index=35&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P)\n        - [ ] [Delete a node from Binary Search Tree (video)](https://www.youtube.com/watch?v=gcULXE7ViZw&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=36)\n        - [ ] [Inorder Successor in a binary search tree (video)](https://www.youtube.com/watch?v=5cPbNCrdotA&index=37&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P)\n    - [ ] Implement:\n        - [ ] [insert    // insert value into tree](https://leetcode.com/problems/insert-into-a-binary-search-tree/submissions/987660183/)\n        - [ ] get_node_count // get count of values stored\n        - [ ] print_values // prints the values in the tree, from min to max\n        - [ ] delete_tree\n        - [ ] is_in_tree // returns true if a given value exists in the tree\n        - [ ] [get_height // returns the height in nodes (single node's height is 1)](https://www.geeksforgeeks.org/find-the-maximum-depth-or-height-of-a-tree/)\n        - [ ] get_min   // returns the minimum value stored in the tree\n        - [ ] get_max   // returns the maximum value stored in the tree\n        - [ ] [is_binary_search_tree](https://leetcode.com/problems/validate-binary-search-tree/)\n        - [ ] delete_value\n        - [ ] get_successor // returns the next-highest value in the tree after given value, -1 if none\n\n- ### Heap / Priority Queue / Binary Heap\n    - visualized as a tree, but is usually linear in storage (array, linked list)\n    - [ ] [Heap](https://en.wikipedia.org/wiki/Heap_(data_structure))\n    - [ ] [Introduction (video)](https://www.coursera.org/lecture/data-structures/introduction-2OpTs)\n    - [ ] [Binary Trees (video)](https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees)\n    - [ ] [Tree Height Remark (video)](https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark)\n    - [ ] [Basic Operations (video)](https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations)\n    - [ ] [Complete Binary Trees (video)](https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees)\n    - [ ] [Pseudocode (video)](https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode)\n    - [ ] [Heap Sort - jumps to start (video)](https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3291)\n    - [ ] [Heap Sort (video)](https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO)\n    - [ ] [Building a heap (video)](https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS)\n    - [ ] [MIT 6.006 Introduction to Algorithms: Binary Heaps](https://www.youtube.com/watch?v=Xnpo1atN-Iw&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=12)\n    - [ ] [CS 61B Lecture 24: Priority Queues (video)](https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE)\n    - [ ] [Linear Time BuildHeap (max-heap)](https://www.youtube.com/watch?v=MiyLo8adrWw)\n    - [ ] [[Review] Heap (playlist) in 13 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6)\n    - [ ] Implement a max-heap:\n        - [ ] insert\n        - [ ] sift_up - needed for insert\n        - [ ] get_max - returns the max item, without removing it\n        - [ ] get_size() - return number of elements stored\n        - [ ] is_empty() - returns true if the heap contains no elements\n        - [ ] extract_max - returns the max item, removing it\n        - [ ] sift_down - needed for extract_max\n        - [ ] remove(x) - removes item at index x\n        - [ ] heapify - create a heap from an array of elements, needed for heap_sort\n        - [ ] heap_sort() - take an unsorted array and turn it into a sorted array in place using a max heap or min heap\n\n**[⬆ back to top](#table-of-contents)**\n\n## Sorting\n\n- [ ] Notes:\n    - Implement sorts & know best case/worst case, average complexity of each:\n        - no bubble sort - it's terrible - O(n^2), except when n <= 16\n    - [ ] Stability in sorting algorithms (\"Is Quicksort stable?\")\n        - [Sorting Algorithm Stability](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability)\n        - [Stability In Sorting Algorithms](http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms)\n        - [Stability In Sorting Algorithms](http://www.geeksforgeeks.org/stability-in-sorting-algorithms/)\n        - [Sorting Algorithms - Stability](http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf)\n    - [ ] Which algorithms can be used on linked lists? Which on arrays? Which of both?\n        - I wouldn't recommend sorting a linked list, but merge sort is doable.\n        - [Merge Sort For Linked List](http://www.geeksforgeeks.org/merge-sort-for-linked-list/)\n\n- For heapsort, see the Heap data structure above. Heap sort is great, but not stable\n\n- [ ] [Sedgewick - Mergesort (5 videos)](https://www.coursera.org/learn/algorithms-part1/home/week/3)\n    - [ ] [1. Mergesort](https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq)\n    - [ ] [2. Bottom-up Mergesort](https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort)\n    - [ ] [3. Sorting Complexity](https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF)\n    - [ ] [4. Comparators](https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS)\n    - [ ] [5. Stability](https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability)\n\n- [ ] [Sedgewick - Quicksort (4 videos)](https://www.coursera.org/learn/algorithms-part1/home/week/3)\n    - [ ] [1. Quicksort](https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC)\n    - [ ] [2. Selection](https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT)\n    - [ ] [3. Duplicate Keys](https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd)\n    - [ ] [4. System Sorts](https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7)\n\n- [ ] UC Berkeley:\n    - [ ] [CS 61B Lecture 29: Sorting I (video)](https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I)\n    - [ ] [CS 61B Lecture 30: Sorting II (video)](https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk)\n    - [ ] [CS 61B Lecture 32: Sorting III (video)](https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc)\n    - [ ] [CS 61B Lecture 33: Sorting V (video)](https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4)\n    - [ ] [CS 61B 2014-04-21: Radix Sort(video)](https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI)\n\n- [ ] [Bubble Sort (video)](https://www.youtube.com/watch?v=P00xJgWzz2c&index=1&list=PL89B61F78B552C1AB)\n- [ ] [Analyzing Bubble Sort (video)](https://www.youtube.com/watch?v=ni_zk257Nqo&index=7&list=PL89B61F78B552C1AB)\n- [ ] [Insertion Sort, Merge Sort (video)](https://www.youtube.com/watch?v=Kg4bqzAqRBM&index=3&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n- [ ] [Insertion Sort (video)](https://www.youtube.com/watch?v=c4BRHC7kTaQ&index=2&list=PL89B61F78B552C1AB)\n- [ ] [Merge Sort (video)](https://www.youtube.com/watch?v=GCae1WNvnZM&index=3&list=PL89B61F78B552C1AB)\n- [ ] [Quicksort (video)](https://www.youtube.com/watch?v=y_G9BkAm6B8&index=4&list=PL89B61F78B552C1AB)\n- [ ] [Selection Sort (video)](https://www.youtube.com/watch?v=6nDMgr0-Yyo&index=8&list=PL89B61F78B552C1AB)\n\n- [ ] Merge sort code:\n    - [ ] [Using output array (C)](http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c)\n    - [ ] [Using output array (Python)](https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py)\n    - [ ] [In-place (C++)](https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc)\n- [ ] Quick sort code:\n    - [ ] [Implementation (C)](http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c)\n    - [ ] [Implementation (C)](https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c)\n    - [ ] [Implementation (Python)](https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py)\n\n- [ ] [[Review] Sorting (playlist) in 18 minutes](https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl)\n    - [ ] [Quick sort in 4 minutes (video)](https://youtu.be/Hoixgm4-P4M)\n    - [ ] [Heap sort in 4 minutes (video)](https://youtu.be/2DmK_H7IdTo)\n    - [ ] [Merge sort in 3 minutes (video)](https://youtu.be/4VqmGXwpLqc)\n    - [ ] [Bubble sort in 2 minutes (video)](https://youtu.be/xli_FI7CuzA)\n    - [ ] [Selection sort in 3 minutes (video)](https://youtu.be/g-PGLbMth_g)\n    - [ ] [Insertion sort in 2 minutes (video)](https://youtu.be/JU767SDMDvA)\n\n- [ ] Implement:\n    - [ ] Mergesort: O(n log n) average and worst case\n    - [ ] Quicksort O(n log n) average case\n    - Selection sort and insertion sort are both O(n^2) average and worst-case\n    - For heapsort, see Heap data structure above\n\n- [ ] Not required, but I recommended them:\n    - [ ] [Sedgewick - Radix Sorts (6 videos)](https://www.coursera.org/learn/algorithms-part2/home/week/3)\n        - [ ] [1. Strings in Java](https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java)\n        - [ ] [2. Key Indexed Counting](https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z)\n        - [ ] [3. Least Significant Digit First String Radix Sort](https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort)\n        - [ ] [4. Most Significant Digit First String Radix Sort](https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort)\n        - [ ] [5. 3 Way Radix Quicksort](https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5)\n        - [ ] [6. Suffix Arrays](https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays)\n    - [ ] [Radix Sort](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort)\n    - [ ] [Radix Sort (video)](https://www.youtube.com/watch?v=xhr26ia4k38)\n    - [ ] [Radix Sort, Counting Sort (linear time given constraints) (video)](https://www.youtube.com/watch?v=Nz1KZXbghj8&index=7&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n    - [ ] [Randomization: Matrix Multiply, Quicksort, Freivalds' algorithm (video)](https://www.youtube.com/watch?v=cNB2lADK3_s&index=8&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n    - [ ] [Sorting in Linear Time (video)](https://www.youtube.com/watch?v=pOKy3RZbSws&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=14)\n\nAs a summary, here is a visual representation of [15 sorting algorithms](https://www.youtube.com/watch?v=kPRA0W1kECg).\nIf you need more detail on this subject, see the \"Sorting\" section in [Additional Detail on Some Subjects](#additional-detail-on-some-subjects)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Graphs\n\nGraphs can be used to represent many problems in computer science, so this section is long, like trees and sorting.\n\n- Notes:\n    - There are 4 basic ways to represent a graph in memory:\n        - objects and pointers\n        - adjacency matrix\n        - adjacency list\n        - adjacency map\n    - Familiarize yourself with each representation and its pros & cons\n    - BFS and DFS - know their computational complexity, their trade-offs, and how to implement them in real code\n    - When asked a question, look for a graph-based solution first, then move on if none\n\n- [ ] MIT(videos):\n    - [ ] [Breadth-First Search](https://www.youtube.com/watch?v=oFVYVzlvk9c&t=14s&ab_channel=MITOpenCourseWare)\n    - [ ] [Depth-First Search](https://www.youtube.com/watch?v=IBfWDYSffUU&t=32s&ab_channel=MITOpenCourseWare)\n\n- [ ] Skiena Lectures - great intro:\n    - [ ] [CSE373 2020 - Lecture 10 - Graph Data Structures (video)](https://www.youtube.com/watch?v=Sjk0xqWWPCc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=10)\n    - [ ] [CSE373 2020 - Lecture 11 - Graph Traversal (video)](https://www.youtube.com/watch?v=ZTwjXj81NVY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=11)\n    - [ ] [CSE373 2020 - Lecture 12 - Depth First Search (video)](https://www.youtube.com/watch?v=KyordYB3BOs&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=12)\n    - [ ] [CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)](https://www.youtube.com/watch?v=oolm2VnJUKw&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=13)\n    - [ ] [CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con't) (video)](https://www.youtube.com/watch?v=RktgPx0MarY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=14)\n    - [ ] [CSE373 2020 - Lecture 15 - Graph Algorithms (con't 2) (video)](https://www.youtube.com/watch?v=MUe5DXRhyAo&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=15)\n\n- [ ] Graphs (review and more):\n\n    - [ ] [6.006 Single-Source Shortest Paths Problem (video)](https://www.youtube.com/watch?v=Aa2sqUhIn-E&index=15&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n    - [ ] [6.006 Dijkstra (video)](https://www.youtube.com/watch?v=NSHizBK9JD8&t=1731s&ab_channel=MITOpenCourseWare)\n    - [ ] [6.006 Bellman-Ford (video)](https://www.youtube.com/watch?v=f9cVS_URPc0&ab_channel=MITOpenCourseWare)\n    - [ ] [6.006 Speeding Up Dijkstra (video)](https://www.youtube.com/watch?v=CHvQ3q_gJ7E&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=18)\n    - [ ] [Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim's Algorithm -  Lecture 6 (video)]( https://www.youtube.com/watch?v=i_AQT_XfvD8&index=6&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n    - [ ] [Aduni: Graph Algorithms II - DFS, BFS, Kruskal's Algorithm, Union Find Data Structure - Lecture 7 (video)]( https://www.youtube.com/watch?v=ufj5_bppBsA&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=7)\n    - [ ] [Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)](https://www.youtube.com/watch?v=DiedsPsMKXc&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=8)\n    - [ ] [Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)](https://www.youtube.com/watch?v=XIAQRlNkJAw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=9)\n    - [ ] [CS 61B 2014: Weighted graphs (video)](https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k)\n    - [ ] [Greedy Algorithms: Minimum Spanning Tree (video)](https://www.youtube.com/watch?v=tKwnms5iRBU&index=16&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n    - [ ] [Strongly Connected Components Kosaraju's Algorithm Graph Algorithm (video)](https://www.youtube.com/watch?v=RpgcYiky7uw)\n    - [ ] [[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw)\n    - [ ] [[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV)\n\n- Full Coursera Course:\n    - [ ] [Algorithms on Graphs (video)](https://www.coursera.org/learn/algorithms-on-graphs/home/welcome)\n\n- I'll implement:\n    - [ ] DFS with adjacency list (recursive)\n    - [ ] DFS with adjacency list (iterative with stack)\n    - [ ] DFS with adjacency matrix (recursive)\n    - [ ] DFS with adjacency matrix (iterative with stack)\n    - [ ] BFS with adjacency list\n    - [ ] BFS with adjacency matrix\n    - [ ] single-source shortest path (Dijkstra)\n    - [ ] minimum spanning tree\n    - DFS-based algorithms (see Aduni videos above):\n        - [ ] check for a cycle (needed for topological sort, since we'll check for the cycle before starting)\n        - [ ] topological sort\n        - [ ] count connected components in a graph\n        - [ ] list strongly connected components\n        - [ ] check for bipartite graph\n\n**[⬆ back to top](#table-of-contents)**\n\n## Even More Knowledge\n\n- ### Recursion\n    - [ ] Stanford lectures on recursion & backtracking:\n        - [ ] [Lecture 8 | Programming Abstractions (video)](https://www.youtube.com/watch?v=gl3emqCuueQ&list=PLFE6E58F856038C69&index=8)\n        - [ ] [Lecture 9 | Programming Abstractions (video)](https://www.youtube.com/watch?v=uFJhEPrbycQ&list=PLFE6E58F856038C69&index=9)\n        - [ ] [Lecture 10 | Programming Abstractions (video)](https://www.youtube.com/watch?v=NdF1QDTRkck&index=10&list=PLFE6E58F856038C69)\n        - [ ] [Lecture 11 | Programming Abstractions (video)](https://www.youtube.com/watch?v=p-gpaIGRCQI&list=PLFE6E58F856038C69&index=11)\n    - When it is appropriate to use it?\n    - How is tail recursion better than not?\n        - [ ] [What Is Tail Recursion Why Is It So Bad?](https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad)\n        - [ ] [Tail Recursion (video)](https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1)\n    - [ ] [5 Simple Steps for Solving Any Recursive Problem(video)](https://youtu.be/ngCos392W4w)\n\n\tBacktracking Blueprint: [Java](https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning))\n\t[Python](https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A)\n- ### Dynamic Programming\n    - You probably won't see any dynamic programming problems in your interview, but it's worth being able to recognize a\n    problem as being a candidate for dynamic programming.\n    - This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.\n    - I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.\n    - [ ] Videos:\n        - [ ] [Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)](https://www.youtube.com/watch?v=wAA0AMfcJHQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=18)\n        - [ ] [Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)](https://www.youtube.com/watch?v=T3A4jlHlhtA&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=19)\n        - [ ] [Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)](https://www.youtube.com/watch?v=iPnPVcZmRbE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=20)\n        - [ ] [Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)](https://www.youtube.com/watch?v=2xPE4Wq8coQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=21)\n        - [ ] [Skiena: CSE373 2020 - Lecture 22 - Dynamic Programming and Review (video)](https://www.youtube.com/watch?v=Yh3RzqQGsyI&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=22)\n        - [ ] [Simonson: Dynamic Programming 0 (starts at 59:18) (video)](https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3558)\n        - [ ] [Simonson: Dynamic Programming I - Lecture 11 (video)](https://www.youtube.com/watch?v=0EzHjQ_SOeU&index=11&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n        - [ ] [Simonson: Dynamic programming II - Lecture 12 (video)](https://www.youtube.com/watch?v=v1qiRwuJU7g&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=12)\n        - [ ] List of individual DP problems (each is short):\n            [Dynamic Programming (video)](https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr)\n    - [ ] Yale Lecture notes:\n        - [ ] [Dynamic Programming](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming)\n    - [ ] Coursera:\n        - [ ] [The RNA secondary structure problem (video)](https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem)\n        - [ ] [A dynamic programming algorithm (video)](https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq)\n        - [ ] [Illustrating the DP algorithm (video)](https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2)\n        - [ ] [Running time of the DP algorithm (video)](https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm)\n        - [ ] [DP vs. recursive implementation (video)](https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation)\n        - [ ] [Global pairwise sequence alignment (video)](https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6)\n        - [ ] [Local pairwise sequence alignment (video)](https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment)\n\n- ### Design patterns\n    - [ ] [Quick UML review (video)](https://www.youtube.com/watch?v=3cmzqZzwNDM&list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&index=3)\n    - [ ] Learn these patterns:\n        - [ ] strategy\n        - [ ] singleton\n        - [ ] adapter\n        - [ ] prototype\n        - [ ] decorator\n        - [ ] visitor\n        - [ ] factory, abstract factory\n        - [ ] facade\n        - [ ] observer\n        - [ ] proxy\n        - [ ] delegate\n        - [ ] command\n        - [ ] state\n        - [ ] memento\n        - [ ] iterator\n        - [ ] composite\n        - [ ] flyweight\n    - [ ] [Series of videos (27 videos)](https://www.youtube.com/playlist?list=PLF206E906175C7E07)\n    - [ ] [Book: Head First Design Patterns](https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124)\n        - I know the canonical book is \"Design Patterns: Elements of Reusable Object-Oriented Software\", but Head First is great for beginners to OO.\n    - [Handy reference: 101 Design Patterns & Tips for Developers](https://sourcemaking.com/design-patterns-and-tips)\n\n- ### Combinatorics (n choose k) & Probability\n    - [ ] [Math Skills: How to find Factorial, Permutation, and Combination (Choose) (video)](https://www.youtube.com/watch?v=8RRo6Ti9d0U)\n    - [ ] [Make School: Probability (video)](https://www.youtube.com/watch?v=sZkAAk9Wwa4)\n    - [ ] [Make School: More Probability and Markov Chains (video)](https://www.youtube.com/watch?v=dNaJg-mLobQ)\n    - [ ] Khan Academy:\n        - Course layout:\n            - [ ] [Basic Theoretical Probability](https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic)\n        - Just the videos - 41 (each are simple and each are short):\n            - [ ] [Probability Explained (video)](https://www.youtube.com/watch?v=uzkc-qNVoOk&list=PLC58778F28211FA19)\n\n- ### NP, NP-Complete and Approximation Algorithms\n    - Know about the most famous classes of NP-complete problems, such as the traveling salesman and the knapsack problem,\n        and be able to recognize them when an interviewer asks you them in disguise.\n    - Know what NP-complete means.\n    - [ ] [Computational Complexity (video)](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=23)\n    - [ ] Simonson:\n        - [ ] [Greedy Algs. II & Intro to NP-Completeness (video)](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n        - [ ] [NP Completeness II & Reductions (video)](https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n        - [ ] [NP Completeness III (Video)](https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n        - [ ] [NP Completeness IV (video)](https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18)\n    - [ ] Skiena:\n        - [ ] [CSE373 2020 - Lecture 23 - NP-Completeness (video)](https://www.youtube.com/watch?v=ItHp5laE1VE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=23)\n        - [ ] [CSE373 2020 - Lecture 24 - Satisfiability (video)](https://www.youtube.com/watch?v=inaFJeCzGxU&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=24)\n        - [ ] [CSE373 2020 - Lecture 25 - More NP-Completeness (video)](https://www.youtube.com/watch?v=B-bhKxjZLlc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=25)\n        - [ ] [CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)](https://www.youtube.com/watch?v=_EzetTkG_Cc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=26)\n    - [ ] [Complexity: P, NP, NP-completeness, Reductions (video)](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n    - [ ] [Complexity: Approximation Algorithms (video)](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n    - [ ] [Complexity: Fixed-Parameter Algorithms (video)](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n    - Peter Norvig discusses near-optimal solutions to the traveling salesman problem:\n        - [Jupyter Notebook](http://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb)\n    - Pages 1048 - 1140 in CLRS if you have it.\n\n- ### How computers process a program\n\n    - [ ] [How CPU executes a program (video)](https://www.youtube.com/watch?v=XM4lGflQFvA)\n    - [ ] [How computers calculate - ALU (video)](https://youtu.be/1I5ZMmrOfnA)\n    - [ ] [Registers and RAM (video)](https://youtu.be/fpnE6UAfbtU)\n    - [ ] [The Central Processing Unit (CPU) (video)](https://youtu.be/FZGugFqdr60)\n    - [ ] [Instructions and Programs (video)](https://youtu.be/zltgXvg6r3k)\n- ### Caches\n    - [ ] LRU cache:\n        - [ ] [The Magic of LRU Cache (100 Days of Google Dev) (video)](https://www.youtube.com/watch?v=R5ON3iwx78M)\n        - [ ] [Implementing LRU (video)](https://www.youtube.com/watch?v=bq6N7Ym81iI)\n        - [ ] [LeetCode - 146 LRU Cache (C++) (video)](https://www.youtube.com/watch?v=8-FZRAjR7qU)\n    - [ ] CPU cache:\n        - [ ] [MIT 6.004 L15: The Memory Hierarchy (video)](https://www.youtube.com/watch?v=vjYF_fAZI5E&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&index=24)\n        - [ ] [MIT 6.004 L16: Cache Issues (video)](https://www.youtube.com/watch?v=ajgC3-pyGlk&index=25&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-)\n\n- ### Processes and Threads\n    - [ ] Computer Science 162 - Operating Systems (25 videos):\n        - for processes and threads see videos 1-11\n        - [Operating Systems and System Programming (video)](https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c)\n    - [What Is The Difference Between A Process And A Thread?](https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread)\n    - Covers:\n        - Processes, Threads, Concurrency issues\n            - Difference between processes and threads\n            - Processes\n            - Threads\n            - Locks\n            - Mutexes\n            - Semaphores\n            - Monitors\n            - How do they work?\n            - Deadlock\n            - Livelock\n        - CPU activity, interrupts, context switching\n        - Modern concurrency constructs with multicore processors\n        - [Paging, segmentation, and virtual memory (video)](https://youtu.be/O4nwUqQodAg)\n        - [Interrupts (video)](https://youtu.be/iKlAWIKEyuw)\n        - Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o)\n        - Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own PC, stack counter, registers, and stack)\n        - Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.\n        - Context switching\n            - [How context switching is initiated by the operating system and underlying hardware?](https://www.javatpoint.com/what-is-the-context-switching-in-the-operating-system)\n    - [ ] [threads in C++ (series - 10 videos)](https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M)\n    - [ ] [CS 377 Spring '14: Operating Systems from University of Massachusetts](https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k)\n    - [ ] concurrency in Python (videos):\n        - [ ] [Short series on threads](https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1)\n        - [ ] [Python Threads](https://www.youtube.com/watch?v=Bs7vPNbB9JM)\n        - [ ] [Understanding the Python GIL (2010)](https://www.youtube.com/watch?v=Obt-vMVdM8s)\n            - [reference](http://www.dabeaz.com/GIL)\n        - [ ] [David Beazley - Python Concurrency From the Ground Up LIVE! - PyCon 2015](https://www.youtube.com/watch?v=MCs5OvhV9S4)\n        - [ ] [Keynote David Beazley - Topics of Interest (Python Asyncio)](https://www.youtube.com/watch?v=ZzfHjytDceU)\n        - [ ] [Mutex in Python](https://www.youtube.com/watch?v=0zaPs8OtyKY)\n\n- ### Testing\n    - To cover:\n        - how unit testing works\n        - what are mock objects\n        - what is integration testing\n        - what is dependency injection\n    - [ ] [Agile Software Testing with James Bach (video)](https://www.youtube.com/watch?v=SAhJf36_u5U)\n    - [ ] [Open Lecture by James Bach on Software Testing (video)](https://www.youtube.com/watch?v=ILkT_HV9DVU)\n    - [ ] [Steve Freeman - Test-Driven Development (that’s not what we meant) (video)](https://vimeo.com/83960706)\n        - [slides](http://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf)\n    - [ ] Dependency injection:\n        - [ ] [video](https://www.youtube.com/watch?v=IKD2-MAkXyQ)\n        - [ ] [Tao Of Testing](http://jasonpolites.github.io/tao-of-testing/ch3-1.1.html)\n    - [ ] [How to write tests](http://jasonpolites.github.io/tao-of-testing/ch4-1.1.html)\n\n- ### String searching & manipulations\n    - [ ] [Sedgewick - Suffix Arrays (video)](https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays)\n    - [ ] [Sedgewick - Substring Search (videos)](https://www.coursera.org/learn/algorithms-part2/home/week/4)\n        - [ ] [1. Introduction to Substring Search](https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG)\n        - [ ] [2. Brute-Force Substring Search](https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search)\n        - [ ] [3. Knuth-Morris Pratt](https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt)\n        - [ ] [4. Boyer-Moore](https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore)\n        - [ ] [5. Rabin-Karp](https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT)\n    - [ ] [Search pattern in a text (video)](https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text)\n\n    If you need more detail on this subject, see the \"String Matching\" section in [Additional Detail on Some Subjects](#additional-detail-on-some-subjects).\n\n- ### Tries\n    - Note there are different kinds of tries. Some have prefixes, some don't, and some use strings instead of bits\n        to track the path\n    - I read through the code, but will not implement\n    - [ ] [Sedgewick - Tries (3 videos)](https://www.coursera.org/learn/algorithms-part2/home/week/4)\n        - [ ] [1. R Way Tries](https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries)\n        - [ ] [2. Ternary Search Tries](https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries)\n        - [ ] [3. Character Based Operations](https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations)\n    - [ ] [Notes on Data Structures and Programming Techniques](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries)\n    - [ ] Short course videos:\n        - [ ] [Introduction To Tries (video)](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries)\n        - [ ] [Performance Of Tries (video)](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries)\n        - [ ] [Implementing A Trie (video)](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie)\n    - [ ] [The Trie: A Neglected Data Structure](https://www.toptal.com/java/the-trie-a-neglected-data-structure)\n    - [ ] [TopCoder - Using Tries](https://www.topcoder.com/thrive/articles/Using%20Tries)\n    - [ ] [Stanford Lecture (real-world use case) (video)](https://www.youtube.com/watch?v=TJ8SkcUSdbU)\n    - [ ] [MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)](https://www.youtube.com/watch?v=NinWEPPrkDQ&index=16&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf)\n\n- ### Floating Point Numbers\n    - [ ] simple 8-bit: [Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)](https://www.youtube.com/watch?v=ji3SfClm8TU)\n\n- ### Unicode\n    - [ ] [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets]( http://www.joelonsoftware.com/articles/Unicode.html)\n    - [ ] [What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text](http://kunststube.net/encoding/)\n\n- ### Endianness\n    - [ ] [Big And Little Endian](https://web.archive.org/web/20180107141940/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html)\n    - [ ] [Big Endian Vs Little Endian (video)](https://www.youtube.com/watch?v=JrNF0KRAlyo)\n    - [ ] [Big And Little Endian Inside/Out (video)](https://www.youtube.com/watch?v=oBSuXP-1Tc0)\n        - Very technical talk for kernel devs. Don't worry if most is over your head.\n        - The first half is enough.\n\n- ### Networking\n    - **If you have networking experience or want to be a reliability engineer or operations engineer, expect questions**\n    - Otherwise, this is just good to know\n    - [ ] [Khan Academy](https://www.khanacademy.org/computing/code-org/computers-and-the-internet)\n    - [ ] [UDP and TCP: Comparison of Transport Protocols (video)](https://www.youtube.com/watch?v=Vdc8TCESIg8)\n    - [ ] [TCP/IP and the OSI Model Explained! (video)](https://www.youtube.com/watch?v=e5DEVa9eSN0)\n    - [ ] [Packet Transmission across the Internet. Networking & TCP/IP tutorial. (video)](https://www.youtube.com/watch?v=nomyRJehhnM)\n    - [ ] [HTTP (video)](https://www.youtube.com/watch?v=WGJrLqtX7As)\n    - [ ] [SSL and HTTPS (video)](https://www.youtube.com/watch?v=S2iBR2ZlZf0)\n    - [ ] [SSL/TLS (video)](https://www.youtube.com/watch?v=Rp3iZUvXWlM)\n    - [ ] [HTTP 2.0 (video)](https://www.youtube.com/watch?v=E9FxNzv1Tr8)\n    - [ ] [Video Series (21 videos) (video)](https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j)\n    - [ ] [Subnetting Demystified - Part 5 CIDR Notation (video)](https://www.youtube.com/watch?v=t5xYI0jzOf4)\n    - [ ] Sockets:\n        - [ ] [Java - Sockets - Introduction (video)](https://www.youtube.com/watch?v=6G_W54zuadg&t=6s)\n        - [ ] [Socket Programming (video)](https://www.youtube.com/watch?v=G75vN2mnJeQ)\n\n---\n\n**[⬆ back to top](#table-of-contents)**\n\n## Final Review\n\n    This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.\n    It's nice if you want a refresher often.\n\n- [ ] Series of 2-3 minutes short subject videos (23 videos)\n    - [Videos](https://www.youtube.com/watch?v=r4r1DZcx1cM&list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&index=22)\n- [ ] Series of 2-5 minutes short subject videos - Michael Sambol (48 videos):\n    - [Videos](https://www.youtube.com/@MichaelSambol)\n    - [Code Examples](https://github.com/msambol/dsa)\n- [ ] [Sedgewick Videos - Algorithms I](https://www.coursera.org/learn/algorithms-part1)\n- [ ] [Sedgewick Videos - Algorithms II](https://www.coursera.org/learn/algorithms-part2)\n\n---\n\n**[⬆ back to top](#table-of-contents)**\n\n## Update Your Resume\n\n- See Resume prep information in the books: \"Cracking The Coding Interview\" and \"Programming Interviews Exposed\"\n- [\"This Is What A GOOD Resume Should Look Like\" by Gayle McDowell (author of Cracking the Coding Interview)](https://www.careercup.com/resume),\n    - Note by the author: \"This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.\"\n- [\"Step-by-step resume guide\" by Tech Interview Handbook](https://www.techinterviewhandbook.org/resume/guide)\n    - Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume\n\n**[⬆ back to top](#table-of-contents)**\n\n## Interview Process & General Interview Prep\n\n- [ ] [How to Pass the Engineering Interview in 2021](https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1)\n- [ ] [Demystifying Tech Recruiting](https://www.youtube.com/watch?v=N233T0epWTs)\n- [ ] How to Get a Job at the Big 4:\n    - [ ] [How to Get a Job at the Big 4 - Amazon, Facebook, Google & Microsoft (video)](https://www.youtube.com/watch?v=YJZCUhxNCv8)\n    - [ ] [How to Get a Job at the Big 4.1 (Follow-up video)](https://www.youtube.com/watch?v=6790FVXWBw8&feature=youtu.be)\n- [ ] Cracking The Coding Interview Set 1:\n    - [ ] [Gayle L McDowell - Cracking The Coding Interview (video)](https://www.youtube.com/watch?v=rEJzOhC5ZtQ)\n    - [ ] [Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)](https://www.youtube.com/watch?v=aClxtDcdpsQ)\n- [ ] Cracking the Facebook Coding Interview:\n    - [ ] [The Approach](https://www.youtube.com/watch?v=wCl9kvQGHPI)\n    - [ ] [Problem Walkthrough](https://www.youtube.com/watch?v=4UWDyJq8jZg)\n- Prep Courses:\n    - [Python for Data Structures, Algorithms, and Interviews (paid course)](https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/):\n        - A Python-centric interview prep course that covers data structures, algorithms, mock interviews, and much more.\n    - [Intro to Data Structures and Algorithms using Python (Udacity free course)](https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513):\n        - A free Python-centric data structures and algorithms course.\n    - [Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)](https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256):\n        - Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.\n    - [Grokking the Behavioral Interview (Educative free course)](https://www.educative.io/courses/grokking-the-behavioral-interview):\n        - Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview.\n    - [AlgoMonster (paid course with free content)](https://algo.monster/?utm_campaign=jwasham&utm_medium=referral&utm_content=coding-interview-university&utm_source=github):\n      - The crash course for LeetCode. Covers all the patterns condensed from thousands of questions.\n\nMock Interviews:\n- [Gainlo.co: Mock interviewers from big companies](http://www.gainlo.co/#!/) - I used this and it helped me relax for the phone screen and on-site interview\n- [Pramp: Mock interviews from/with peers](https://www.pramp.com/) - a peer-to-peer model to practice interviews\n- [interviewing.io: Practice mock interview with senior engineers](https://interviewing.io) - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously\n- [Meetapro: Mock interviews with top FAANG interviewers](https://meetapro.com/?utm_source=ciu) - an Airbnb-style mock interview/coaching platform.\n- [Hello Interview: Mock Interviews with Expert Coaches and AI](https://www.hellointerview.com/?utm_source=ciu) - interview directly with AI or with FAANG staff engineers and managers.\n- [Codemia: Practice system design problems with AI or community solutions and feedback](https://codemia.io/?utm_source=ciu) - Practice system design problems via AI practice tool. Share your solution with the community to get human feedback as well.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Be thinking of for when the interview comes\n\nThink of about 20 interview questions you'll get, along with the lines of the items below. Have at least one answer for each.\nHave a story, not just data, about something you accomplished.\n\n- Why do you want this job?\n- What's a tough problem you've solved?\n- Biggest challenges faced?\n- Best/worst designs seen?\n- Ideas for improving an existing product\n- How do you work best, as an individual and as part of a team?\n- Which of your skills or experiences would be assets in the role and why?\n- What did you most enjoy at [job x / project y]?\n- What was the biggest challenge you faced at [job x / project y]?\n- What was the hardest bug you faced at [job x / project y]?\n- What did you learn at [job x / project y]?\n- What would you have done better at [job x / project y]?\n\n**[⬆ back to top](#table-of-contents)**\n\n## Have questions for the interviewer\n\nSome of mine (I already may know the answers, but want their opinion or team perspective):\n\n- How large is your team?\n- What does your dev cycle look like? Do you do waterfall/sprints/agile?\n- Are rushes to deadlines common? Or is there flexibility?\n- How are decisions made in your team?\n- How many meetings do you have per week?\n- Do you feel your work environment helps you concentrate?\n- What are you working on?\n- What do you like about it?\n- What is the work life like?\n- How is the work/life balance?\n\n**[⬆ back to top](#table-of-contents)**\n\n## Once You've Got The Job\n\nCongratulations!\n\nKeep learning.\n\nYou're never really done.\n\n---\n\n    *****************************************************************************************************\n    *****************************************************************************************************\n\n    Everything below this point is optional. It is NOT needed for an entry-level interview.\n    However, by studying these, you'll get greater exposure to more CS concepts and will be better prepared for\n    any software engineering job. You'll be a much more well-rounded software engineer.\n\n    *****************************************************************************************************\n    *****************************************************************************************************\n\n---\n\n**[⬆ back to top](#table-of-contents)**\n\n## Additional Books\n\n    These are here so you can dive into a topic you find interesting.\n\n- [The Unix Programming Environment](https://www.amazon.com/dp/013937681X)\n    - An oldie but a goodie\n- [The Linux Command Line: A Complete Introduction](https://www.amazon.com/dp/1593273894/)\n    - A modern option\n- [TCP/IP Illustrated Series](https://en.wikipedia.org/wiki/TCP/IP_Illustrated)\n- [Head First Design Patterns](https://www.amazon.com/gp/product/0596007124/)\n    - A gentle introduction to design patterns\n- [Design Patterns: Elements of Reusable Object-Oriented Software](https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)\n    - AKA the \"Gang Of Four\" book or GOF\n    - The canonical design patterns book\n- [Algorithm Design Manual](http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202) (Skiena)\n    - As a review and problem-recognition\n    - The algorithm catalog portion is well beyond the scope of difficulty you'll get in an interview\n    - This book has 2 parts:\n        - Class textbook on data structures and algorithms\n            - Pros:\n                - Is a good review as any algorithms textbook would be\n                - Nice stories from his experiences solving problems in industry and academia\n                - Code examples in C\n            - Cons:\n                - Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects\n                - Chapters 7, 8, and 9 can be painful to try to follow, as some items are not explained well or require more brain than I have\n                - Don't get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material\n        - Algorithm catalog:\n            - This is the real reason you buy this book.\n            - This book is better as an algorithm reference, and not something you read cover to cover.\n    - Can rent it on Kindle\n    - Answers:\n        - [Solutions](https://web.archive.org/web/20150404194210/http://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition))\n    - [Errata](http://www3.cs.stonybrook.edu/~skiena/algorist/book/errata)\n- [Algorithm](http://jeffe.cs.illinois.edu/teaching/algorithms/) (Jeff Erickson)\n- [Write Great Code: Volume 1: Understanding the Machine](https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038)\n    - The book was published in 2004, and is somewhat outdated, but it's a terrific resource for understanding a computer in brief\n    - The author invented [HLA](https://en.wikipedia.org/wiki/High_Level_Assembly), so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like\n    - These chapters are worth the read to give you a nice foundation:\n        - Chapter 2 - Numeric Representation\n        - Chapter 3 - Binary Arithmetic and Bit Operations\n        - Chapter 4 - Floating-Point Representation\n        - Chapter 5 - Character Representation\n        - Chapter 6 - Memory Organization and Access\n        - Chapter 7 - Composite Data Types and Memory Objects\n        - Chapter 9 - CPU Architecture\n        - Chapter 10 - Instruction Set Architecture\n        - Chapter 11 - Memory Architecture and Organization\n- [Introduction to Algorithms](https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X)\n    - **Important:** Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won't teach you how to write good code. You have to be able to code a decent solution efficiently\n    - AKA CLR, sometimes CLRS, because Stein was late to the game\n- [Computer Architecture, Sixth Edition: A Quantitative Approach](https://www.amazon.com/dp/0128119055)\n    - For a richer, more up-to-date (2017), but longer treatment\n\n**[⬆ back to top](#table-of-contents)**\n\n## System Design, Scalability, Data Handling\n\n**You can expect system design questions if you have 4+ years of experience.**\n\n- Scalability and System Design are very large topics with many topics and resources, since\n      there is a lot to consider when designing a software/hardware system that can scale.\n      Expect to spend quite a bit of time on this\n- Considerations:\n    - Scalability\n        - Distill large data sets to single values\n        - Transform one data set to another\n        - Handling obscenely large amounts of data\n    - System design\n        - features sets\n        - interfaces\n        - class hierarchies\n        - designing a system under certain constraints\n        - simplicity and robustness\n        - tradeoffs\n        - performance analysis and optimization\n- [ ] **START HERE**: [The System Design Primer](https://github.com/donnemartin/system-design-primer)\n- [ ] [System Design from HiredInTech](http://www.hiredintech.com/system-design/)\n- [ ] [How Do I Prepare To Answer Design Questions In A Technical Interview?](https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023)\n- [ ] [8 steps guide to ace your system design interview](https://javascript.plainenglish.io/8-steps-guide-to-ace-a-system-design-interview-7a5a797f4d7d)\n- [ ] [Database Normalization - 1NF, 2NF, 3NF and 4NF (video)](https://www.youtube.com/watch?v=UrYLYV7WSHM)\n- [ ] [System Design Interview](https://github.com/checkcheckzz/system-design-interview) - There are a lot of resources in this one. Look through the articles and examples. I put some of them below\n- [ ] [How to ace a systems design interview](https://web.archive.org/web/20120716060051/http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/)\n- [ ] [Numbers Everyone Should Know](http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/)\n- [ ] [How long does it take to make a context switch?](http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html)\n- [ ] [Transactions Across Datacenters (video)](https://www.youtube.com/watch?v=srOgpXECblk)\n- [ ] [A plain English introduction to CAP Theorem](http://ksat.me/a-plain-english-introduction-to-cap-theorem)\n- [ ] [MIT 6.824: Distributed Systems, Spring 2020 (20 videos)](https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB)\n- [ ] Consensus Algorithms:\n    - [ ] Paxos - [Paxos Agreement - Computerphile (video)](https://www.youtube.com/watch?v=s8JqcZtvnsM)\n    - [ ] Raft - [An Introduction to the Raft Distributed Consensus Algorithm (video)](https://www.youtube.com/watch?v=P9Ydif5_qvE)\n        - [ ] [Easy-to-read paper](https://raft.github.io/)\n        - [ ] [Infographic](http://thesecretlivesofdata.com/raft/)\n- [ ] [Consistent Hashing](http://www.tom-e-white.com/2007/11/consistent-hashing.html)\n- [ ] [NoSQL Patterns](http://horicky.blogspot.com/2009/11/nosql-patterns.html)\n- [ ] Scalability:\n    - You don't need all of these. Just pick a few that interest you.\n    - [ ] [Great overview (video)](https://www.youtube.com/watch?v=-W9F__D3oY4)\n    - [ ] Short series:\n        - [Clones](http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones)\n        - [Database](http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database)\n        - [Cache](http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache)\n        - [Asynchronism](http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism)\n    - [ ] [Scalable Web Architecture and Distributed Systems](http://www.aosabook.org/en/distsys.html)\n    - [ ] [Fallacies of Distributed Computing Explained](https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf)\n    - [ ] [Jeff Dean - Building Software Systems At Google and Lessons Learned (video)](https://www.youtube.com/watch?v=modXC5IWTJI)\n    - [ ] [Introduction to Architecting Systems for Scale](http://lethain.com/introduction-to-architecting-systems-for-scale/)\n    - [ ] [Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)](https://www.youtube.com/watch?v=9nWyWwY2Onc)\n    - [ ] [How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)](https://www.youtube.com/watch?v=H4vMcD7zKM0)\n    - [ ] [The Importance of Algorithms](https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms)\n    - [ ] [Sharding](http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html)\n    - [ ] [Engineering for the Long Game - Astrid Atkinson Keynote(video)](https://www.youtube.com/watch?v=p0jGmgIrf_M&list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&index=4)\n    - [ ] [7 Years Of YouTube Scalability Lessons In 30 Minutes](http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html)\n        - [video](https://www.youtube.com/watch?v=G-lGCC4KKok)\n    - [ ] [How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs](http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html)\n    - [ ] [How to Remove Duplicates in Large Datasets](https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/)\n    - [ ] [A look inside Etsy's scale and engineering culture with Jon Cowie (video)](https://www.youtube.com/watch?v=3vV4YiqKm1o)\n    - [ ] [What Led Amazon to its Own Microservices Architecture](http://thenewstack.io/led-amazon-microservices-architecture/)\n    - [ ] [To Compress Or Not To Compress, That Was Uber's Question](https://eng.uber.com/trip-data-squeeze/)\n    - [ ] [When Should Approximate Query Processing Be Used?](http://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html)\n    - [ ] [Google's Transition From Single Datacenter To Failover, To A Native Multihomed Architecture]( http://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html)\n    - [ ] [The Image Optimization Technology That Serves Millions Of Requests Per Day](http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html)\n    - [ ] [A Patreon Architecture Short](http://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html)\n    - [ ] [Tinder: How Does One Of The Largest Recommendation Engines Decide Who You'll See Next?](http://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html)\n    - [ ] [Design Of A Modern Cache](http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html)\n    - [ ] [Live Video Streaming At Facebook Scale](http://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html)\n    - [ ] [A Beginner's Guide To Scaling To 11 Million+ Users On Amazon's AWS](http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html)\n    - [ ] [A 360 Degree View Of The Entire Netflix Stack](http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html)\n    - [ ] [Latency Is Everywhere And It Costs You Sales - How To Crush It](http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it)\n    - [ ] [What Powers Instagram: Hundreds of Instances, Dozens of Technologies](http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances)\n    - [ ] [Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day](http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html)\n    - [ ] [ESPN's Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second](http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html)\n    - [ ] See \"Messaging, Serialization, and Queueing Systems\" way below for info on some of the technologies that can glue services together\n    - [ ] Twitter:\n        - [O'Reilly MySQL CE 2011: Jeremy Cole, \"Big and Small Data at @Twitter\" (video)](https://www.youtube.com/watch?v=5cKTP36HVgI)\n        - [Timelines at Scale](https://www.infoq.com/presentations/Twitter-Timeline-Scalability)\n    - For even more, see the \"Mining Massive Datasets\" video series in the [Video Series](#video-series) section\n- [ ] Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:\n    - review: [The System Design Primer](https://github.com/donnemartin/system-design-primer)\n    - [System Design from HiredInTech](http://www.hiredintech.com/system-design/)\n    - [cheat sheet](https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf)\n    - flow:\n        1. Understand the problem and scope:\n            - Define the use cases, with the interviewer's help\n            - Suggest additional features\n            - Remove items that the interviewer deems out of scope\n            - Assume high availability is required, add as a use case\n        2. Think about constraints:\n            - Ask how many requests per month\n            - Ask how many requests per second (they may volunteer it or make you do the math)\n            - Estimate reads vs. writes percentage\n            - Keep the 80/20 rule in mind when estimating\n            - How much data is written per second\n            - Total storage required over 5 years\n            - How much data read per second\n        3. Abstract design:\n            - Layers (service, data, caching)\n            - Infrastructure: load balancing, messaging\n            - Rough overview of any key algorithm that drives the service\n            - Consider bottlenecks and determine solutions\n    - Exercises:\n        - [Design a random unique ID generation system](https://blog.twitter.com/2010/announcing-snowflake)\n        - [Design a key-value database](http://www.slideshare.net/dvirsky/introduction-to-redis)\n        - [Design a picture sharing system](http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html)\n        - [Design a recommendation system](http://ijcai13.org/files/tutorial_slides/td3.pdf)\n        - [Design a URL-shortener system: copied from above](http://www.hiredintech.com/system-design/the-system-design-process/)\n        - [Design a cache system](https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Additional Learning\n\n    I added them to help you become a well-rounded software engineer and to be aware of certain\n    technologies and algorithms, so you'll have a bigger toolbox.\n\n- ### Compilers\n    - [How a Compiler Works in ~1 minute (video)](https://www.youtube.com/watch?v=IhC7sdYe-Jg)\n    - [Harvard CS50 - Compilers (video)](https://www.youtube.com/watch?v=CSZLNYF4Klo)\n    - [C++ (video)](https://www.youtube.com/watch?v=twodd1KFfGk)\n    - [Understanding Compiler Optimization (C++) (video)](https://www.youtube.com/watch?v=FnGCDLhaxKU)\n\n- ### Emacs and vi(m)\n    - Familiarize yourself with a UNIX-based code editor\n    - vi(m):\n        - [Editing With Vim 01 - Installation, Setup, and The Modes (video)](https://www.youtube.com/watch?v=5givLEMcINQ&index=1&list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr)\n        - [VIM Adventures](http://vim-adventures.com/)\n        - set of 4 videos:\n            - [The vi/vim editor - Lesson 1](https://www.youtube.com/watch?v=SI8TeVMX8pk)\n            - [The vi/vim editor - Lesson 2](https://www.youtube.com/watch?v=F3OO7ZIOaJE)\n            - [The vi/vim editor - Lesson 3](https://www.youtube.com/watch?v=ZYEccA_nMaI)\n            - [The vi/vim editor - Lesson 4](https://www.youtube.com/watch?v=1lYD5gwgZIA)\n        - [Using Vi Instead of Emacs](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs)\n    - emacs:\n        - [Basics Emacs Tutorial (video)](https://www.youtube.com/watch?v=hbmV1bnQ-i0)\n        - set of 3 (videos):\n            - [Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands](https://www.youtube.com/watch?v=ujODL7MD04Q)\n            - [Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes](https://www.youtube.com/watch?v=XWpsRupJ4II)\n            - [Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file, and packages](https://www.youtube.com/watch?v=paSgzPso-yc)\n        - [Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)](https://www.youtube.com/watch?v=JWD1Fpdd4Pc)\n        - [Writing C Programs With Emacs](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs)\n\t- [The Absolute Beginner's Guide to Emacs (video by David Wilson)](https://www.youtube.com/watch?v=48JlgiBpw_I&t=0s)\n\t- [The Absolute Beginner's Guide to Emacs (notes by David Wilson)](https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/)\n\n- ### Unix/Linux command line tools\n    - I filled in the list below from good tools.\n    - bash\n    - cat\n    - grep\n    - sed\n    - awk\n    - curl or wget\n    - sort\n    - tr\n    - uniq\n    - [strace](https://en.wikipedia.org/wiki/Strace)\n    - [tcpdump](https://danielmiessler.com/study/tcpdump/)\n    - [Essential Linux Commands Tutorial](https://labex.io/tutorials/practice-linux-commands-hands-on-labs-398420)\n\n- ### DevOps\n    - [DevOps Roadmap](https://roadmap.sh/devops)\n\n- ### Information theory (videos)\n    - [Khan Academy](https://www.khanacademy.org/computing/computer-science/informationtheory)\n    - More about Markov processes:\n        - [Core Markov Text Generation](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation)\n        - [Core Implementing Markov Text Generation](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation)\n        - [Project = Markov Text Generation Walk Through](https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through)\n    - See more in the MIT 6.050J Information and Entropy series below\n\n- ### Parity & Hamming Code (videos)\n    - [Intro](https://www.youtube.com/watch?v=q-3BctoUpHE)\n    - [Parity](https://www.youtube.com/watch?v=DdMcAUlxh1M)\n    - Hamming Code:\n        - [Error detection](https://www.youtube.com/watch?v=1A_NcXxdoCc)\n        - [Error correction](https://www.youtube.com/watch?v=JAMLuxdHH8o)\n    - [Error Checking](https://www.youtube.com/watch?v=wbH2VxzmoZk)\n\n- ### Entropy\n    - Also see the videos below\n    - Make sure to watch information theory videos first\n    - [Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression & Bits (video)](https://youtu.be/JnJq3Py0dyM?t=176)\n\n- ### Cryptography\n    - Also see the videos below\n    - Make sure to watch information theory videos first\n    - [Khan Academy Series](https://www.khanacademy.org/computing/computer-science/cryptography)\n    - [Cryptography: Hash Functions](https://www.youtube.com/watch?v=KqqOXndnvic&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=30)\n    - [Cryptography: Encryption](https://www.youtube.com/watch?v=9TNI2wHmaeI&index=31&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n\n- ### Compression\n    - Make sure to watch information theory videos first\n    - Computerphile (videos):\n        - [Compression](https://www.youtube.com/watch?v=Lto-ajuqW3w)\n        - [Entropy in Compression](https://www.youtube.com/watch?v=M5c_RFKVkko)\n        - [Upside Down Trees (Huffman Trees)](https://www.youtube.com/watch?v=umTbivyJoiI)\n        - [EXTRA BITS/TRITS - Huffman Trees](https://www.youtube.com/watch?v=DV8efuB3h2g)\n        - [Elegant Compression in Text (The LZ 77 Method)](https://www.youtube.com/watch?v=goOa3DGezUA)\n        - [Text Compression Meets Probabilities](https://www.youtube.com/watch?v=cCDCfoHTsaU)\n    - [Compressor Head videos](https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H)\n    - [(optional) Google Developers Live: GZIP is not enough!](https://www.youtube.com/watch?v=whGwm0Lky2s)\n\n- ### Computer Security\n    - [MIT (23 videos)](https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Introduction, Threat Models](https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Control Hijacking Attacks](https://www.youtube.com/watch?v=6bwzNg5qQ0o&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=2)\n        - [Buffer Overflow Exploits and Defenses](https://www.youtube.com/watch?v=drQyrzRoRiA&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=3)\n        - [Privilege Separation](https://www.youtube.com/watch?v=6SIJmoE9L9g&index=4&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Capabilities](https://www.youtube.com/watch?v=8VqTSY-11F4&index=5&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Sandboxing Native Code](https://www.youtube.com/watch?v=VEV74hwASeU&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=6)\n        - [Web Security Model](https://www.youtube.com/watch?v=chkFBigodIw&index=7&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Securing Web Applications](https://www.youtube.com/watch?v=EBQIGy1ROLY&index=8&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Symbolic Execution](https://www.youtube.com/watch?v=yRVZPvHYHzw&index=9&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Network Security](https://www.youtube.com/watch?v=SIEVvk3NVuk&index=11&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Network Protocols](https://www.youtube.com/watch?v=QOtA76ga_fY&index=12&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n        - [Side-Channel Attacks](https://www.youtube.com/watch?v=PuVMkSEcPiI&index=15&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n\n- ### Garbage collection\n    - [GC in Python (video)](https://www.youtube.com/watch?v=iHVs_HkjdmI)\n    - [Deep Dive Java: Garbage Collection is Good!](https://www.infoq.com/presentations/garbage-collection-benefits)\n    - [Deep Dive Python: Garbage Collection in CPython (video)](https://www.youtube.com/watch?v=P-8Z0-MhdQs&list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&index=3)\n\n- ### Parallel Programming\n    - [Coursera (Scala)](https://www.coursera.org/learn/parprog1/home/week/1)\n    - [Efficient Python for High-Performance Parallel Computing (video)](https://www.youtube.com/watch?v=uY85GkaYzBk)\n\n- ### Messaging, Serialization, and Queueing Systems\n    - [Thrift](https://thrift.apache.org/)\n        - [Tutorial](http://thrift-tutorial.readthedocs.io/en/latest/intro.html)\n    - [Protocol Buffers](https://developers.google.com/protocol-buffers/)\n        - [Tutorials](https://developers.google.com/protocol-buffers/docs/tutorials)\n    - [gRPC](http://www.grpc.io/)\n        - [gRPC 101 for Java Developers (video)](https://www.youtube.com/watch?v=5tmPvSe7xXQ&list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&index=1)\n    - [Redis](http://redis.io/)\n        - [Tutorial](http://try.redis.io/)\n    - [Amazon SQS (queue)](https://aws.amazon.com/sqs/)\n    - [Amazon SNS (pub-sub)](https://aws.amazon.com/sns/)\n    - [RabbitMQ](https://www.rabbitmq.com/)\n        - [Get Started](https://www.rabbitmq.com/getstarted.html)\n    - [Celery](http://www.celeryproject.org/)\n        - [First Steps With Celery](http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html)\n    - [ZeroMQ](http://zeromq.org/)\n        - [Intro - Read The Manual](http://zeromq.org/intro:read-the-manual)\n    - [ActiveMQ](http://activemq.apache.org/)\n    - [Kafka](http://kafka.apache.org/documentation.html#introduction)\n    - [MessagePack](http://msgpack.org/index.html)\n    - [Avro](https://avro.apache.org/)\n\n- ### A*\n    - [A Search Algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm)\n    - [A* Pathfinding (E01: algorithm explanation) (video)](https://www.youtube.com/watch?v=-L-WgKMFuhE)\n\n- ### Fast Fourier Transform\n    - [An Interactive Guide To The Fourier Transform](https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/)\n    - [What is a Fourier transform? What is it used for?](http://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/)\n    - [What is the Fourier Transform? (video)](https://www.youtube.com/watch?v=Xxut2PN-V8Q)\n    - [Divide & Conquer: FFT (video)](https://www.youtube.com/watch?v=iTMn0Kt18tg&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=4)\n    - [Understanding The FFT](http://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/)\n\n- ### Bloom Filter\n    - Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)\n    - [Bloom Filters (video)](https://www.youtube.com/watch?v=-SuTGoFYjZs)\n    - [Bloom Filters | Mining of Massive Datasets | Stanford University (video)](https://www.youtube.com/watch?v=qBTdukbzc78)\n    - [Tutorial](http://billmill.org/bloomfilter-tutorial/)\n    - [How To Write A Bloom Filter App](http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/)\n\n- ### HyperLogLog\n    - [How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory](http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html)\n\n- ### Locality-Sensitive Hashing\n    - Used to determine the similarity of documents\n    - The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same\n    - [Simhashing (hopefully) made simple](http://ferd.ca/simhashing-hopefully-made-simple.html)\n\n- ### van Emde Boas Trees\n    - [Divide & Conquer: van Emde Boas Trees (video)](https://www.youtube.com/watch?v=hmReJCupbNU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=6)\n    - [MIT Lecture Notes](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf)\n\n- ### Augmented Data Structures\n    - [CS 61B Lecture 39: Augmenting Data Structures](https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc)\n\n- ### Balanced search trees\n    - Know at least one type of balanced binary tree (and know how it's implemented):\n    - \"Among balanced search trees, AVL and 2/3 trees are now passé and red-black trees seem to be more popular.\n        A particularly interesting self-organizing data structure is the splay tree, which uses rotations\n        to move any accessed key to the root.\" - Skiena\n    - Of these, I chose to implement a splay tree. From what I've read, you won't implement a\n        balanced search tree in your interview. But I wanted exposure to coding one up\n        and let's face it, splay trees are the bee's knees. I did read a lot of red-black tree code\n        - Splay tree: insert, search, delete functions\n        If you end up implementing a red/black tree try just these:\n        - Search and insertion functions, skipping delete\n    - I want to learn more about B-Tree since it's used so widely with very large data sets\n    - [Self-balancing binary search tree](https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree)\n\n    - **AVL trees**\n        - In practice:\n            From what I can tell, these aren't used much in practice, but I could see where they would be:\n            The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly\n            balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it\n            attractive for data structures that may be built once and loaded without reconstruction, such as language\n            dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)\n        - [MIT AVL Trees / AVL Sort (video)](https://www.youtube.com/watch?v=FNeL18KsWPc&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=6)\n        - [AVL Trees (video)](https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees)\n        - [AVL Tree Implementation (video)](https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation)\n        - [Split And Merge](https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge)\n        - [[Review] AVL Trees (playlist) in 19 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZOUFgdIeOPuH6cfSnNRMau-)\n\n    - **Splay trees**\n        - In practice:\n            Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,\n            data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,\n            networking and file system code) etc\n        - [CS 61B: Splay Trees (video)](https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY)\n        - MIT Lecture: Splay Trees:\n            - Gets very mathy, but watch the last 10 minutes for sure.\n            - [Video](https://www.youtube.com/watch?v=QnPl_Y6EqMo)\n\n    - **Red/black trees**\n        - These are a translation of a 2-3 tree (see below).\n        - In practice:\n            Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.\n            Not only does this make them valuable in time-sensitive applications such as real-time applications,\n            but it makes them valuable building blocks in other data structures that provide worst-case guarantees;\n            for example, many data structures used in computational geometry can be based on red-black trees, and\n            the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In version 8 of Java,\n            the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor\n            hashcodes, a Red-Black tree is used\n        - [Aduni - Algorithms - Lecture 4 (link jumps to the starting point) (video)](https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3871)\n        - [Aduni - Algorithms - Lecture 5 (video)](https://www.youtube.com/watch?v=hm2GHwyKF1o&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=5)\n        - [Red-Black Tree](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n        - [An Introduction To Binary Search And Red Black Tree](https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees)\n        - [[Review] Red-Black Trees (playlist) in 30 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin)\n\n    - **2-3 search trees**\n        - In practice:\n            2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).\n        - You would use 2-3 trees very rarely because its implementation involves different types of nodes. Instead, people use Red-Black trees.\n        - [23-Tree Intuition and Definition (video)](https://www.youtube.com/watch?v=C3SsdUqasD4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=2)\n        - [Binary View of 23-Tree](https://www.youtube.com/watch?v=iYvBtGKsqSg&index=3&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n        - [2-3 Trees (student recitation) (video)](https://www.youtube.com/watch?v=TOb1tuEZ2X4&index=5&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n\n    - **2-3-4 Trees (aka 2-4 trees)**\n        - In practice:\n            For every 2-4 trees, there are corresponding red–black trees with data elements in the same order. The insertion and deletion\n            operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an\n            important tool for understanding the logic behind red-black trees, and this is why many introductory algorithm texts introduce\n            2-4 trees just before red–black trees, even though **2-4 trees are not often used in practice**.\n        - [CS 61B Lecture 26: Balanced Search Trees (video)](https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q)\n        - [Bottom Up 234-Trees (video)](https://www.youtube.com/watch?v=DQdMYevEyE4&index=4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n        - [Top Down 234-Trees (video)](https://www.youtube.com/watch?v=2679VQ26Fp4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=5)\n\n    - **N-ary (K-ary, M-ary) trees**\n        - note: the N or K is the branching factor (max branches)\n        - binary trees are a 2-ary tree, with branching factor = 2\n        - 2-3 trees are 3-ary\n        - [K-Ary Tree](https://en.wikipedia.org/wiki/K-ary_tree)\n\n    - **B-Trees**\n        - Fun fact: it's a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).\n        - In Practice:\n            B-trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to\n            its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary\n            block in a particular file. The basic problem is turning the file block address into a disk block\n            (or perhaps to a cylinder head sector) address\n        - [B-Tree](https://en.wikipedia.org/wiki/B-tree)\n        - [B-Tree Datastructure](http://btechsmartclass.com/data_structures/b-trees.html)\n        - [Introduction to B-Trees (video)](https://www.youtube.com/watch?v=I22wEC1tTGo&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=6)\n        - [B-Tree Definition and Insertion (video)](https://www.youtube.com/watch?v=s3bCdZGrgpA&index=7&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n        - [B-Tree Deletion (video)](https://www.youtube.com/watch?v=svfnVhJOfMc&index=8&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n        - [MIT 6.851 - Memory Hierarchy Models (video)](https://www.youtube.com/watch?v=V3omVLzI0WE&index=7&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf)\n                - covers cache-oblivious B-Trees, very interesting data structures\n                - the first 37 minutes are very technical, and may be skipped (B is block size, cache line size)\n        - [[Review] B-Trees (playlist) in 26 minutes (video)](https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz)\n\n\n- ### k-D Trees\n    - Great for finding a number of points in a rectangle or higher-dimensional object\n    - A good fit for k-nearest neighbors\n    - [kNN K-d tree algorithm (video)](https://www.youtube.com/watch?v=Y4ZgLlDfKDg)\n\n- ### Skip lists\n    - \"These are somewhat of a cult data structure\" - Skiena\n    - [Randomization: Skip Lists (video)](https://www.youtube.com/watch?v=2g9OSRKJuzM&index=10&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n    - [For animations and a little more detail](https://en.wikipedia.org/wiki/Skip_list)\n\n- ### Network Flows\n    - [Ford-Fulkerson in 5 minutes — Step by step example (video)](https://www.youtube.com/watch?v=Tl90tNtKvxs)\n    - [Ford-Fulkerson Algorithm (video)](https://www.youtube.com/watch?v=v1VgJmkEJW0)\n    - [Network Flows (video)](https://www.youtube.com/watch?v=2vhN4Ice5jI)\n\n- ### Disjoint Sets & Union Find\n    - [UCB 61B - Disjoint Sets; Sorting & selection (video)](https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI)\n    - [Sedgewick Algorithms - Union-Find (6 videos)](https://www.coursera.org/learn/algorithms-part1/home/week/1)\n\n- ### Math for Fast Processing\n    - [Integer Arithmetic, Karatsuba Multiplication (video)](https://www.youtube.com/watch?v=eCaXlAaN2uE&index=11&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n    - [The Chinese Remainder Theorem (used in cryptography) (video)](https://www.youtube.com/watch?v=ru7mWZJlRQg)\n\n- ### Treap\n    - Combination of a binary search tree and a heap\n    - [Treap](https://en.wikipedia.org/wiki/Treap)\n    - [Data Structures: Treaps explained (video)](https://www.youtube.com/watch?v=6podLUYinH8)\n    - [Applications in set operations](https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf)\n\n- ### Linear Programming (videos)\n    - [Linear Programming](https://www.youtube.com/watch?v=M4K6HYLHREQ)\n    - [Finding minimum cost](https://www.youtube.com/watch?v=2ACJ9ewUC6U)\n    - [Finding maximum value](https://www.youtube.com/watch?v=8AA_81xI3ik)\n    - [Solve Linear Equations with Python - Simplex Algorithm](https://www.youtube.com/watch?v=44pAWI7v5Zk)\n\n- ### Geometry, Convex hull (videos)\n    - [Graph Alg. IV: Intro to geometric algorithms - Lecture 9](https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3164)\n    - [Geometric Algorithms: Graham & Jarvis - Lecture 10](https://www.youtube.com/watch?v=J5aJEcOr6Eo&index=10&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n    - [Divide & Conquer: Convex Hull, Median Finding](https://www.youtube.com/watch?v=EzeYI7p9MjU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=2)\n\n- ### Discrete math\n    - [Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory](http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html)\n    - [Discrete Mathematics by Shai Simonson (19 videos)](https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t)\n    - [Discrete Mathematics By IIT Ropar NPTEL](https://nptel.ac.in/courses/106/106/106106183/)\n\n---\n\n**[⬆ back to top](#table-of-contents)**\n\n## Additional Detail on Some Subjects\n\n    I added these to reinforce some ideas already presented above, but didn't want to include them\n    above because it's just too much. It's easy to overdo it on a subject.\n    You want to get hired in this century, right?\n\n- **SOLID**\n    - [ ] [Bob Martin SOLID Principles of Object Oriented and Agile Design (video)](https://www.youtube.com/watch?v=TMuno5RZNeE)\n    - [ ] S - [Single Responsibility Principle](http://www.oodesign.com/single-responsibility-principle.html) | [Single responsibility to each Object](http://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html)\n        - [more flavor](https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk)\n    - [ ] O - [Open/Closed Principle](http://www.oodesign.com/open-close-principle.html)  | [On production level Objects are ready for extension but not for modification](https://en.wikipedia.org/wiki/Open/closed_principle)\n        - [more flavor](http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&hl=en)\n    - [ ] L - [Liskov Substitution Principle](http://www.oodesign.com/liskov-s-substitution-principle.html) | [Base Class and Derived class follow ‘IS A’ Principle](http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle)\n        - [more flavor](http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&hl=en)\n    - [ ] I - [Interface segregation principle](http://www.oodesign.com/interface-segregation-principle.html) | Clients should not be forced to implement interfaces they don't use\n        - [Interface Segregation Principle in 5 minutes (video)](https://www.youtube.com/watch?v=3CtAfl7aXAQ)\n        - [more flavor](http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&hl=en)\n    - [ ] D -[Dependency Inversion principle](http://www.oodesign.com/dependency-inversion-principle.html) | Reduce the dependency In composition of objects.\n        - [Why Is The Dependency Inversion Principle And Why Is It Important](http://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important)\n        - [more flavor](http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&hl=en)\n\n\n- **Union-Find**\n    - [Overview](https://www.coursera.org/learn/data-structures/lecture/JssSY/overview)\n    - [Naive Implementation](https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations)\n    - [Trees](https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees)\n    - [Union By Rank](https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank)\n    - [Path Compression](https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression)\n    - [Analysis Options](https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional)\n\n- **More Dynamic Programming** (videos)\n    - [6.006: Dynamic Programming I: Fibonacci, Shortest Paths](https://www.youtube.com/watch?v=r4-cftqTcdI&ab_channel=MITOpenCourseWare)\n    - [6.006: Dynamic Programming II: Text Justification, Blackjack](https://www.youtube.com/watch?v=KLBCUx1is2c&ab_channel=MITOpenCourseWare)\n    - [6.006: DP III: Parenthesization, Edit Distance, Knapsack](https://www.youtube.com/watch?v=TDo3r5M1LNo&ab_channel=MITOpenCourseWare)\n    - [6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.](https://www.youtube.com/watch?v=i9OAOk0CUQE&ab_channel=MITOpenCourseWare)\n    - [6.046: Dynamic Programming & Advanced DP](https://www.youtube.com/watch?v=Tw1k46ywN6E&index=14&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n    - [6.046: Dynamic Programming: All-Pairs Shortest Paths](https://www.youtube.com/watch?v=NzgFUwOaoIw&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=15)\n    - [6.046: Dynamic Programming (student recitation)](https://www.youtube.com/watch?v=krZI60lKPek&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=12)\n\n- **Advanced Graph Processing** (videos)\n    - [Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees](https://www.youtube.com/watch?v=mUBmcbbJNf4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=27)\n    - [Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees](https://www.youtube.com/watch?v=kQ-UQAzcnzA&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=28)\n\n- MIT **Probability** (mathy, and go slowly, which is good for mathy things) (videos):\n    - [MIT 6.042J - Probability Introduction](https://www.youtube.com/watch?v=SmFwFdESMHI&index=18&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Conditional Probability](https://www.youtube.com/watch?v=E6FbvM-FGZ8&index=19&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Independence](https://www.youtube.com/watch?v=l1BCv3qqW4A&index=20&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Random Variables](https://www.youtube.com/watch?v=MOfhhFaQdjw&list=PLB7540DEDD482705B&index=21)\n    - [MIT 6.042J - Expectation I](https://www.youtube.com/watch?v=gGlMSe7uEkA&index=22&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Expectation II](https://www.youtube.com/watch?v=oI9fMUqgfxY&index=23&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Large Deviations](https://www.youtube.com/watch?v=q4mwO2qS2z4&index=24&list=PLB7540DEDD482705B)\n    - [MIT 6.042J - Random Walks](https://www.youtube.com/watch?v=56iFMY8QW2k&list=PLB7540DEDD482705B&index=25)\n\n- [Simonson: Approximation Algorithms (video)](https://www.youtube.com/watch?v=oDniZCmNmNw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=19)\n\n- **String Matching**\n    - Rabin-Karp (videos):\n        - [Rabin Karps Algorithm](https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw)\n        - [Precomputing](https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation)\n        - [Optimization: Implementation and Analysis](https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis)\n        - [Table Doubling, Karp-Rabin](https://www.youtube.com/watch?v=BRO7mVIFt08&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=9)\n        - [Rolling Hashes, Amortized Analysis](https://www.youtube.com/watch?v=w6nuXg0BISo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=32)\n    - Knuth-Morris-Pratt (KMP):\n        - [TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm](https://www.youtube.com/watch?v=5i7oKodCRJo)\n    - Boyer–Moore string search algorithm\n        - [Boyer-Moore String Search Algorithm](https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm)\n        - [Advanced String Searching Boyer-Moore-Horspool Algorithms (video)](https://www.youtube.com/watch?v=QDZpzctPf10)\n    - [Coursera: Algorithms on Strings](https://www.coursera.org/learn/algorithms-on-strings/home/week/1)\n        - starts off great, but by the time it gets past KMP it gets more complicated than it needs to be\n        - nice explanation of tries\n        - can be skipped\n\n- **Sorting**\n\n    - Stanford lectures on sorting:\n        - [Lecture 15 | Programming Abstractions (video)](https://www.youtube.com/watch?v=ENp00xylP7c&index=15&list=PLFE6E58F856038C69)\n        - [Lecture 16 | Programming Abstractions (video)](https://www.youtube.com/watch?v=y4M9IVgrVKo&index=16&list=PLFE6E58F856038C69)\n    - Shai Simonson:\n        - [Algorithms - Sorting - Lecture 2 (video)](https://www.youtube.com/watch?v=odNJmw5TOEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=2)\n        - [Algorithms - Sorting II - Lecture 3 (video)](https://www.youtube.com/watch?v=hj8YKFTFKEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=3)\n    - Steven Skiena lectures on sorting:\n        - [CSE373 2020 - Mergesort/Quicksort (video)](https://www.youtube.com/watch?v=jUf-UQ3a0kg&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=8)\n        - [CSE373 2020 - Linear Sorting (video)](https://www.youtube.com/watch?v=0ksyQKmre84&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=9)\n\n- NAND To Tetris: [Build a Modern Computer from First Principles](https://www.coursera.org/learn/build-a-computer)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Video Series\n\nSit back and enjoy.\n\n- [List of individual Dynamic Programming problems (each is short)](https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr)\n\n- [x86 Architecture, Assembly, Applications (11 videos)](https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0)\n\n- [MIT 18.06 Linear Algebra, Spring 2005 (35 videos)](https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8)\n\n- [Excellent - MIT Calculus Revisited: Single Variable Calculus](https://www.youtube.com/playlist?list=PL3B08AE665AB9002A)\n\n- [Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)](https://www.youtube.com/watch?v=22hwcnXIGgk&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=1)\n\n- [UC Berkeley 61B (Spring 2014): Data Structures (25 videos)](https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd)\n\n- [UC Berkeley 61B (Fall 2006): Data Structures (39 videos)](https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C)\n\n- [UC Berkeley 61C: Machine Structures (26 videos)](https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_)\n\n- [OOSE: Software Dev Using UML and Java (21 videos)](https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO)\n\n- [MIT 6.004: Computation Structures (49 videos)](https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu)\n\n- [Carnegie Mellon - Computer Architecture Lectures (39 videos)](https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq)\n\n- [MIT 6.006: Intro to Algorithms (47 videos)](https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&nohtml5=False)\n\n- [MIT 6.033: Computer System Engineering (22 videos)](https://www.youtube.com/watch?v=zm2VP0kHl1M&list=PL6535748F59DCA484)\n\n- [MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)](https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi)\n\n- [MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)](https://www.youtube.com/watch?v=L3LMbpZIKhQ&list=PLB7540DEDD482705B)\n\n- [MIT 6.046: Design and Analysis of Algorithms (34 videos)](https://www.youtube.com/watch?v=2P-yW7LQr08&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n\n- [MIT 6.824: Distributed Systems, Spring 2020 (20 videos)](https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB)\n\n- [MIT 6.851: Advanced Data Structures (22 videos)](https://www.youtube.com/watch?v=T0yzrZL1py0&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=1)\n\n- [MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)](https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c)\n\n- [Harvard COMPSCI 224: Advanced Algorithms (25 videos)](https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf)\n\n- [MIT 6.858 Computer Systems Security, Fall 2014](https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n\n- [Stanford: Programming Paradigms (27 videos)](https://www.youtube.com/playlist?list=PL9D558D49CA734A02)\n\n- [Introduction to Cryptography by Christof Paar](https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy)\n    - [Course Website along with Slides and Problem Sets](http://www.crypto-textbook.com/)\n\n- [Mining Massive Datasets - Stanford University (94 videos)](https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV)\n\n- [Graph Theory by Sarada Herke (67 videos)](https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&view=50&sort=dd)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Computer Science Courses\n\n- [Directory of Online CS Courses](https://github.com/open-source-society/computer-science)\n- [Directory of CS Courses (many with online lectures)](https://github.com/prakhar1989/awesome-courses)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Algorithms implementation\n\n- [Multiple Algorithms implementation by Princeton University](https://algs4.cs.princeton.edu/code)\n\n**[⬆ back to top](#table-of-contents)**\n\n## Papers\n\n- [Love classic papers?](https://www.cs.cmu.edu/~crary/819-f09/)\n- [1978: Communicating Sequential Processes](http://spinroot.com/courses/summer/Papers/hoare_1978.pdf)\n    - [implemented in Go](https://godoc.org/github.com/thomas11/csp)\n- [2003: The Google File System](http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf)\n    - replaced by Colossus in 2012\n- [2004: MapReduce: Simplified Data Processing on Large Clusters]( http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf)\n    - mostly replaced by Cloud Dataflow?\n- [2006: Bigtable: A Distributed Storage System for Structured Data](https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf)\n- [2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems](https://research.google.com/archive/chubby-osdi06.pdf)\n- [2007: Dynamo: Amazon’s Highly Available Key-value Store](http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf)\n    - The Dynamo paper kicked off the NoSQL revolution\n- [2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)](https://www.akkadia.org/drepper/cpumemory.pdf)\n- 2012: AddressSanitizer: A Fast Address Sanity Checker:\n    - [paper](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf)\n    - [video](https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany)\n- 2013: Spanner: Google’s Globally-Distributed Database:\n    - [paper](http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf)\n    - [video](https://www.usenix.org/node/170855)\n- [2015: Continuous Pipelines at Google](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf)\n- [2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf)\n- [2015: How Developers Search for Code: A Case Study](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf)\n- More papers: [1,000 papers](https://github.com/0voice/computer_expert_paper)\n\n**[⬆ back to top](#table-of-contents)**\n\n## LICENSE\n\n[CC-BY-SA-4.0](./LICENSE.txt)\n"
  }
]